# coding: utf-8

"""
    Yapily API

    The Yapily API enables connections between your application and users' banks. For more information check out our [documentation](https://docs.yapily.com/).<br><br>In particular, make sure to view our [Getting Started](https://docs.yapily.com/pages/home/getting-started/) steps if this is your first time here.<br><br>While testing the API, our list of [sandbox credentials](https://docs.yapily.com/pages/key-concepts/sandbox-credentials/) maybe useful.  # noqa: E501

    The version of the OpenAPI document: 2.13.1
    Contact: support@yapily.com
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import unittest
import datetime

import yapily
from yapily.models.non_sweeping_authorisation_request import NonSweepingAuthorisationRequest  # noqa: E501
from yapily.rest import ApiException

class TestNonSweepingAuthorisationRequest(unittest.TestCase):
    """NonSweepingAuthorisationRequest unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional):
        """Test NonSweepingAuthorisationRequest
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # model = yapily.models.non_sweeping_authorisation_request.NonSweepingAuthorisationRequest()  # noqa: E501
        if include_optional :
            return NonSweepingAuthorisationRequest(
                user_id = '0', 
                application_user_id = '0', 
                forward_parameters = [
                    '0'
                    ], 
                context_type = 'OTHER', 
                institution_id = 'yapily-mock', 
                callback = 'https://display-parameters.com', 
                redirect = yapily.models.redirect_request.RedirectRequest(
                    url = '0', ), 
                one_time_token = False, 
                control_parameters = yapily.models.non_sweeping_control_parameters.NonSweepingControlParameters(
                    psu_authentication_methods = [
                        '0'
                        ], 
                    periodic_limits = [
                        yapily.models.non_sweeping_periodic_limits.NonSweepingPeriodicLimits(
                            total_max_amount = null, 
                            frequency = '0', 
                            alignment = '0', 
                            max_number_of_payments = 56, )
                        ], 
                    max_amount_per_payment = null, 
                    max_cumulative_amount = null, 
                    max_cumulative_number_of_payments = 56, 
                    valid_from = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    valid_to = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), ), 
                initiation_details = yapily.models.initiation_details.InitiationDetails(
                    reference = 'Own Account Sweeping', 
                    payer = yapily.models.payer.Payer(
                        name = 'John Doe', 
                        account_identifications = [
                            yapily.models.account_identification.AccountIdentification(
                                type = 'SORT_CODE', 
                                identification = '401016', )
                            ], 
                        address = {"country":"GB"}, ), 
                    payee = yapily.models.payee.Payee(
                        name = 'Jane Doe', 
                        account_identifications = [{"identification":"401016","type":"SORT_CODE"},{"identification":"71518920","type":"ACCOUNT_NUMBER"}], 
                        merchant_id = '24589303', 
                        merchant_category_code = '5551', ), )
            )
        else :
            return NonSweepingAuthorisationRequest(
                institution_id = 'yapily-mock',
                control_parameters = yapily.models.non_sweeping_control_parameters.NonSweepingControlParameters(
                    psu_authentication_methods = [
                        '0'
                        ], 
                    periodic_limits = [
                        yapily.models.non_sweeping_periodic_limits.NonSweepingPeriodicLimits(
                            total_max_amount = null, 
                            frequency = '0', 
                            alignment = '0', 
                            max_number_of_payments = 56, )
                        ], 
                    max_amount_per_payment = null, 
                    max_cumulative_amount = null, 
                    max_cumulative_number_of_payments = 56, 
                    valid_from = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    valid_to = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), ),
                initiation_details = yapily.models.initiation_details.InitiationDetails(
                    reference = 'Own Account Sweeping', 
                    payer = yapily.models.payer.Payer(
                        name = 'John Doe', 
                        account_identifications = [
                            yapily.models.account_identification.AccountIdentification(
                                type = 'SORT_CODE', 
                                identification = '401016', )
                            ], 
                        address = {"country":"GB"}, ), 
                    payee = yapily.models.payee.Payee(
                        name = 'Jane Doe', 
                        account_identifications = [{"identification":"401016","type":"SORT_CODE"},{"identification":"71518920","type":"ACCOUNT_NUMBER"}], 
                        merchant_id = '24589303', 
                        merchant_category_code = '5551', ), ),
        )

    def testNonSweepingAuthorisationRequest(self):
        """Test NonSweepingAuthorisationRequest"""
        inst_req_only = self.make_instance(include_optional=False)
        inst_req_and_optional = self.make_instance(include_optional=True)


if __name__ == '__main__':
    unittest.main()
