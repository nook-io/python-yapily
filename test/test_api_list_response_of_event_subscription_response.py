# coding: utf-8

"""
Yapily API

The Yapily API enables connections between your application and users' banks. For more information check out our [documentation](https://docs.yapily.com/).<br><br>In particular, make sure to view our [Getting Started](https://docs.yapily.com/pages/home/getting-started/) steps if this is your first time here.<br><br>While testing the API, our list of [sandbox credentials](https://docs.yapily.com/pages/key-concepts/sandbox-credentials/) maybe useful.

The version of the OpenAPI document: 4.2.0
Contact: support@yapily.com
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

import unittest

from yapily.models.api_list_response_of_event_subscription_response import (
    ApiListResponseOfEventSubscriptionResponse,
)  # noqa: E501


class TestApiListResponseOfEventSubscriptionResponse(unittest.TestCase):
    """ApiListResponseOfEventSubscriptionResponse unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(
        self, include_optional
    ) -> ApiListResponseOfEventSubscriptionResponse:
        """Test ApiListResponseOfEventSubscriptionResponse
        include_option is a boolean, when False only required
        params are included, when True both required and
        optional params are included"""
        # uncomment below to create an instance of `ApiListResponseOfEventSubscriptionResponse`
        """
        model = ApiListResponseOfEventSubscriptionResponse()  # noqa: E501
        if include_optional:
            return ApiListResponseOfEventSubscriptionResponse(
                meta = yapily.models.response_list_meta.ResponseListMeta(
                    tracing_id = '', 
                    count = 56, 
                    pagination = yapily.models.pagination.Pagination(
                        total_count = 56, 
                        self = yapily.models.filter_and_sort.FilterAndSort(
                            from = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            before = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            limit = 56, 
                            sort = 'date', 
                            offset = 56, 
                            cursor = '', ), 
                        next = yapily.models.next.Next(
                            from = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            before = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            limit = 56, 
                            cursor = '', ), ), ),
                data = [
                    yapily.models.response_on_successful_creation_of_event_subscription.Response on successful creation of event subscription(
                        event_type_id = 'payment.status.completed', 
                        application_id = '2698db90-6635-4f76-b673-5ce8e2aeda0e', 
                        created = '28-07-2021 15:47:03', 
                        notification = yapily.models.notification.Notification(
                            type = 'WEBHOOK', 
                            url = 'https://httpbin.com/new_endpoint', ), )
                    ],
                links = {
                    'key' : ''
                    },
                forwarded_data = [
                    yapily.models.response_forwarded_data.ResponseForwardedData(
                        headers = {
                            'key' : ''
                            }, 
                        url = '', )
                    ],
                raw = [
                    yapily.models.raw_response.RawResponse(
                        request = yapily.models.raw_request.RawRequest(
                            method = '', 
                            url = '', 
                            request_instant = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            headers = {
                                'key' : ''
                                }, 
                            body = yapily.models.body.body(), 
                            body_parameters = {
                                'key' : ''
                                }, 
                            start_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            started_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), ), 
                        duration = '', 
                        headers = {
                            'key' : ''
                            }, 
                        result_code = 56, 
                        result = yapily.models.result.result(), )
                    ],
                paging = yapily.models.filtered_client_payload_list_transaction.FilteredClientPayloadListTransaction(
                    api_call = yapily.models.api_call.ApiCall(), 
                    data = [
                        yapily.models.transaction.Transaction(
                            id = '', 
                            date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            booking_date_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            value_date_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            status = 'BOOKED', 
                            amount = 1.337, 
                            currency = '', 
                            transaction_amount = yapily.models.amount_details.Amount Details(
                                amount = 10, 
                                currency = 'GBP', ), 
                            gross_amount = yapily.models.amount_details.Amount Details(
                                amount = 10, 
                                currency = 'GBP', ), 
                            currency_exchange = yapily.models.currency_exchange.CurrencyExchange(
                                source_currency = '', 
                                target_currency = '', 
                                unit_currency = '', 
                                exchange_rate = 1.337, ), 
                            charge_details = yapily.models.transaction_charge_details.TransactionChargeDetails(
                                charge_amount = , ), 
                            reference = '', 
                            statement_references = [
                                yapily.models.statement_reference.StatementReference(
                                    value = '', )
                                ], 
                            description = '', 
                            transaction_information = [
                                ''
                                ], 
                            address_details = yapily.models.address_details.AddressDetails(
                                address_line = '', ), 
                            iso_bank_transaction_code = yapily.models.iso_bank_transaction_code.IsoBankTransactionCode(
                                domain_code = yapily.models.iso_code_details.IsoCodeDetails(
                                    code = 'UNKNOWN', 
                                    name = 'UNKNOWN', ), 
                                family_code = yapily.models.iso_code_details.IsoCodeDetails(
                                    code = 'UNKNOWN', 
                                    name = 'UNKNOWN', ), 
                                sub_family_code = , ), 
                            proprietary_bank_transaction_code = yapily.models.proprietary_bank_transaction_code.ProprietaryBankTransactionCode(
                                code = '', 
                                issuer = '', ), 
                            balance = yapily.models.transaction_balance.TransactionBalance(
                                type = 'CLOSING_AVAILABLE', 
                                balance_amount = , ), 
                            payee_details = yapily.models.transaction_payee_details.Transaction_payeeDetails(
                                name = '', 
                                account_identifications = [
                                    yapily.models.transaction_payee_details_account_identifications_inner.Transaction_payeeDetails_accountIdentifications_inner(
                                        identification = '', )
                                    ], ), 
                            payer_details = yapily.models.transaction_payer_details.Transaction_payerDetails(
                                name = '', ), 
                            merchant = yapily.models.merchant.Merchant(
                                merchant_name = '', 
                                merchant_category_code = '', ), 
                            enrichment = yapily.models.enrichment.Enrichment(
                                categorisation = yapily.models.categorisation.Categorisation(
                                    categories = [
                                        ''
                                        ], 
                                    source = '', ), 
                                transaction_hash = yapily.models.transaction_hash.TransactionHash(
                                    hash = '', ), 
                                cleansed_description = '', 
                                location = '', 
                                payment_processor = '', 
                                corrected_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), ), 
                            supplementary_data = yapily.models.supplementary_data.supplementaryData(), 
                            transaction_mutability = 'Mutable', )
                        ], 
                    next_cursor_hash = '', 
                    next_link = '', 
                    paging_map = {
                        'key' : yapily.models.filter_and_sort.FilterAndSort(
                            from = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            before = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            limit = 56, 
                            sort = 'date', 
                            offset = 56, 
                            cursor = '', )
                        }, 
                    total_count = 56, ),
                tracing_id = ''
            )
        else:
            return ApiListResponseOfEventSubscriptionResponse(
        )
        """

    def testApiListResponseOfEventSubscriptionResponse(self):
        """Test ApiListResponseOfEventSubscriptionResponse"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)


if __name__ == "__main__":
    unittest.main()
