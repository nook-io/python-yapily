# coding: utf-8

"""
    Yapily API

    The Yapily API enables connections between your application and users' banks. For more information check out our [documentation](https://docs.yapily.com/).<br><br>In particular, make sure to view our [Getting Started](https://docs.yapily.com/#getting-started) steps if this is your first time here.<br><br>While testing the API, our list of [sandbox credentials](https://docs.yapily.com/guides/applications/institutions/sandbox/) maybe useful.  # noqa: E501

    The version of the OpenAPI document: 2.1.0
    Contact: support@yapily.com
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import unittest
import datetime

import openapi_client
from openapi_client.models.api_list_response_of_transaction import ApiListResponseOfTransaction  # noqa: E501
from openapi_client.rest import ApiException

class TestApiListResponseOfTransaction(unittest.TestCase):
    """ApiListResponseOfTransaction unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional):
        """Test ApiListResponseOfTransaction
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # model = openapi_client.models.api_list_response_of_transaction.ApiListResponseOfTransaction()  # noqa: E501
        if include_optional :
            return ApiListResponseOfTransaction(
                meta = openapi_client.models.response_list_meta.ResponseListMeta(
                    tracing_id = '0', 
                    count = 56, 
                    pagination = openapi_client.models.pagination.Pagination(
                        total_count = 56, 
                        self = openapi_client.models.filter_and_sort.FilterAndSort(
                            from = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            before = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            limit = 56, 
                            sort = 'date', 
                            offset = 56, 
                            cursor = '0', ), 
                        next = openapi_client.models.next.Next(
                            from = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            before = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            limit = 56, 
                            cursor = '0', ), ), ), 
                data = [
                    openapi_client.models.transaction.Transaction(
                        id = '0', 
                        date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        booking_date_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        value_date_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        status = 'BOOKED', 
                        amount = 1.337, 
                        currency = '0', 
                        transaction_amount = openapi_client.models.amount.Amount(
                            amount = 10, 
                            currency = 'GBP', ), 
                        gross_amount = openapi_client.models.amount.Amount(
                            amount = 10, 
                            currency = 'GBP', ), 
                        currency_exchange = openapi_client.models.currency_exchange.CurrencyExchange(
                            source_currency = '0', 
                            target_currency = '0', 
                            unit_currency = '0', 
                            exchange_rate = 1.337, ), 
                        charge_details = openapi_client.models.transaction_charge_details.TransactionChargeDetails(
                            charge_amount = openapi_client.models.amount.Amount(
                                amount = 10, 
                                currency = 'GBP', ), ), 
                        reference = '0', 
                        statement_references = [
                            openapi_client.models.statement_reference.StatementReference(
                                value = '0', )
                            ], 
                        description = '0', 
                        transaction_information = [
                            '0'
                            ], 
                        address_details = openapi_client.models.address_details.AddressDetails(
                            address_line = '0', ), 
                        iso_bank_transaction_code = openapi_client.models.iso_bank_transaction_code.IsoBankTransactionCode(
                            domain_code = openapi_client.models.iso_code_details.IsoCodeDetails(
                                code = 'UNKNOWN', 
                                name = 'UNKNOWN', ), 
                            family_code = openapi_client.models.iso_code_details.IsoCodeDetails(
                                code = 'UNKNOWN', 
                                name = 'UNKNOWN', ), 
                            sub_family_code = openapi_client.models.iso_code_details.IsoCodeDetails(
                                code = 'UNKNOWN', 
                                name = 'UNKNOWN', ), ), 
                        proprietary_bank_transaction_code = openapi_client.models.proprietary_bank_transaction_code.ProprietaryBankTransactionCode(
                            code = '0', 
                            issuer = '0', ), 
                        balance = openapi_client.models.transaction_balance.TransactionBalance(
                            type = 'CLOSING_AVAILABLE', 
                            balance_amount = openapi_client.models.amount.Amount(
                                amount = 10, 
                                currency = 'GBP', ), ), 
                        payee_details = openapi_client.models.payee.Payee(
                            name = 'Jane Doe', 
                            account_identifications = [{"identification":"401016","type":"SORT_CODE"},{"identification":"71518920","type":"ACCOUNT_NUMBER"}], 
                            address = {"country":"GB"}, 
                            merchant_id = '24589303', 
                            merchant_category_code = '5551', ), 
                        payer_details = openapi_client.models.payer.Payer(
                            name = 'John Doe', 
                            account_identifications = [
                                openapi_client.models.account_identification.AccountIdentification(
                                    type = 'SORT_CODE', 
                                    identification = '401016', )
                                ], ), 
                        merchant = openapi_client.models.merchant.Merchant(
                            merchant_name = '0', 
                            merchant_category_code = '0', ), 
                        enrichment = openapi_client.models.enrichment.Enrichment(
                            categorisation = openapi_client.models.categorisation.Categorisation(
                                categories = [
                                    '0'
                                    ], 
                                source = '0', ), 
                            transaction_hash = openapi_client.models.transaction_hash.TransactionHash(
                                hash = '0', ), 
                            cleansed_description = '0', 
                            location = '0', 
                            payment_processor = '0', 
                            corrected_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), ), 
                        supplementary_data = openapi_client.models.supplementary_data.supplementaryData(), )
                    ], 
                links = {
                    'key' : '0'
                    }, 
                forwarded_data = [
                    openapi_client.models.response_forwarded_data.ResponseForwardedData(
                        headers = {
                            'key' : '0'
                            }, 
                        url = '0', )
                    ], 
                raw = [
                    openapi_client.models.raw_response.RawResponse(
                        request = openapi_client.models.raw_request.RawRequest(
                            method = '0', 
                            url = '0', 
                            request_instant = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            headers = {
                                'key' : '0'
                                }, 
                            body = openapi_client.models.body.body(), 
                            body_parameters = {
                                'key' : '0'
                                }, 
                            start_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            started_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), ), 
                        duration = '0', 
                        headers = {
                            'key' : '0'
                            }, 
                        result_code = 56, 
                        result = openapi_client.models.result.result(), )
                    ], 
                paging = openapi_client.models.filtered_client_payload_list_transaction.FilteredClientPayloadListTransaction(
                    api_call = openapi_client.models.api_call.ApiCall(), 
                    data = [
                        openapi_client.models.transaction.Transaction(
                            id = '0', 
                            date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            booking_date_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            value_date_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            status = 'BOOKED', 
                            amount = 1.337, 
                            currency = '0', 
                            transaction_amount = openapi_client.models.amount.Amount(
                                amount = 10, 
                                currency = 'GBP', ), 
                            gross_amount = openapi_client.models.amount.Amount(
                                amount = 10, 
                                currency = 'GBP', ), 
                            currency_exchange = openapi_client.models.currency_exchange.CurrencyExchange(
                                source_currency = '0', 
                                target_currency = '0', 
                                unit_currency = '0', 
                                exchange_rate = 1.337, ), 
                            charge_details = openapi_client.models.transaction_charge_details.TransactionChargeDetails(
                                charge_amount = openapi_client.models.amount.Amount(
                                    amount = 10, 
                                    currency = 'GBP', ), ), 
                            reference = '0', 
                            statement_references = [
                                openapi_client.models.statement_reference.StatementReference(
                                    value = '0', )
                                ], 
                            description = '0', 
                            transaction_information = [
                                '0'
                                ], 
                            address_details = openapi_client.models.address_details.AddressDetails(
                                address_line = '0', ), 
                            iso_bank_transaction_code = openapi_client.models.iso_bank_transaction_code.IsoBankTransactionCode(
                                domain_code = openapi_client.models.iso_code_details.IsoCodeDetails(
                                    code = 'UNKNOWN', 
                                    name = 'UNKNOWN', ), 
                                family_code = openapi_client.models.iso_code_details.IsoCodeDetails(
                                    code = 'UNKNOWN', 
                                    name = 'UNKNOWN', ), 
                                sub_family_code = openapi_client.models.iso_code_details.IsoCodeDetails(
                                    code = 'UNKNOWN', 
                                    name = 'UNKNOWN', ), ), 
                            proprietary_bank_transaction_code = openapi_client.models.proprietary_bank_transaction_code.ProprietaryBankTransactionCode(
                                code = '0', 
                                issuer = '0', ), 
                            balance = openapi_client.models.transaction_balance.TransactionBalance(
                                type = 'CLOSING_AVAILABLE', 
                                balance_amount = openapi_client.models.amount.Amount(
                                    amount = 10, 
                                    currency = 'GBP', ), ), 
                            payee_details = openapi_client.models.payee.Payee(
                                name = 'Jane Doe', 
                                account_identifications = [{"identification":"401016","type":"SORT_CODE"},{"identification":"71518920","type":"ACCOUNT_NUMBER"}], 
                                address = {"country":"GB"}, 
                                merchant_id = '24589303', 
                                merchant_category_code = '5551', ), 
                            payer_details = openapi_client.models.payer.Payer(
                                name = 'John Doe', 
                                account_identifications = [
                                    openapi_client.models.account_identification.AccountIdentification(
                                        type = 'SORT_CODE', 
                                        identification = '401016', )
                                    ], ), 
                            merchant = openapi_client.models.merchant.Merchant(
                                merchant_name = '0', 
                                merchant_category_code = '0', ), 
                            enrichment = openapi_client.models.enrichment.Enrichment(
                                categorisation = openapi_client.models.categorisation.Categorisation(
                                    categories = [
                                        '0'
                                        ], 
                                    source = '0', ), 
                                transaction_hash = openapi_client.models.transaction_hash.TransactionHash(
                                    hash = '0', ), 
                                cleansed_description = '0', 
                                location = '0', 
                                payment_processor = '0', 
                                corrected_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), ), 
                            supplementary_data = openapi_client.models.supplementary_data.supplementaryData(), )
                        ], 
                    next_cursor_hash = '0', 
                    next_link = '0', 
                    paging_map = {
                        'key' : openapi_client.models.filter_and_sort.FilterAndSort(
                            from = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            before = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            limit = 56, 
                            sort = 'date', 
                            offset = 56, 
                            cursor = '0', )
                        }, 
                    total_count = 56, ), 
                tracing_id = '0'
            )
        else :
            return ApiListResponseOfTransaction(
        )

    def testApiListResponseOfTransaction(self):
        """Test ApiListResponseOfTransaction"""
        inst_req_only = self.make_instance(include_optional=False)
        inst_req_and_optional = self.make_instance(include_optional=True)


if __name__ == '__main__':
    unittest.main()
