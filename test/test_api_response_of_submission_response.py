# coding: utf-8

"""
    Yapily API

    The Yapily API enables connections between your application and users' banks. For more information check out our [documentation](https://docs.yapily.com/).<br><br>In particular, make sure to view our [Getting Started](https://docs.yapily.com/pages/home/getting-started/) steps if this is your first time here.<br><br>While testing the API, our list of [sandbox credentials](https://docs.yapily.com/pages/key-concepts/sandbox-credentials/) maybe useful.

    The version of the OpenAPI document: 2.13.1
    Contact: support@yapily.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest
import datetime

from yapily.models.api_response_of_submission_response import ApiResponseOfSubmissionResponse

class TestApiResponseOfSubmissionResponse(unittest.TestCase):
    """ApiResponseOfSubmissionResponse unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> ApiResponseOfSubmissionResponse:
        """Test ApiResponseOfSubmissionResponse
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `ApiResponseOfSubmissionResponse`
        """
        model = ApiResponseOfSubmissionResponse()
        if include_optional:
            return ApiResponseOfSubmissionResponse(
                meta = yapily.models.response_meta.ResponseMeta(
                    tracing_id = '', ),
                data = yapily.models.submission_response.SubmissionResponse(
                    id = '', 
                    payment_idempotency_id = '', 
                    institution_consent_id = '', 
                    status = 'PENDING', 
                    status_details = yapily.models.payment_status_details.PaymentStatusDetails(
                        status_reason = '', 
                        status_reason_description = '', 
                        status_update_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        multi_authorisation_status = yapily.models.multi_authorisation.MultiAuthorisation(
                            number_of_authorisation_required = 56, 
                            number_of_authorisation_received = 56, 
                            last_updated_date_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            expiration_date_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), ), 
                        iso_status = yapily.models.payment_iso_status.PaymentIsoStatus(
                            code = 'ACCC', 
                            name = 'AcceptedCreditSettlementCompleted', ), ), 
                    initiation_details = yapily.models.initiation_details.InitiationDetails(
                        reference = 'Own Account Sweeping', 
                        payer = yapily.models.payer.Payer(
                            name = 'John Doe', 
                            account_identifications = [
                                yapily.models.account_identification.AccountIdentification(
                                    type = 'SORT_CODE', 
                                    identification = '401016', )
                                ], 
                            address = {"country":"GB"}, ), 
                        payee = yapily.models.payee.Payee(
                            name = 'Jane Doe', 
                            account_identifications = [{"identification":"401016","type":"SORT_CODE"},{"identification":"71518920","type":"ACCOUNT_NUMBER"}], 
                            merchant_id = '24589303', 
                            merchant_category_code = '5551', ), ), 
                    submission_details = yapily.models.submission_details.SubmissionDetails(
                        reference = 'Own Account Sweeping', 
                        payee = yapily.models.payee.Payee(
                            name = 'Jane Doe', 
                            account_identifications = [{"identification":"401016","type":"SORT_CODE"},{"identification":"71518920","type":"ACCOUNT_NUMBER"}], 
                            merchant_id = '24589303', 
                            merchant_category_code = '5551', ), 
                        payment_amount = yapily.models.amount.Amount(
                            amount = 10, 
                            currency = 'GBP', ), ), 
                    payer = yapily.models.payer.Payer(
                        name = 'John Doe', 
                        account_identifications = [
                            yapily.models.account_identification.AccountIdentification(
                                type = 'SORT_CODE', 
                                identification = '401016', )
                            ], ), 
                    refund_account = yapily.models.refund_account.RefundAccount(
                        name = '', ), 
                    expected_execution_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    expected_settlement_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), ),
                links = {
                    'key' : ''
                    },
                forwarded_data = [
                    yapily.models.response_forwarded_data.ResponseForwardedData(
                        headers = {
                            'key' : ''
                            }, 
                        url = '', )
                    ],
                tracing_id = ''
            )
        else:
            return ApiResponseOfSubmissionResponse(
        )
        """

    def testApiResponseOfSubmissionResponse(self):
        """Test ApiResponseOfSubmissionResponse"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
