# coding: utf-8

"""
    Yapily API

    The Yapily API enables connections between your application and users' banks. For more information check out our [documentation](https://docs.yapily.com/).<br><br>In particular, make sure to view our [Getting Started](https://docs.yapily.com/#getting-started) steps if this is your first time here.<br><br>While testing the API, our list of [sandbox credentials](https://docs.yapily.com/guides/applications/institutions/sandbox/) maybe useful.  # noqa: E501

    The version of the OpenAPI document: 2.1.0
    Contact: support@yapily.com
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import unittest
import datetime

import yapily
from yapily.models.enrichment import Enrichment  # noqa: E501
from yapily.rest import ApiException

class TestEnrichment(unittest.TestCase):
    """Enrichment unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional):
        """Test Enrichment
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # model = yapily.models.enrichment.Enrichment()  # noqa: E501
        if include_optional :
            return Enrichment(
                categorisation = yapily.models.categorisation.Categorisation(
                    categories = [
                        '0'
                        ], 
                    source = '0', ), 
                transaction_hash = yapily.models.transaction_hash.TransactionHash(
                    hash = '0', ), 
                cleansed_description = '0', 
                merchant = yapily.models.enrichment_merchant.EnrichmentMerchant(
                    merchant_name = '0', 
                    parent_group = '0', ), 
                location = '0', 
                payment_processor = '0', 
                corrected_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f')
            )
        else :
            return Enrichment(
        )

    def testEnrichment(self):
        """Test Enrichment"""
        inst_req_only = self.make_instance(include_optional=False)
        inst_req_and_optional = self.make_instance(include_optional=True)


if __name__ == '__main__':
    unittest.main()
