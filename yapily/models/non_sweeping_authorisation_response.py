# coding: utf-8

"""
Yapily API

The Yapily API enables connections between your application and users' banks. For more information check out our [documentation](https://docs.yapily.com/).<br><br>In particular, make sure to view our [Getting Started](https://docs.yapily.com/pages/home/getting-started/) steps if this is your first time here.<br><br>While testing the API, our list of [sandbox credentials](https://docs.yapily.com/pages/key-concepts/sandbox-credentials/) maybe useful.

The version of the OpenAPI document: 7.2.0
Contact: support@yapily.com
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Optional
from pydantic import BaseModel, Field, StrictStr, conlist
from yapily.models.authorisation_status import AuthorisationStatus
from yapily.models.feature_enum import FeatureEnum
from yapily.models.initiation_details import InitiationDetails
from yapily.models.non_sweeping_control_parameters import NonSweepingControlParameters
from yapily.models.payer import Payer


class NonSweepingAuthorisationResponse(BaseModel):
    """
    NonSweepingAuthorisationResponse
    """

    id: Optional[StrictStr] = None
    user_id: Optional[StrictStr] = Field(
        default=None,
        alias="userId",
        description="This is the Yapily user identifier for the user returned by the create user step POST ../users",
    )
    application_user_id: Optional[StrictStr] = Field(
        default=None,
        alias="applicationUserId",
        description="A client's own user reference. If the client wants to work with their own unique references for individual PSUs then they can use the applicationUserId property to provide that value. Where Yapily does not already have a Yapily userId that matches the supplied applicationUserId, then a new Yapily userId is created automatically and linked to the applicationUserId value.  Clients can then use either their own applicationUserId or the Yapily userId to reference the same user in future calls.",
    )
    institution_id: Optional[StrictStr] = Field(
        default=None,
        alias="institutionId",
        description="The reference to the Institution which identifies which institution the authorisation request is sent to.",
    )
    status: Optional[AuthorisationStatus] = None
    created_at: Optional[datetime] = Field(default=None, alias="createdAt")
    feature_scope: Optional[conlist(FeatureEnum, unique_items=True)] = Field(
        default=None,
        alias="featureScope",
        description="__Optional__. Used to granularly specify the set of features that the user will give their consent for when requesting access to their account information. Depending on the `Institution`, this may also populate a consent screen which list these scopes before the user authorises.<br><br>This endpoint accepts allow all [Financial Data Features](/guides/financial-data/features/#feature-list) that the `Institution` supports.To find out which scopes an `Institution` supports, check [GET Institution](./#get-institution).",
    )
    consent_token: Optional[StrictStr] = Field(
        default=None,
        alias="consentToken",
        description="The `consent-token` containing the user's authorisation to make the payment request.",
    )
    state: Optional[StrictStr] = None
    authorized_at: Optional[datetime] = Field(default=None, alias="authorizedAt")
    institution_consent_id: Optional[StrictStr] = Field(
        default=None, alias="institutionConsentId"
    )
    authorisation_url: Optional[StrictStr] = Field(
        default=None, alias="authorisationUrl"
    )
    qr_code_url: Optional[StrictStr] = Field(default=None, alias="qrCodeUrl")
    control_parameters: Optional[NonSweepingControlParameters] = Field(
        default=None, alias="controlParameters"
    )
    payer: Optional[Payer] = None
    initiation_details: Optional[InitiationDetails] = Field(
        default=None, alias="initiationDetails"
    )
    __properties = [
        "id",
        "userId",
        "applicationUserId",
        "institutionId",
        "status",
        "createdAt",
        "featureScope",
        "consentToken",
        "state",
        "authorizedAt",
        "institutionConsentId",
        "authorisationUrl",
        "qrCodeUrl",
        "controlParameters",
        "payer",
        "initiationDetails",
    ]

    class Config:
        """Pydantic configuration"""

        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> NonSweepingAuthorisationResponse:
        """Create an instance of NonSweepingAuthorisationResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of control_parameters
        if self.control_parameters:
            _dict["controlParameters"] = self.control_parameters.to_dict()
        # override the default output from pydantic by calling `to_dict()` of payer
        if self.payer:
            _dict["payer"] = self.payer.to_dict()
        # override the default output from pydantic by calling `to_dict()` of initiation_details
        if self.initiation_details:
            _dict["initiationDetails"] = self.initiation_details.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> NonSweepingAuthorisationResponse:
        """Create an instance of NonSweepingAuthorisationResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return NonSweepingAuthorisationResponse.parse_obj(obj)

        _obj = NonSweepingAuthorisationResponse.parse_obj(
            {
                "id": obj.get("id"),
                "user_id": obj.get("userId"),
                "application_user_id": obj.get("applicationUserId"),
                "institution_id": obj.get("institutionId"),
                "status": obj.get("status"),
                "created_at": obj.get("createdAt"),
                "feature_scope": obj.get("featureScope"),
                "consent_token": obj.get("consentToken"),
                "state": obj.get("state"),
                "authorized_at": obj.get("authorizedAt"),
                "institution_consent_id": obj.get("institutionConsentId"),
                "authorisation_url": obj.get("authorisationUrl"),
                "qr_code_url": obj.get("qrCodeUrl"),
                "control_parameters": NonSweepingControlParameters.from_dict(
                    obj.get("controlParameters")
                )
                if obj.get("controlParameters") is not None
                else None,
                "payer": Payer.from_dict(obj.get("payer"))
                if obj.get("payer") is not None
                else None,
                "initiation_details": InitiationDetails.from_dict(
                    obj.get("initiationDetails")
                )
                if obj.get("initiationDetails") is not None
                else None,
            }
        )
        return _obj
