# coding: utf-8

"""
    Yapily API

    The Yapily API enables connections between your application and users' banks. For more information check out our [documentation](https://docs.yapily.com/).<br><br>In particular, make sure to view our [Getting Started](https://docs.yapily.com/pages/home/getting-started/) steps if this is your first time here.<br><br>While testing the API, our list of [sandbox credentials](https://docs.yapily.com/pages/key-concepts/sandbox-credentials/) maybe useful.  # noqa: E501

    The version of the OpenAPI document: 2.13.1
    Contact: support@yapily.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from yapily.configuration import Configuration


class SweepingControlParameters(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'psu_authentication_methods': 'list[str]',
        'periodic_limits': 'list[SweepingPeriodicLimits]',
        'max_amount_per_payment': 'Amount',
        'valid_from': 'datetime',
        'valid_to': 'datetime'
    }

    attribute_map = {
        'psu_authentication_methods': 'psuAuthenticationMethods',
        'periodic_limits': 'periodicLimits',
        'max_amount_per_payment': 'maxAmountPerPayment',
        'valid_from': 'validFrom',
        'valid_to': 'validTo'
    }

    def __init__(self, psu_authentication_methods=None, periodic_limits=None, max_amount_per_payment=None, valid_from=None, valid_to=None, local_vars_configuration=None):  # noqa: E501
        """SweepingControlParameters - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._psu_authentication_methods = None
        self._periodic_limits = None
        self._max_amount_per_payment = None
        self._valid_from = None
        self._valid_to = None
        self.discriminator = None

        self.psu_authentication_methods = psu_authentication_methods
        self.periodic_limits = periodic_limits
        self.max_amount_per_payment = max_amount_per_payment
        if valid_from is not None:
            self.valid_from = valid_from
        if valid_to is not None:
            self.valid_to = valid_to

    @property
    def psu_authentication_methods(self):
        """Gets the psu_authentication_methods of this SweepingControlParameters.  # noqa: E501

        __Mandatory__. Defines the authentication method(s) allowed in payment submission step. Allowed values are [SCA_REQUIRED, SCA_NOT_REQUIRED].  # noqa: E501

        :return: The psu_authentication_methods of this SweepingControlParameters.  # noqa: E501
        :rtype: list[str]
        """
        return self._psu_authentication_methods

    @psu_authentication_methods.setter
    def psu_authentication_methods(self, psu_authentication_methods):
        """Sets the psu_authentication_methods of this SweepingControlParameters.

        __Mandatory__. Defines the authentication method(s) allowed in payment submission step. Allowed values are [SCA_REQUIRED, SCA_NOT_REQUIRED].  # noqa: E501

        :param psu_authentication_methods: The psu_authentication_methods of this SweepingControlParameters.  # noqa: E501
        :type: list[str]
        """
        if self.local_vars_configuration.client_side_validation and psu_authentication_methods is None:  # noqa: E501
            raise ValueError("Invalid value for `psu_authentication_methods`, must not be `None`")  # noqa: E501

        self._psu_authentication_methods = psu_authentication_methods

    @property
    def periodic_limits(self):
        """Gets the periodic_limits of this SweepingControlParameters.  # noqa: E501


        :return: The periodic_limits of this SweepingControlParameters.  # noqa: E501
        :rtype: list[SweepingPeriodicLimits]
        """
        return self._periodic_limits

    @periodic_limits.setter
    def periodic_limits(self, periodic_limits):
        """Sets the periodic_limits of this SweepingControlParameters.


        :param periodic_limits: The periodic_limits of this SweepingControlParameters.  # noqa: E501
        :type: list[SweepingPeriodicLimits]
        """
        if self.local_vars_configuration.client_side_validation and periodic_limits is None:  # noqa: E501
            raise ValueError("Invalid value for `periodic_limits`, must not be `None`")  # noqa: E501

        self._periodic_limits = periodic_limits

    @property
    def max_amount_per_payment(self):
        """Gets the max_amount_per_payment of this SweepingControlParameters.  # noqa: E501

        __Mandatory__. Max amount that can be submitted per payment.  # noqa: E501

        :return: The max_amount_per_payment of this SweepingControlParameters.  # noqa: E501
        :rtype: Amount
        """
        return self._max_amount_per_payment

    @max_amount_per_payment.setter
    def max_amount_per_payment(self, max_amount_per_payment):
        """Sets the max_amount_per_payment of this SweepingControlParameters.

        __Mandatory__. Max amount that can be submitted per payment.  # noqa: E501

        :param max_amount_per_payment: The max_amount_per_payment of this SweepingControlParameters.  # noqa: E501
        :type: Amount
        """
        if self.local_vars_configuration.client_side_validation and max_amount_per_payment is None:  # noqa: E501
            raise ValueError("Invalid value for `max_amount_per_payment`, must not be `None`")  # noqa: E501

        self._max_amount_per_payment = max_amount_per_payment

    @property
    def valid_from(self):
        """Gets the valid_from of this SweepingControlParameters.  # noqa: E501

        __Optional__. Start date when the consent becomes valid.  # noqa: E501

        :return: The valid_from of this SweepingControlParameters.  # noqa: E501
        :rtype: datetime
        """
        return self._valid_from

    @valid_from.setter
    def valid_from(self, valid_from):
        """Sets the valid_from of this SweepingControlParameters.

        __Optional__. Start date when the consent becomes valid.  # noqa: E501

        :param valid_from: The valid_from of this SweepingControlParameters.  # noqa: E501
        :type: datetime
        """

        self._valid_from = valid_from

    @property
    def valid_to(self):
        """Gets the valid_to of this SweepingControlParameters.  # noqa: E501

        __Optional__. End date when the consent expires and becomes invalid.  # noqa: E501

        :return: The valid_to of this SweepingControlParameters.  # noqa: E501
        :rtype: datetime
        """
        return self._valid_to

    @valid_to.setter
    def valid_to(self, valid_to):
        """Sets the valid_to of this SweepingControlParameters.

        __Optional__. End date when the consent expires and becomes invalid.  # noqa: E501

        :param valid_to: The valid_to of this SweepingControlParameters.  # noqa: E501
        :type: datetime
        """

        self._valid_to = valid_to

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SweepingControlParameters):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, SweepingControlParameters):
            return True

        return self.to_dict() != other.to_dict()
