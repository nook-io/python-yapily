# coding: utf-8

"""
    Yapily API

    The Yapily API enables connections between your application and users' banks. For more information check out our [documentation](https://docs.yapily.com/).<br><br>In particular, make sure to view our [Getting Started](https://docs.yapily.com/pages/home/getting-started/) steps if this is your first time here.<br><br>While testing the API, our list of [sandbox credentials](https://docs.yapily.com/pages/key-concepts/sandbox-credentials/) maybe useful.

    The version of the OpenAPI document: 2.13.1
    Contact: support@yapily.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, StrictBool, StrictStr
from pydantic import Field
from yapily.models.institution import Institution
from yapily.models.media import Media
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class Application(BaseModel):
    """
    Information about the application.
    """ # noqa: E501
    uuid: Optional[StrictStr] = Field(default=None, description="Unique identification for the `Application` as assigned by Yapily.")
    name: Optional[StrictStr] = Field(default=None, description="The individual name of the `Application`.")
    active: Optional[StrictBool] = Field(default=None, description="States whether an `Application` is active.")
    auth_callbacks: Optional[List[StrictStr]] = Field(default=None, alias="authCallbacks")
    institutions: Optional[List[Institution]] = None
    media: Optional[List[Media]] = None
    created: Optional[datetime] = Field(default=None, description="Date and time of when the application was created.")
    updated: Optional[datetime] = Field(default=None, description="Date and time of when the application was last updated.")
    __properties: ClassVar[List[str]] = ["uuid", "name", "active", "authCallbacks", "institutions", "media", "created", "updated"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of Application from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in institutions (list)
        _items = []
        if self.institutions:
            for _item in self.institutions:
                if _item:
                    _items.append(_item.to_dict())
            _dict['institutions'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in media (list)
        _items = []
        if self.media:
            for _item in self.media:
                if _item:
                    _items.append(_item.to_dict())
            _dict['media'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of Application from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "uuid": obj.get("uuid"),
            "name": obj.get("name"),
            "active": obj.get("active"),
            "authCallbacks": obj.get("authCallbacks"),
            "institutions": [Institution.from_dict(_item) for _item in obj.get("institutions")] if obj.get("institutions") is not None else None,
            "media": [Media.from_dict(_item) for _item in obj.get("media")] if obj.get("media") is not None else None,
            "created": obj.get("created"),
            "updated": obj.get("updated")
        })
        return _obj


