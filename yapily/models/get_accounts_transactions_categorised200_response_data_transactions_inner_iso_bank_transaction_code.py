# coding: utf-8

"""
    Yapily API

    The Yapily API enables connections between your application and users' banks. For more information check out our [documentation](https://docs.yapily.com/).<br><br>In particular, make sure to view our [Getting Started](https://docs.yapily.com/pages/home/getting-started/) steps if this is your first time here.<br><br>While testing the API, our list of [sandbox credentials](https://docs.yapily.com/pages/key-concepts/sandbox-credentials/) maybe useful.

    The version of the OpenAPI document: 4.2.0
    Contact: support@yapily.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field
from yapily.models.get_accounts_transactions_categorised200_response_data_transactions_inner_iso_bank_transaction_code_domain_code import GetAccountsTransactionsCategorised200ResponseDataTransactionsInnerIsoBankTransactionCodeDomainCode

class GetAccountsTransactionsCategorised200ResponseDataTransactionsInnerIsoBankTransactionCode(BaseModel):
    """
    GetAccountsTransactionsCategorised200ResponseDataTransactionsInnerIsoBankTransactionCode
    """
    domain_code: Optional[GetAccountsTransactionsCategorised200ResponseDataTransactionsInnerIsoBankTransactionCodeDomainCode] = Field(None, alias="domainCode")
    family_code: Optional[GetAccountsTransactionsCategorised200ResponseDataTransactionsInnerIsoBankTransactionCodeDomainCode] = Field(None, alias="familyCode")
    sub_family_code: Optional[GetAccountsTransactionsCategorised200ResponseDataTransactionsInnerIsoBankTransactionCodeDomainCode] = Field(None, alias="subFamilyCode")
    __properties = ["domainCode", "familyCode", "subFamilyCode"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> GetAccountsTransactionsCategorised200ResponseDataTransactionsInnerIsoBankTransactionCode:
        """Create an instance of GetAccountsTransactionsCategorised200ResponseDataTransactionsInnerIsoBankTransactionCode from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of domain_code
        if self.domain_code:
            _dict['domainCode'] = self.domain_code.to_dict()
        # override the default output from pydantic by calling `to_dict()` of family_code
        if self.family_code:
            _dict['familyCode'] = self.family_code.to_dict()
        # override the default output from pydantic by calling `to_dict()` of sub_family_code
        if self.sub_family_code:
            _dict['subFamilyCode'] = self.sub_family_code.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> GetAccountsTransactionsCategorised200ResponseDataTransactionsInnerIsoBankTransactionCode:
        """Create an instance of GetAccountsTransactionsCategorised200ResponseDataTransactionsInnerIsoBankTransactionCode from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return GetAccountsTransactionsCategorised200ResponseDataTransactionsInnerIsoBankTransactionCode.parse_obj(obj)

        _obj = GetAccountsTransactionsCategorised200ResponseDataTransactionsInnerIsoBankTransactionCode.parse_obj({
            "domain_code": GetAccountsTransactionsCategorised200ResponseDataTransactionsInnerIsoBankTransactionCodeDomainCode.from_dict(obj.get("domainCode")) if obj.get("domainCode") is not None else None,
            "family_code": GetAccountsTransactionsCategorised200ResponseDataTransactionsInnerIsoBankTransactionCodeDomainCode.from_dict(obj.get("familyCode")) if obj.get("familyCode") is not None else None,
            "sub_family_code": GetAccountsTransactionsCategorised200ResponseDataTransactionsInnerIsoBankTransactionCodeDomainCode.from_dict(obj.get("subFamilyCode")) if obj.get("subFamilyCode") is not None else None
        })
        return _obj


