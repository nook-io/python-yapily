# coding: utf-8

"""
    Yapily API

    The Yapily API enables connections between your application and users' banks. For more information check out our [documentation](https://docs.yapily.com/).<br><br>In particular, make sure to view our [Getting Started](https://docs.yapily.com/pages/home/getting-started/) steps if this is your first time here.<br><br>While testing the API, our list of [sandbox credentials](https://docs.yapily.com/pages/key-concepts/sandbox-credentials/) maybe useful.  # noqa: E501

    The version of the OpenAPI document: 2.13.1
    Contact: support@yapily.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from yapily.configuration import Configuration


class SweepingPeriodicLimits(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'total_max_amount': 'Amount',
        'frequency': 'str',
        'alignment': 'str'
    }

    attribute_map = {
        'total_max_amount': 'totalMaxAmount',
        'frequency': 'frequency',
        'alignment': 'alignment'
    }

    def __init__(self, total_max_amount=None, frequency=None, alignment=None, local_vars_configuration=None):  # noqa: E501
        """SweepingPeriodicLimits - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._total_max_amount = None
        self._frequency = None
        self._alignment = None
        self.discriminator = None

        self.total_max_amount = total_max_amount
        self.frequency = frequency
        self.alignment = alignment

    @property
    def total_max_amount(self):
        """Gets the total_max_amount of this SweepingPeriodicLimits.  # noqa: E501

        __Mandatory__. Maximum amount that can be specified in all payment instructions in a given period under this VRP consent. If the Alignment is Calendar, the limit is pro-rated in the first period to the remaining number of days.  # noqa: E501

        :return: The total_max_amount of this SweepingPeriodicLimits.  # noqa: E501
        :rtype: Amount
        """
        return self._total_max_amount

    @total_max_amount.setter
    def total_max_amount(self, total_max_amount):
        """Sets the total_max_amount of this SweepingPeriodicLimits.

        __Mandatory__. Maximum amount that can be specified in all payment instructions in a given period under this VRP consent. If the Alignment is Calendar, the limit is pro-rated in the first period to the remaining number of days.  # noqa: E501

        :param total_max_amount: The total_max_amount of this SweepingPeriodicLimits.  # noqa: E501
        :type: Amount
        """
        if self.local_vars_configuration.client_side_validation and total_max_amount is None:  # noqa: E501
            raise ValueError("Invalid value for `total_max_amount`, must not be `None`")  # noqa: E501

        self._total_max_amount = total_max_amount

    @property
    def frequency(self):
        """Gets the frequency of this SweepingPeriodicLimits.  # noqa: E501

        __Mandatory__. Frequency for which the payment limits are enforced. Allowed values are [DAILY, WEEKLY, FORTNIGHTLY, MONTHLY, YEARLY].  # noqa: E501

        :return: The frequency of this SweepingPeriodicLimits.  # noqa: E501
        :rtype: str
        """
        return self._frequency

    @frequency.setter
    def frequency(self, frequency):
        """Sets the frequency of this SweepingPeriodicLimits.

        __Mandatory__. Frequency for which the payment limits are enforced. Allowed values are [DAILY, WEEKLY, FORTNIGHTLY, MONTHLY, YEARLY].  # noqa: E501

        :param frequency: The frequency of this SweepingPeriodicLimits.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and frequency is None:  # noqa: E501
            raise ValueError("Invalid value for `frequency`, must not be `None`")  # noqa: E501

        self._frequency = frequency

    @property
    def alignment(self):
        """Gets the alignment of this SweepingPeriodicLimits.  # noqa: E501

        __Mandatory__. Period alignment for which the payment limits are enforced. Allowed values are [CONSENT, CALENDAR]. If CONSENT, then period starts on consent creation date. If CALENDAR, then period lines up with the frequency e.g. WEEKLY period will begin at start of the week in question.  # noqa: E501

        :return: The alignment of this SweepingPeriodicLimits.  # noqa: E501
        :rtype: str
        """
        return self._alignment

    @alignment.setter
    def alignment(self, alignment):
        """Sets the alignment of this SweepingPeriodicLimits.

        __Mandatory__. Period alignment for which the payment limits are enforced. Allowed values are [CONSENT, CALENDAR]. If CONSENT, then period starts on consent creation date. If CALENDAR, then period lines up with the frequency e.g. WEEKLY period will begin at start of the week in question.  # noqa: E501

        :param alignment: The alignment of this SweepingPeriodicLimits.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and alignment is None:  # noqa: E501
            raise ValueError("Invalid value for `alignment`, must not be `None`")  # noqa: E501

        self._alignment = alignment

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SweepingPeriodicLimits):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, SweepingPeriodicLimits):
            return True

        return self.to_dict() != other.to_dict()
