# coding: utf-8

"""
Yapily API

The Yapily API enables connections between your application and users' banks. For more information check out our [documentation](https://docs.yapily.com/).<br><br>In particular, make sure to view our [Getting Started](https://docs.yapily.com/pages/home/getting-started/) steps if this is your first time here.<br><br>While testing the API, our list of [sandbox credentials](https://docs.yapily.com/pages/key-concepts/sandbox-credentials/) maybe useful.

The version of the OpenAPI document: 7.2.0
Contact: support@yapily.com
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictInt, StrictStr, conlist
from yapily.models.api_error_response_v2_error_issues_inner import (
    ApiErrorResponseV2ErrorIssuesInner,
)


class ApiErrorResponseV2Error(BaseModel):
    """
    ApiErrorResponseV2Error
    """

    tracing_id: StrictStr = Field(
        default=...,
        alias="tracingId",
        description="Unique identifier of the request, used by Yapily for support purposes",
    )
    code: StrictInt = Field(
        default=..., description="Numeric HTTP status code associated with the error"
    )
    status: StrictStr = Field(
        default=..., description="Textual description of the HTTP status"
    )
    support_url: Optional[StrictStr] = Field(
        default=None,
        alias="supportUrl",
        description="Link to where further information regarding the error can be found",
    )
    source: Optional[StrictStr] = Field(
        default=None,
        description="Source of the error. This may be YAPILY, the INSTITUTION, or the USER",
    )
    issues: conlist(ApiErrorResponseV2ErrorIssuesInner) = Field(
        default=..., description="List of issues relating to the error"
    )
    __properties = ["tracingId", "code", "status", "supportUrl", "source", "issues"]

    class Config:
        """Pydantic configuration"""

        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ApiErrorResponseV2Error:
        """Create an instance of ApiErrorResponseV2Error from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in issues (list)
        _items = []
        if self.issues:
            for _item in self.issues:
                if _item:
                    _items.append(_item.to_dict())
            _dict["issues"] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ApiErrorResponseV2Error:
        """Create an instance of ApiErrorResponseV2Error from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ApiErrorResponseV2Error.parse_obj(obj)

        _obj = ApiErrorResponseV2Error.parse_obj(
            {
                "tracing_id": obj.get("tracingId"),
                "code": obj.get("code"),
                "status": obj.get("status"),
                "support_url": obj.get("supportUrl"),
                "source": obj.get("source"),
                "issues": [
                    ApiErrorResponseV2ErrorIssuesInner.from_dict(_item)
                    for _item in obj.get("issues")
                ]
                if obj.get("issues") is not None
                else None,
            }
        )
        return _obj
