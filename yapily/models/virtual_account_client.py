# coding: utf-8

"""
    Yapily API

    The Yapily API enables connections between your application and users' banks. For more information check out our [documentation](https://docs.yapily.com/).<br><br>In particular, make sure to view our [Getting Started](https://docs.yapily.com/pages/home/getting-started/) steps if this is your first time here.<br><br>While testing the API, our list of [sandbox credentials](https://docs.yapily.com/pages/key-concepts/sandbox-credentials/) maybe useful.

    The version of the OpenAPI document: 2.13.1
    Contact: support@yapily.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, StrictStr
from pydantic import Field
from yapily.models.virtual_account_business_client import VirtualAccountBusinessClient
from yapily.models.virtual_account_client_status import VirtualAccountClientStatus
from yapily.models.virtual_account_client_type import VirtualAccountClientType
from yapily.models.virtual_account_individual_client import VirtualAccountIndividualClient
from yapily.models.virtual_account_kyc_status import VirtualAccountKycStatus
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class VirtualAccountClient(BaseModel):
    """
    VirtualAccountClient
    """ # noqa: E501
    id: Optional[StrictStr] = Field(default=None, description="The id generated in the on-boarding process, it will be used as client-id for virtual accounts request")
    type: Optional[VirtualAccountClientType] = None
    kyc_status: Optional[VirtualAccountKycStatus] = Field(default=None, alias="kycStatus")
    status: Optional[VirtualAccountClientStatus] = None
    created_date_time: Optional[datetime] = Field(default=None, alias="createdDateTime")
    individual: Optional[VirtualAccountIndividualClient] = None
    business: Optional[VirtualAccountBusinessClient] = None
    __properties: ClassVar[List[str]] = ["id", "type", "kycStatus", "status", "createdDateTime", "individual", "business"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of VirtualAccountClient from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of individual
        if self.individual:
            _dict['individual'] = self.individual.to_dict()
        # override the default output from pydantic by calling `to_dict()` of business
        if self.business:
            _dict['business'] = self.business.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of VirtualAccountClient from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "type": obj.get("type"),
            "kycStatus": obj.get("kycStatus"),
            "status": obj.get("status"),
            "createdDateTime": obj.get("createdDateTime"),
            "individual": VirtualAccountIndividualClient.from_dict(obj.get("individual")) if obj.get("individual") is not None else None,
            "business": VirtualAccountBusinessClient.from_dict(obj.get("business")) if obj.get("business") is not None else None
        })
        return _obj


