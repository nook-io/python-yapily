# coding: utf-8

"""
Yapily API

The Yapily API enables connections between your application and users' banks. For more information check out our [documentation](https://docs.yapily.com/).<br><br>In particular, make sure to view our [Getting Started](https://docs.yapily.com/pages/home/getting-started/) steps if this is your first time here.<br><br>While testing the API, our list of [sandbox credentials](https://docs.yapily.com/pages/key-concepts/sandbox-credentials/) maybe useful.

The version of the OpenAPI document: 7.2.0
Contact: support@yapily.com
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Set
from typing_extensions import Self


class RawRequest(BaseModel):
    """
    RawRequest
    """  # noqa: E501

    method: Optional[StrictStr] = None
    url: Optional[StrictStr] = None
    request_instant: Optional[datetime] = Field(default=None, alias="requestInstant")
    headers: Optional[Dict[str, StrictStr]] = None
    body: Optional[Dict[str, Any]] = None
    body_parameters: Optional[Dict[str, StrictStr]] = Field(
        default=None, alias="bodyParameters"
    )
    start_time: Optional[datetime] = Field(default=None, alias="startTime")
    started_at: Optional[datetime] = Field(default=None, alias="startedAt")
    __properties: ClassVar[List[str]] = [
        "method",
        "url",
        "requestInstant",
        "headers",
        "body",
        "bodyParameters",
        "startTime",
        "startedAt",
    ]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of RawRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of RawRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "method": obj.get("method"),
                "url": obj.get("url"),
                "requestInstant": obj.get("requestInstant"),
                "headers": obj.get("headers"),
                "body": obj.get("body"),
                "bodyParameters": obj.get("bodyParameters"),
                "startTime": obj.get("startTime"),
                "startedAt": obj.get("startedAt"),
            }
        )
        return _obj
