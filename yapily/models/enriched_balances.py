# coding: utf-8

"""
    Yapily API

    The Yapily API enables connections between your application and users' banks. For more information check out our [documentation](https://docs.yapily.com/).<br><br>In particular, make sure to view our [Getting Started](https://docs.yapily.com/pages/home/getting-started/) steps if this is your first time here.<br><br>While testing the API, our list of [sandbox credentials](https://docs.yapily.com/pages/key-concepts/sandbox-credentials/) maybe useful.  # noqa: E501

    The version of the OpenAPI document: 2.13.1
    Contact: support@yapily.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from yapily.configuration import Configuration


class EnrichedBalances(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'account_ids': 'list[str]',
        'institutions': 'list[str]',
        'historic': 'list[EnrichedHistoricBalance]',
        'predicted': 'list[EnrichedPredictedBalance]'
    }

    attribute_map = {
        'account_ids': 'accountIds',
        'institutions': 'institutions',
        'historic': 'historic',
        'predicted': 'predicted'
    }

    def __init__(self, account_ids=None, institutions=None, historic=None, predicted=None, local_vars_configuration=None):  # noqa: E501
        """EnrichedBalances - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._account_ids = None
        self._institutions = None
        self._historic = None
        self._predicted = None
        self.discriminator = None

        if account_ids is not None:
            self.account_ids = account_ids
        if institutions is not None:
            self.institutions = institutions
        if historic is not None:
            self.historic = historic
        if predicted is not None:
            self.predicted = predicted

    @property
    def account_ids(self):
        """Gets the account_ids of this EnrichedBalances.  # noqa: E501

        A list of Account Ids used to generate Balance Prediction Profile.  # noqa: E501

        :return: The account_ids of this EnrichedBalances.  # noqa: E501
        :rtype: list[str]
        """
        return self._account_ids

    @account_ids.setter
    def account_ids(self, account_ids):
        """Sets the account_ids of this EnrichedBalances.

        A list of Account Ids used to generate Balance Prediction Profile.  # noqa: E501

        :param account_ids: The account_ids of this EnrichedBalances.  # noqa: E501
        :type: list[str]
        """

        self._account_ids = account_ids

    @property
    def institutions(self):
        """Gets the institutions of this EnrichedBalances.  # noqa: E501

        A list of Institution Ids associated with the accounts used to generate Balance Prediction Profile.  # noqa: E501

        :return: The institutions of this EnrichedBalances.  # noqa: E501
        :rtype: list[str]
        """
        return self._institutions

    @institutions.setter
    def institutions(self, institutions):
        """Sets the institutions of this EnrichedBalances.

        A list of Institution Ids associated with the accounts used to generate Balance Prediction Profile.  # noqa: E501

        :param institutions: The institutions of this EnrichedBalances.  # noqa: E501
        :type: list[str]
        """

        self._institutions = institutions

    @property
    def historic(self):
        """Gets the historic of this EnrichedBalances.  # noqa: E501

        A list of historic balances. Each balance in the list is an aggregation (sum) of the reported balance for each account within the profile at a point in time.  # noqa: E501

        :return: The historic of this EnrichedBalances.  # noqa: E501
        :rtype: list[EnrichedHistoricBalance]
        """
        return self._historic

    @historic.setter
    def historic(self, historic):
        """Sets the historic of this EnrichedBalances.

        A list of historic balances. Each balance in the list is an aggregation (sum) of the reported balance for each account within the profile at a point in time.  # noqa: E501

        :param historic: The historic of this EnrichedBalances.  # noqa: E501
        :type: list[EnrichedHistoricBalance]
        """

        self._historic = historic

    @property
    def predicted(self):
        """Gets the predicted of this EnrichedBalances.  # noqa: E501

        A list of predicted balances. Each balance in the list is a projected balance of the profile at a future point in time.  # noqa: E501

        :return: The predicted of this EnrichedBalances.  # noqa: E501
        :rtype: list[EnrichedPredictedBalance]
        """
        return self._predicted

    @predicted.setter
    def predicted(self, predicted):
        """Sets the predicted of this EnrichedBalances.

        A list of predicted balances. Each balance in the list is a projected balance of the profile at a future point in time.  # noqa: E501

        :param predicted: The predicted of this EnrichedBalances.  # noqa: E501
        :type: list[EnrichedPredictedBalance]
        """

        self._predicted = predicted

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EnrichedBalances):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, EnrichedBalances):
            return True

        return self.to_dict() != other.to_dict()
