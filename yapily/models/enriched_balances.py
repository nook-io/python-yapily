# coding: utf-8

"""
    Yapily API

    The Yapily API enables connections between your application and users' banks. For more information check out our [documentation](https://docs.yapily.com/).<br><br>In particular, make sure to view our [Getting Started](https://docs.yapily.com/pages/home/getting-started/) steps if this is your first time here.<br><br>While testing the API, our list of [sandbox credentials](https://docs.yapily.com/pages/key-concepts/sandbox-credentials/) maybe useful.

    The version of the OpenAPI document: 2.13.1
    Contact: support@yapily.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictStr, conlist
from yapily.models.enriched_historic_balance import EnrichedHistoricBalance
from yapily.models.enriched_predicted_balance import EnrichedPredictedBalance

class EnrichedBalances(BaseModel):
    """
    Enriched Balance information generated which include historic aggregated balances and predicted balances  # noqa: E501
    """
    account_ids: Optional[conlist(StrictStr)] = Field(None, alias="accountIds", description="A list of Account Ids used to generate Balance Prediction Profile.")
    institutions: Optional[conlist(StrictStr)] = Field(None, description="A list of Institution Ids associated with the accounts used to generate Balance Prediction Profile.")
    historic: Optional[conlist(EnrichedHistoricBalance)] = Field(None, description="A list of historic balances. Each balance in the list is an aggregation (sum) of the reported balance for each account within the profile at a point in time.")
    predicted: Optional[conlist(EnrichedPredictedBalance)] = Field(None, description="A list of predicted balances. Each balance in the list is a projected balance of the profile at a future point in time.")
    __properties = ["accountIds", "institutions", "historic", "predicted"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> EnrichedBalances:
        """Create an instance of EnrichedBalances from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in historic (list)
        _items = []
        if self.historic:
            for _item in self.historic:
                if _item:
                    _items.append(_item.to_dict())
            _dict['historic'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in predicted (list)
        _items = []
        if self.predicted:
            for _item in self.predicted:
                if _item:
                    _items.append(_item.to_dict())
            _dict['predicted'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> EnrichedBalances:
        """Create an instance of EnrichedBalances from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return EnrichedBalances.parse_obj(obj)

        _obj = EnrichedBalances.parse_obj({
            "account_ids": obj.get("accountIds"),
            "institutions": obj.get("institutions"),
            "historic": [EnrichedHistoricBalance.from_dict(_item) for _item in obj.get("historic")] if obj.get("historic") is not None else None,
            "predicted": [EnrichedPredictedBalance.from_dict(_item) for _item in obj.get("predicted")] if obj.get("predicted") is not None else None
        })
        return _obj


