# coding: utf-8

"""
    Yapily API

    The Yapily API enables connections between your application and users' banks. For more information check out our [documentation](https://docs.yapily.com/).<br><br>In particular, make sure to view our [Getting Started](https://docs.yapily.com/pages/home/getting-started/) steps if this is your first time here.<br><br>While testing the API, our list of [sandbox credentials](https://docs.yapily.com/pages/key-concepts/sandbox-credentials/) maybe useful.

    The version of the OpenAPI document: 2.25.0
    Contact: support@yapily.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import List, Optional
from pydantic import BaseModel, Field, StrictBool, conlist
from yapily.models.account_balance_type import AccountBalanceType
from yapily.models.amount import Amount
from yapily.models.credit_line import CreditLine

class AccountBalance(BaseModel):
    """
    AccountBalance
    """
    type: Optional[AccountBalanceType] = None
    date_time: Optional[datetime] = Field(None, alias="dateTime", description="Date and time of the reported balance.")
    balance_amount: Optional[Amount] = Field(None, alias="balanceAmount")
    credit_line_included: Optional[StrictBool] = Field(None, alias="creditLineIncluded", description="_Optional_. Indicates whether any credit lines are included in the balance.")
    credit_lines: Optional[conlist(CreditLine)] = Field(None, alias="creditLines", description="_Optional_. Specifies the type of balance.")
    __properties = ["type", "dateTime", "balanceAmount", "creditLineIncluded", "creditLines"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> AccountBalance:
        """Create an instance of AccountBalance from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of balance_amount
        if self.balance_amount:
            _dict['balanceAmount'] = self.balance_amount.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in credit_lines (list)
        _items = []
        if self.credit_lines:
            for _item in self.credit_lines:
                if _item:
                    _items.append(_item.to_dict())
            _dict['creditLines'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> AccountBalance:
        """Create an instance of AccountBalance from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return AccountBalance.parse_obj(obj)

        _obj = AccountBalance.parse_obj({
            "type": obj.get("type"),
            "date_time": obj.get("dateTime"),
            "balance_amount": Amount.from_dict(obj.get("balanceAmount")) if obj.get("balanceAmount") is not None else None,
            "credit_line_included": obj.get("creditLineIncluded"),
            "credit_lines": [CreditLine.from_dict(_item) for _item in obj.get("creditLines")] if obj.get("creditLines") is not None else None
        })
        return _obj


