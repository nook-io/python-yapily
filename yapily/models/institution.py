# coding: utf-8

"""
    Yapily API

    The Yapily API enables connections between your application and users' banks. For more information check out our [documentation](https://docs.yapily.com/).<br><br>In particular, make sure to view our [Getting Started](https://docs.yapily.com/#getting-started) steps if this is your first time here.<br><br>While testing the API, our list of [sandbox credentials](https://docs.yapily.com/guides/applications/institutions/sandbox/) maybe useful.  # noqa: E501

    The version of the OpenAPI document: 2.1.0
    Contact: support@yapily.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from yapily.configuration import Configuration


class Institution(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'name': 'str',
        'full_name': 'str',
        'countries': 'list[Country]',
        'environment_type': 'EnvironmentType',
        'credentials_type': 'CredentialsType',
        'media': 'list[Media]',
        'features': 'list[str]',
        'monitoring': 'dict(str, MonitoringFeatureStatus)'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'full_name': 'fullName',
        'countries': 'countries',
        'environment_type': 'environmentType',
        'credentials_type': 'credentialsType',
        'media': 'media',
        'features': 'features',
        'monitoring': 'monitoring'
    }

    def __init__(self, id=None, name=None, full_name=None, countries=None, environment_type=None, credentials_type=None, media=None, features=None, monitoring=None, local_vars_configuration=None):  # noqa: E501
        """Institution - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._name = None
        self._full_name = None
        self._countries = None
        self._environment_type = None
        self._credentials_type = None
        self._media = None
        self._features = None
        self._monitoring = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if full_name is not None:
            self.full_name = full_name
        if countries is not None:
            self.countries = countries
        if environment_type is not None:
            self.environment_type = environment_type
        if credentials_type is not None:
            self.credentials_type = credentials_type
        if media is not None:
            self.media = media
        if features is not None:
            self.features = features
        if monitoring is not None:
            self.monitoring = monitoring

    @property
    def id(self):
        """Gets the id of this Institution.  # noqa: E501

        The Yapily Id for the `Institution`  # noqa: E501

        :return: The id of this Institution.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Institution.

        The Yapily Id for the `Institution`  # noqa: E501

        :param id: The id of this Institution.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this Institution.  # noqa: E501

        The friendly name of the `Institution`  # noqa: E501

        :return: The name of this Institution.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Institution.

        The friendly name of the `Institution`  # noqa: E501

        :param name: The name of this Institution.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def full_name(self):
        """Gets the full_name of this Institution.  # noqa: E501

        The full name of the `Institution`  # noqa: E501

        :return: The full_name of this Institution.  # noqa: E501
        :rtype: str
        """
        return self._full_name

    @full_name.setter
    def full_name(self, full_name):
        """Sets the full_name of this Institution.

        The full name of the `Institution`  # noqa: E501

        :param full_name: The full_name of this Institution.  # noqa: E501
        :type: str
        """

        self._full_name = full_name

    @property
    def countries(self):
        """Gets the countries of this Institution.  # noqa: E501

        An array of `Country` denoting which regions the `Institution` provides coverage for  # noqa: E501

        :return: The countries of this Institution.  # noqa: E501
        :rtype: list[Country]
        """
        return self._countries

    @countries.setter
    def countries(self, countries):
        """Sets the countries of this Institution.

        An array of `Country` denoting which regions the `Institution` provides coverage for  # noqa: E501

        :param countries: The countries of this Institution.  # noqa: E501
        :type: list[Country]
        """

        self._countries = countries

    @property
    def environment_type(self):
        """Gets the environment_type of this Institution.  # noqa: E501


        :return: The environment_type of this Institution.  # noqa: E501
        :rtype: EnvironmentType
        """
        return self._environment_type

    @environment_type.setter
    def environment_type(self, environment_type):
        """Sets the environment_type of this Institution.


        :param environment_type: The environment_type of this Institution.  # noqa: E501
        :type: EnvironmentType
        """

        self._environment_type = environment_type

    @property
    def credentials_type(self):
        """Gets the credentials_type of this Institution.  # noqa: E501


        :return: The credentials_type of this Institution.  # noqa: E501
        :rtype: CredentialsType
        """
        return self._credentials_type

    @credentials_type.setter
    def credentials_type(self, credentials_type):
        """Sets the credentials_type of this Institution.


        :param credentials_type: The credentials_type of this Institution.  # noqa: E501
        :type: CredentialsType
        """

        self._credentials_type = credentials_type

    @property
    def media(self):
        """Gets the media of this Institution.  # noqa: E501

        Contains links to the logo and the icons for the `Institution`  # noqa: E501

        :return: The media of this Institution.  # noqa: E501
        :rtype: list[Media]
        """
        return self._media

    @media.setter
    def media(self, media):
        """Sets the media of this Institution.

        Contains links to the logo and the icons for the `Institution`  # noqa: E501

        :param media: The media of this Institution.  # noqa: E501
        :type: list[Media]
        """

        self._media = media

    @property
    def features(self):
        """Gets the features of this Institution.  # noqa: E501


        :return: The features of this Institution.  # noqa: E501
        :rtype: list[str]
        """
        return self._features

    @features.setter
    def features(self, features):
        """Sets the features of this Institution.


        :param features: The features of this Institution.  # noqa: E501
        :type: list[str]
        """

        self._features = features

    @property
    def monitoring(self):
        """Gets the monitoring of this Institution.  # noqa: E501


        :return: The monitoring of this Institution.  # noqa: E501
        :rtype: dict(str, MonitoringFeatureStatus)
        """
        return self._monitoring

    @monitoring.setter
    def monitoring(self, monitoring):
        """Sets the monitoring of this Institution.


        :param monitoring: The monitoring of this Institution.  # noqa: E501
        :type: dict(str, MonitoringFeatureStatus)
        """

        self._monitoring = monitoring

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Institution):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Institution):
            return True

        return self.to_dict() != other.to_dict()
