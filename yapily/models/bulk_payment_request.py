# coding: utf-8

"""
    Yapily API

    The Yapily API enables connections between your application and users' banks. For more information check out our [documentation](https://docs.yapily.com/).<br><br>In particular, make sure to view our [Getting Started](https://docs.yapily.com/#getting-started) steps if this is your first time here.<br><br>While testing the API, our list of [sandbox credentials](https://docs.yapily.com/guides/applications/institutions/sandbox/) maybe useful.  # noqa: E501

    The version of the OpenAPI document: 2.1.0
    Contact: support@yapily.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from yapily.configuration import Configuration


class BulkPaymentRequest(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'payments': 'list[PaymentRequest]',
        'originator_identification_number': 'str',
        'execution_date_time': 'datetime'
    }

    attribute_map = {
        'payments': 'payments',
        'originator_identification_number': 'originatorIdentificationNumber',
        'execution_date_time': 'executionDateTime'
    }

    def __init__(self, payments=None, originator_identification_number=None, execution_date_time=None, local_vars_configuration=None):  # noqa: E501
        """BulkPaymentRequest - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._payments = None
        self._originator_identification_number = None
        self._execution_date_time = None
        self.discriminator = None

        self.payments = payments
        if originator_identification_number is not None:
            self.originator_identification_number = originator_identification_number
        if execution_date_time is not None:
            self.execution_date_time = execution_date_time

    @property
    def payments(self):
        """Gets the payments of this BulkPaymentRequest.  # noqa: E501

        __Mandatory__. The array of `PaymentRequest` objects to initiate in the bulk payment.  # noqa: E501

        :return: The payments of this BulkPaymentRequest.  # noqa: E501
        :rtype: list[PaymentRequest]
        """
        return self._payments

    @payments.setter
    def payments(self, payments):
        """Sets the payments of this BulkPaymentRequest.

        __Mandatory__. The array of `PaymentRequest` objects to initiate in the bulk payment.  # noqa: E501

        :param payments: The payments of this BulkPaymentRequest.  # noqa: E501
        :type: list[PaymentRequest]
        """
        if self.local_vars_configuration.client_side_validation and payments is None:  # noqa: E501
            raise ValueError("Invalid value for `payments`, must not be `None`")  # noqa: E501

        self._payments = payments

    @property
    def originator_identification_number(self):
        """Gets the originator_identification_number of this BulkPaymentRequest.  # noqa: E501

        __Conditional__. The identification number of the originator.<ul><li>Mandatory for AIB bulk payments</li></ul>  # noqa: E501

        :return: The originator_identification_number of this BulkPaymentRequest.  # noqa: E501
        :rtype: str
        """
        return self._originator_identification_number

    @originator_identification_number.setter
    def originator_identification_number(self, originator_identification_number):
        """Sets the originator_identification_number of this BulkPaymentRequest.

        __Conditional__. The identification number of the originator.<ul><li>Mandatory for AIB bulk payments</li></ul>  # noqa: E501

        :param originator_identification_number: The originator_identification_number of this BulkPaymentRequest.  # noqa: E501
        :type: str
        """

        self._originator_identification_number = originator_identification_number

    @property
    def execution_date_time(self):
        """Gets the execution_date_time of this BulkPaymentRequest.  # noqa: E501

        __Optional__. Used to schedule the bulk payment to be executed at a future date if supported by the `Institution`.  # noqa: E501

        :return: The execution_date_time of this BulkPaymentRequest.  # noqa: E501
        :rtype: datetime
        """
        return self._execution_date_time

    @execution_date_time.setter
    def execution_date_time(self, execution_date_time):
        """Sets the execution_date_time of this BulkPaymentRequest.

        __Optional__. Used to schedule the bulk payment to be executed at a future date if supported by the `Institution`.  # noqa: E501

        :param execution_date_time: The execution_date_time of this BulkPaymentRequest.  # noqa: E501
        :type: datetime
        """

        self._execution_date_time = execution_date_time

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BulkPaymentRequest):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, BulkPaymentRequest):
            return True

        return self.to_dict() != other.to_dict()
