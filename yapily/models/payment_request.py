# coding: utf-8

"""
    Yapily API

    The Yapily API enables connections between your application and users' banks. For more information check out our [documentation](https://docs.yapily.com/).<br><br>In particular, make sure to view our [Getting Started](https://docs.yapily.com/pages/home/getting-started/) steps if this is your first time here.<br><br>While testing the API, our list of [sandbox credentials](https://docs.yapily.com/pages/key-concepts/sandbox-credentials/) maybe useful.

    The version of the OpenAPI document: 4.2.0
    Contact: support@yapily.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Optional
from pydantic import BaseModel, Field, StrictBool, StrictStr
from yapily.models.amount import Amount
from yapily.models.international_payment_request import InternationalPaymentRequest
from yapily.models.payee import Payee
from yapily.models.payer import Payer
from yapily.models.payment_context_type import PaymentContextType
from yapily.models.payment_type import PaymentType
from yapily.models.periodic_payment_request import PeriodicPaymentRequest

class PaymentRequest(BaseModel):
    """
    __Mandatory__. The payment request object defining the details of the payment.  # noqa: E501
    """
    payment_idempotency_id: StrictStr = Field(..., alias="paymentIdempotencyId", description="__Mandatory__. A unique identifier that you must provide to identify the payment. This can be any alpha-numeric string but is limited to a maximum of 35 characters.")
    payer: Optional[Payer] = None
    reference: Optional[StrictStr] = Field(None, description="__Optional__. The payment reference or description. Limited to a maximum of 18 characters long.")
    context_type: Optional[PaymentContextType] = Field(None, alias="contextType")
    purpose_code: Optional[StrictStr] = Field(None, alias="purposeCode", description="__Optional__. The payment purpose code. <br><br>Allowed values: INTP,DEPT,BEXP,LICF,SERV,SUPP,TRAD,SUBS,GDSV,ROYA,COMT,CHAR,ECPR,CLPR,INTE,LOAN,LOAR,INPC,INPR,INSC,INSU,LIFI,PPTI,HLRP,HLST,PDEP,IVPT,REBT,REFU,CDBL,CPKC,EDUC,FEES,GAMB,LOTT,GIFT,INSM,REOD,GOVT,TCSC,BLDM,RENT,DIVD,INVS,SAVG,HLTI,DNTS,LTCF,MDCS,VIEW,BECH,BENE,SSBE,PEFC,PENS,ADCS,BONU,COMM,SALA,ESTX,HSTX,INTX,PTXP,RDTX,TAXS,VATX,WHLD,TAXR,CBTV,ELEC,GASB,PHON,UBIL,WTER . <br><br>See [Payment Purpose code](https://docs.yapily.com/pages/payments/payments-resources/tri-pilot/) to see the definition of each code")
    type: PaymentType = Field(...)
    payee: Payee = Field(...)
    periodic_payment: Optional[PeriodicPaymentRequest] = Field(None, alias="periodicPayment")
    international_payment: Optional[InternationalPaymentRequest] = Field(None, alias="internationalPayment")
    amount: Amount = Field(...)
    payment_date_time: Optional[datetime] = Field(None, alias="paymentDateTime", description="__Conditional__. Used to specify the date of the payment when the payment type is one of the following:<ul>    <li><code>DOMESTIC_SCHEDULED_PAYMENT</code></li>    <li><code>DOMESTIC_PERIODIC_PAYMENT</code></li>    <li><code>INTERNATIONAL_SCHEDULED_PAYMENT</code></li>    <li><code>INTERNATIONAL_PERIODIC_PAYMENT</code></li></ul>")
    read_refund_account: Optional[StrictBool] = Field(None, alias="readRefundAccount", description="__Optional__. Used to request the payer details in the payment response when the `Institution` provides the feature `READ_DOMESTIC_SINGLE_REFUND`.<br><br>See [Reverse Payments](https://docs.yapily.com/pages/knowledge/open-banking/reverse_payments/) for more information.")
    __properties = ["paymentIdempotencyId", "payer", "reference", "contextType", "purposeCode", "type", "payee", "periodicPayment", "internationalPayment", "amount", "paymentDateTime", "readRefundAccount"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> PaymentRequest:
        """Create an instance of PaymentRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of payer
        if self.payer:
            _dict['payer'] = self.payer.to_dict()
        # override the default output from pydantic by calling `to_dict()` of payee
        if self.payee:
            _dict['payee'] = self.payee.to_dict()
        # override the default output from pydantic by calling `to_dict()` of periodic_payment
        if self.periodic_payment:
            _dict['periodicPayment'] = self.periodic_payment.to_dict()
        # override the default output from pydantic by calling `to_dict()` of international_payment
        if self.international_payment:
            _dict['internationalPayment'] = self.international_payment.to_dict()
        # override the default output from pydantic by calling `to_dict()` of amount
        if self.amount:
            _dict['amount'] = self.amount.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> PaymentRequest:
        """Create an instance of PaymentRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return PaymentRequest.parse_obj(obj)

        _obj = PaymentRequest.parse_obj({
            "payment_idempotency_id": obj.get("paymentIdempotencyId"),
            "payer": Payer.from_dict(obj.get("payer")) if obj.get("payer") is not None else None,
            "reference": obj.get("reference"),
            "context_type": obj.get("contextType"),
            "purpose_code": obj.get("purposeCode"),
            "type": obj.get("type"),
            "payee": Payee.from_dict(obj.get("payee")) if obj.get("payee") is not None else None,
            "periodic_payment": PeriodicPaymentRequest.from_dict(obj.get("periodicPayment")) if obj.get("periodicPayment") is not None else None,
            "international_payment": InternationalPaymentRequest.from_dict(obj.get("internationalPayment")) if obj.get("internationalPayment") is not None else None,
            "amount": Amount.from_dict(obj.get("amount")) if obj.get("amount") is not None else None,
            "payment_date_time": obj.get("paymentDateTime"),
            "read_refund_account": obj.get("readRefundAccount")
        })
        return _obj


