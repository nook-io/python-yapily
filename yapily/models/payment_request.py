# coding: utf-8

"""
    Yapily API

    The Yapily API enables connections between your application and users' banks. For more information check out our [documentation](https://docs.yapily.com/).<br><br>In particular, make sure to view our [Getting Started](https://docs.yapily.com/pages/home/getting-started/) steps if this is your first time here.<br><br>While testing the API, our list of [sandbox credentials](https://docs.yapily.com/pages/key-concepts/sandbox-credentials/) maybe useful.

    The version of the OpenAPI document: 2.13.1
    Contact: support@yapily.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, StrictBool, StrictStr
from pydantic import Field
from yapily.models.amount import Amount
from yapily.models.international_payment_request import InternationalPaymentRequest
from yapily.models.payee import Payee
from yapily.models.payer import Payer
from yapily.models.payment_context_type import PaymentContextType
from yapily.models.payment_type import PaymentType
from yapily.models.periodic_payment_request import PeriodicPaymentRequest
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class PaymentRequest(BaseModel):
    """
    __Mandatory__. The payment request object defining the details of the payment.
    """ # noqa: E501
    payment_idempotency_id: StrictStr = Field(description="__Mandatory__. A unique identifier that you must provide to identify the payment. This can be any alpha-numeric string but is limited to a maximum of 35 characters.", alias="paymentIdempotencyId")
    payer: Optional[Payer] = None
    reference: Optional[StrictStr] = Field(default=None, description="__Optional__. The payment reference or description. Limited to a maximum of 18 characters long.")
    context_type: Optional[PaymentContextType] = Field(default=None, alias="contextType")
    type: PaymentType
    payee: Payee
    periodic_payment: Optional[PeriodicPaymentRequest] = Field(default=None, alias="periodicPayment")
    international_payment: Optional[InternationalPaymentRequest] = Field(default=None, alias="internationalPayment")
    amount: Amount
    payment_date_time: Optional[datetime] = Field(default=None, description="__Conditional__. Used to specify the date of the payment when the payment type is one of the following:<ul>    <li><code>DOMESTIC_SCHEDULED_PAYMENT</code></li>    <li><code>DOMESTIC_PERIODIC_PAYMENT</code></li>    <li><code>INTERNATIONAL_SCHEDULED_PAYMENT</code></li>    <li><code>INTERNATIONAL_PERIODIC_PAYMENT</code></li></ul>", alias="paymentDateTime")
    read_refund_account: Optional[StrictBool] = Field(default=None, description="__Optional__. Used to request the payer details in the payment response when the `Institution` provides the feature `READ_DOMESTIC_SINGLE_REFUND`.<br><br>See [Reverse Payments](https://docs.yapily.com/pages/knowledge/open-banking/reverse_payments/) for more information.", alias="readRefundAccount")
    __properties: ClassVar[List[str]] = ["paymentIdempotencyId", "payer", "reference", "contextType", "type", "payee", "periodicPayment", "internationalPayment", "amount", "paymentDateTime", "readRefundAccount"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of PaymentRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of payer
        if self.payer:
            _dict['payer'] = self.payer.to_dict()
        # override the default output from pydantic by calling `to_dict()` of payee
        if self.payee:
            _dict['payee'] = self.payee.to_dict()
        # override the default output from pydantic by calling `to_dict()` of periodic_payment
        if self.periodic_payment:
            _dict['periodicPayment'] = self.periodic_payment.to_dict()
        # override the default output from pydantic by calling `to_dict()` of international_payment
        if self.international_payment:
            _dict['internationalPayment'] = self.international_payment.to_dict()
        # override the default output from pydantic by calling `to_dict()` of amount
        if self.amount:
            _dict['amount'] = self.amount.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of PaymentRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "paymentIdempotencyId": obj.get("paymentIdempotencyId"),
            "payer": Payer.from_dict(obj.get("payer")) if obj.get("payer") is not None else None,
            "reference": obj.get("reference"),
            "contextType": obj.get("contextType"),
            "type": obj.get("type"),
            "payee": Payee.from_dict(obj.get("payee")) if obj.get("payee") is not None else None,
            "periodicPayment": PeriodicPaymentRequest.from_dict(obj.get("periodicPayment")) if obj.get("periodicPayment") is not None else None,
            "internationalPayment": InternationalPaymentRequest.from_dict(obj.get("internationalPayment")) if obj.get("internationalPayment") is not None else None,
            "amount": Amount.from_dict(obj.get("amount")) if obj.get("amount") is not None else None,
            "paymentDateTime": obj.get("paymentDateTime"),
            "readRefundAccount": obj.get("readRefundAccount")
        })
        return _obj


