# coding: utf-8

"""
    Yapily API

    The Yapily API enables connections between your application and users' banks. For more information check out our [documentation](https://docs.yapily.com/).<br><br>In particular, make sure to view our [Getting Started](https://docs.yapily.com/pages/home/getting-started/) steps if this is your first time here.<br><br>While testing the API, our list of [sandbox credentials](https://docs.yapily.com/pages/key-concepts/sandbox-credentials/) maybe useful.

    The version of the OpenAPI document: 2.25.0
    Contact: support@yapily.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import List, Optional
from pydantic import BaseModel, Field, StrictStr, conlist
from yapily.models.hosted_payment import HostedPayment
from yapily.models.hosted_payment_request_details_link import HostedPaymentRequestDetailsLink
from yapily.models.institution_identifiers_response import InstitutionIdentifiersResponse
from yapily.models.user_settings import UserSettings

class HostedPaymentDetails(BaseModel):
    """
    HostedPaymentDetails
    """
    payment_request_id: Optional[StrictStr] = Field(None, alias="paymentRequestId", description="The unique ID of the payment request.")
    user_id: Optional[StrictStr] = Field(None, alias="userId", description="The Unique Identifier for the `User` assigned by Yapily.")
    application_user_id: Optional[StrictStr] = Field(None, alias="applicationUserId", description="Your reference to the `User`.")
    application_id: Optional[StrictStr] = Field(None, alias="applicationId", description="The Unique Identifier of the `Application` the user is associated with.")
    institution_identifiers: Optional[InstitutionIdentifiersResponse] = Field(None, alias="institutionIdentifiers")
    user_settings: Optional[UserSettings] = Field(None, alias="userSettings")
    redirect_url: Optional[StrictStr] = Field(None, alias="redirectUrl", description="URL of your server to redirect the user after completion of the payment flow.")
    payment_request_details: Optional[HostedPaymentRequestDetailsLink] = Field(None, alias="paymentRequestDetails")
    created_at: Optional[datetime] = Field(None, alias="createdAt", description="The date and time at which the payment request was created.")
    authorisation_expires_at: Optional[datetime] = Field(None, alias="authorisationExpiresAt", description="The date and time at which the auth Token will expire.")
    status: Optional[StrictStr] = Field(None, description="Current status of the payment request. <br> Possible values: <br> ACTIVE <br> INACTIVE")
    payments: Optional[conlist(HostedPayment, unique_items=True)] = Field(None, description="Payments that have been initiated as part of this request")
    __properties = ["paymentRequestId", "userId", "applicationUserId", "applicationId", "institutionIdentifiers", "userSettings", "redirectUrl", "paymentRequestDetails", "createdAt", "authorisationExpiresAt", "status", "payments"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> HostedPaymentDetails:
        """Create an instance of HostedPaymentDetails from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of institution_identifiers
        if self.institution_identifiers:
            _dict['institutionIdentifiers'] = self.institution_identifiers.to_dict()
        # override the default output from pydantic by calling `to_dict()` of user_settings
        if self.user_settings:
            _dict['userSettings'] = self.user_settings.to_dict()
        # override the default output from pydantic by calling `to_dict()` of payment_request_details
        if self.payment_request_details:
            _dict['paymentRequestDetails'] = self.payment_request_details.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in payments (list)
        _items = []
        if self.payments:
            for _item in self.payments:
                if _item:
                    _items.append(_item.to_dict())
            _dict['payments'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> HostedPaymentDetails:
        """Create an instance of HostedPaymentDetails from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return HostedPaymentDetails.parse_obj(obj)

        _obj = HostedPaymentDetails.parse_obj({
            "payment_request_id": obj.get("paymentRequestId"),
            "user_id": obj.get("userId"),
            "application_user_id": obj.get("applicationUserId"),
            "application_id": obj.get("applicationId"),
            "institution_identifiers": InstitutionIdentifiersResponse.from_dict(obj.get("institutionIdentifiers")) if obj.get("institutionIdentifiers") is not None else None,
            "user_settings": UserSettings.from_dict(obj.get("userSettings")) if obj.get("userSettings") is not None else None,
            "redirect_url": obj.get("redirectUrl"),
            "payment_request_details": HostedPaymentRequestDetailsLink.from_dict(obj.get("paymentRequestDetails")) if obj.get("paymentRequestDetails") is not None else None,
            "created_at": obj.get("createdAt"),
            "authorisation_expires_at": obj.get("authorisationExpiresAt"),
            "status": obj.get("status"),
            "payments": [HostedPayment.from_dict(_item) for _item in obj.get("payments")] if obj.get("payments") is not None else None
        })
        return _obj


