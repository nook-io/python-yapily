# coding: utf-8

"""
    Yapily API

    The Yapily API enables connections between your application and users' banks. For more information check out our [documentation](https://docs.yapily.com/).<br><br>In particular, make sure to view our [Getting Started](https://docs.yapily.com/pages/home/getting-started/) steps if this is your first time here.<br><br>While testing the API, our list of [sandbox credentials](https://docs.yapily.com/pages/key-concepts/sandbox-credentials/) maybe useful.

    The version of the OpenAPI document: 4.2.0
    Contact: support@yapily.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictStr
from yapily.models.hosted_payment_request_details import HostedPaymentRequestDetails
from yapily.models.institution_identifiers import InstitutionIdentifiers
from yapily.models.user_settings import UserSettings

class CreateHostedPaymentRequest(BaseModel):
    """
    CreateHostedPaymentRequest
    """
    user_id: Optional[StrictStr] = Field(None, alias="userId", description="__Conditional__. Yapily Identifier for the `User` returned by the create user step POST /users. You must provide either a `userId` or `applicationUserId`.")
    application_user_id: Optional[StrictStr] = Field(None, alias="applicationUserId", description="__Conditional__. Your own `User` reference. This field allows you to use your own unique references for individual users. Where the `User` reference doesn't have an associated Yapily `userId`, a new `userId` is created and linked to it. You must provide either a `userId` or `applicationUserId`.")
    institution_identifiers: InstitutionIdentifiers = Field(..., alias="institutionIdentifiers")
    user_settings: Optional[UserSettings] = Field(None, alias="userSettings")
    redirect_url: StrictStr = Field(..., alias="redirectUrl", description="URL of your server to redirect the user after completion of the payment flow.")
    payment_request_details: HostedPaymentRequestDetails = Field(..., alias="paymentRequestDetails")
    __properties = ["userId", "applicationUserId", "institutionIdentifiers", "userSettings", "redirectUrl", "paymentRequestDetails"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> CreateHostedPaymentRequest:
        """Create an instance of CreateHostedPaymentRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of institution_identifiers
        if self.institution_identifiers:
            _dict['institutionIdentifiers'] = self.institution_identifiers.to_dict()
        # override the default output from pydantic by calling `to_dict()` of user_settings
        if self.user_settings:
            _dict['userSettings'] = self.user_settings.to_dict()
        # override the default output from pydantic by calling `to_dict()` of payment_request_details
        if self.payment_request_details:
            _dict['paymentRequestDetails'] = self.payment_request_details.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> CreateHostedPaymentRequest:
        """Create an instance of CreateHostedPaymentRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return CreateHostedPaymentRequest.parse_obj(obj)

        _obj = CreateHostedPaymentRequest.parse_obj({
            "user_id": obj.get("userId"),
            "application_user_id": obj.get("applicationUserId"),
            "institution_identifiers": InstitutionIdentifiers.from_dict(obj.get("institutionIdentifiers")) if obj.get("institutionIdentifiers") is not None else None,
            "user_settings": UserSettings.from_dict(obj.get("userSettings")) if obj.get("userSettings") is not None else None,
            "redirect_url": obj.get("redirectUrl"),
            "payment_request_details": HostedPaymentRequestDetails.from_dict(obj.get("paymentRequestDetails")) if obj.get("paymentRequestDetails") is not None else None
        })
        return _obj


