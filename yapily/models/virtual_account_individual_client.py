# coding: utf-8

"""
    Yapily API

    The Yapily API enables connections between your application and users' banks. For more information check out our [documentation](https://docs.yapily.com/).<br><br>In particular, make sure to view our [Getting Started](https://docs.yapily.com/pages/home/getting-started/) steps if this is your first time here.<br><br>While testing the API, our list of [sandbox credentials](https://docs.yapily.com/pages/key-concepts/sandbox-credentials/) maybe useful.  # noqa: E501

    The version of the OpenAPI document: 2.13.1
    Contact: support@yapily.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from yapily.configuration import Configuration


class VirtualAccountIndividualClient(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'first_name': 'str',
        'middle_name': 'str',
        'last_name': 'str',
        'address': 'VirtualAccountAddress',
        'birth_date': 'date',
        'email': 'str',
        'phone': 'str'
    }

    attribute_map = {
        'first_name': 'firstName',
        'middle_name': 'middleName',
        'last_name': 'lastName',
        'address': 'address',
        'birth_date': 'birthDate',
        'email': 'email',
        'phone': 'phone'
    }

    def __init__(self, first_name=None, middle_name=None, last_name=None, address=None, birth_date=None, email=None, phone=None, local_vars_configuration=None):  # noqa: E501
        """VirtualAccountIndividualClient - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._first_name = None
        self._middle_name = None
        self._last_name = None
        self._address = None
        self._birth_date = None
        self._email = None
        self._phone = None
        self.discriminator = None

        self.first_name = first_name
        if middle_name is not None:
            self.middle_name = middle_name
        self.last_name = last_name
        if address is not None:
            self.address = address
        self.birth_date = birth_date
        self.email = email
        if phone is not None:
            self.phone = phone

    @property
    def first_name(self):
        """Gets the first_name of this VirtualAccountIndividualClient.  # noqa: E501


        :return: The first_name of this VirtualAccountIndividualClient.  # noqa: E501
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this VirtualAccountIndividualClient.


        :param first_name: The first_name of this VirtualAccountIndividualClient.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and first_name is None:  # noqa: E501
            raise ValueError("Invalid value for `first_name`, must not be `None`")  # noqa: E501

        self._first_name = first_name

    @property
    def middle_name(self):
        """Gets the middle_name of this VirtualAccountIndividualClient.  # noqa: E501


        :return: The middle_name of this VirtualAccountIndividualClient.  # noqa: E501
        :rtype: str
        """
        return self._middle_name

    @middle_name.setter
    def middle_name(self, middle_name):
        """Sets the middle_name of this VirtualAccountIndividualClient.


        :param middle_name: The middle_name of this VirtualAccountIndividualClient.  # noqa: E501
        :type: str
        """

        self._middle_name = middle_name

    @property
    def last_name(self):
        """Gets the last_name of this VirtualAccountIndividualClient.  # noqa: E501


        :return: The last_name of this VirtualAccountIndividualClient.  # noqa: E501
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this VirtualAccountIndividualClient.


        :param last_name: The last_name of this VirtualAccountIndividualClient.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and last_name is None:  # noqa: E501
            raise ValueError("Invalid value for `last_name`, must not be `None`")  # noqa: E501

        self._last_name = last_name

    @property
    def address(self):
        """Gets the address of this VirtualAccountIndividualClient.  # noqa: E501


        :return: The address of this VirtualAccountIndividualClient.  # noqa: E501
        :rtype: VirtualAccountAddress
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this VirtualAccountIndividualClient.


        :param address: The address of this VirtualAccountIndividualClient.  # noqa: E501
        :type: VirtualAccountAddress
        """

        self._address = address

    @property
    def birth_date(self):
        """Gets the birth_date of this VirtualAccountIndividualClient.  # noqa: E501


        :return: The birth_date of this VirtualAccountIndividualClient.  # noqa: E501
        :rtype: date
        """
        return self._birth_date

    @birth_date.setter
    def birth_date(self, birth_date):
        """Sets the birth_date of this VirtualAccountIndividualClient.


        :param birth_date: The birth_date of this VirtualAccountIndividualClient.  # noqa: E501
        :type: date
        """
        if self.local_vars_configuration.client_side_validation and birth_date is None:  # noqa: E501
            raise ValueError("Invalid value for `birth_date`, must not be `None`")  # noqa: E501

        self._birth_date = birth_date

    @property
    def email(self):
        """Gets the email of this VirtualAccountIndividualClient.  # noqa: E501


        :return: The email of this VirtualAccountIndividualClient.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this VirtualAccountIndividualClient.


        :param email: The email of this VirtualAccountIndividualClient.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and email is None:  # noqa: E501
            raise ValueError("Invalid value for `email`, must not be `None`")  # noqa: E501

        self._email = email

    @property
    def phone(self):
        """Gets the phone of this VirtualAccountIndividualClient.  # noqa: E501


        :return: The phone of this VirtualAccountIndividualClient.  # noqa: E501
        :rtype: str
        """
        return self._phone

    @phone.setter
    def phone(self, phone):
        """Sets the phone of this VirtualAccountIndividualClient.


        :param phone: The phone of this VirtualAccountIndividualClient.  # noqa: E501
        :type: str
        """

        self._phone = phone

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, VirtualAccountIndividualClient):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, VirtualAccountIndividualClient):
            return True

        return self.to_dict() != other.to_dict()
