# coding: utf-8

"""
Yapily API

The Yapily API enables connections between your application and users' banks. For more information check out our [documentation](https://docs.yapily.com/).<br><br>In particular, make sure to view our [Getting Started](https://docs.yapily.com/pages/home/getting-started/) steps if this is your first time here.<br><br>While testing the API, our list of [sandbox credentials](https://docs.yapily.com/pages/key-concepts/sandbox-credentials/) maybe useful.

The version of the OpenAPI document: 7.2.0
Contact: support@yapily.com
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from yapily.models.feature_details import FeatureDetails
from yapily.models.filter_and_sort import FilterAndSort
from typing import Set
from typing_extensions import Self


class FilteredClientPayloadListFeatureDetails(BaseModel):
    """
    FilteredClientPayloadListFeatureDetails
    """  # noqa: E501

    api_call: Optional[Dict[str, Any]] = Field(default=None, alias="apiCall")
    data: Optional[List[FeatureDetails]] = None
    next_cursor_hash: Optional[StrictStr] = Field(default=None, alias="nextCursorHash")
    next_link: Optional[StrictStr] = Field(default=None, alias="nextLink")
    paging_map: Optional[Dict[str, FilterAndSort]] = Field(
        default=None, alias="pagingMap"
    )
    total_count: Optional[StrictInt] = Field(default=None, alias="totalCount")
    __properties: ClassVar[List[str]] = [
        "apiCall",
        "data",
        "nextCursorHash",
        "nextLink",
        "pagingMap",
        "totalCount",
    ]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of FilteredClientPayloadListFeatureDetails from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in data (list)
        _items = []
        if self.data:
            for _item_data in self.data:
                if _item_data:
                    _items.append(_item_data.to_dict())
            _dict["data"] = _items
        # override the default output from pydantic by calling `to_dict()` of each value in paging_map (dict)
        _field_dict = {}
        if self.paging_map:
            for _key_paging_map in self.paging_map:
                if self.paging_map[_key_paging_map]:
                    _field_dict[_key_paging_map] = self.paging_map[
                        _key_paging_map
                    ].to_dict()
            _dict["pagingMap"] = _field_dict
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of FilteredClientPayloadListFeatureDetails from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "apiCall": obj.get("apiCall"),
                "data": [FeatureDetails.from_dict(_item) for _item in obj["data"]]
                if obj.get("data") is not None
                else None,
                "nextCursorHash": obj.get("nextCursorHash"),
                "nextLink": obj.get("nextLink"),
                "pagingMap": dict(
                    (_k, FilterAndSort.from_dict(_v))
                    for _k, _v in obj["pagingMap"].items()
                )
                if obj.get("pagingMap") is not None
                else None,
                "totalCount": obj.get("totalCount"),
            }
        )
        return _obj
