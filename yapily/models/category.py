# coding: utf-8

"""
    Yapily API

    The Yapily API enables connections between your application and users' banks. For more information check out our [documentation](https://docs.yapily.com/).<br><br>In particular, make sure to view our [Getting Started](https://docs.yapily.com/pages/home/getting-started/) steps if this is your first time here.<br><br>While testing the API, our list of [sandbox credentials](https://docs.yapily.com/pages/key-concepts/sandbox-credentials/) maybe useful.

    The version of the OpenAPI document: 2.25.0
    Contact: support@yapily.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictStr, conlist
from yapily.models.subcategory import Subcategory

class Category(BaseModel):
    """
    Income and Expense `Category` in which the transaction resides.  # noqa: E501
    """
    id: Optional[StrictStr] = Field(None, description="Unique identifier of the category")
    label: Optional[StrictStr] = Field(None, description="Descriptive identifier of the category.")
    country: Optional[StrictStr] = Field(None, description="The country code of where the category transaction took place, denoted as a 3-digit character code - ISO 3166.")
    subcategories: Optional[conlist(Subcategory)] = None
    __properties = ["id", "label", "country", "subcategories"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Category:
        """Create an instance of Category from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in subcategories (list)
        _items = []
        if self.subcategories:
            for _item in self.subcategories:
                if _item:
                    _items.append(_item.to_dict())
            _dict['subcategories'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Category:
        """Create an instance of Category from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return Category.parse_obj(obj)

        _obj = Category.parse_obj({
            "id": obj.get("id"),
            "label": obj.get("label"),
            "country": obj.get("country"),
            "subcategories": [Subcategory.from_dict(_item) for _item in obj.get("subcategories")] if obj.get("subcategories") is not None else None
        })
        return _obj


