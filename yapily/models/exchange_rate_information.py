# coding: utf-8

"""
    Yapily API

    The Yapily API enables connections between your application and users' banks. For more information check out our [documentation](https://docs.yapily.com/).<br><br>In particular, make sure to view our [Getting Started](https://docs.yapily.com/pages/home/getting-started/) steps if this is your first time here.<br><br>While testing the API, our list of [sandbox credentials](https://docs.yapily.com/pages/key-concepts/sandbox-credentials/) maybe useful.  # noqa: E501

    The version of the OpenAPI document: 2.13.1
    Contact: support@yapily.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from yapily.configuration import Configuration


class ExchangeRateInformation(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'unit_currency': 'str',
        'rate': 'float',
        'rate_type': 'RateTypeEnum',
        'foreign_exchange_contract_reference': 'str'
    }

    attribute_map = {
        'unit_currency': 'unitCurrency',
        'rate': 'rate',
        'rate_type': 'rateType',
        'foreign_exchange_contract_reference': 'foreignExchangeContractReference'
    }

    def __init__(self, unit_currency=None, rate=None, rate_type=None, foreign_exchange_contract_reference=None, local_vars_configuration=None):  # noqa: E501
        """ExchangeRateInformation - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._unit_currency = None
        self._rate = None
        self._rate_type = None
        self._foreign_exchange_contract_reference = None
        self.discriminator = None

        self.unit_currency = unit_currency
        if rate is not None:
            self.rate = rate
        self.rate_type = rate_type
        if foreign_exchange_contract_reference is not None:
            self.foreign_exchange_contract_reference = foreign_exchange_contract_reference

    @property
    def unit_currency(self):
        """Gets the unit_currency of this ExchangeRateInformation.  # noqa: E501

        __Mandatory__. The currency in which the rate of exchange is expressed in a currency exchange. In the example 1GBP = xxxCUR, the unit currency is `GBP`.  # noqa: E501

        :return: The unit_currency of this ExchangeRateInformation.  # noqa: E501
        :rtype: str
        """
        return self._unit_currency

    @unit_currency.setter
    def unit_currency(self, unit_currency):
        """Sets the unit_currency of this ExchangeRateInformation.

        __Mandatory__. The currency in which the rate of exchange is expressed in a currency exchange. In the example 1GBP = xxxCUR, the unit currency is `GBP`.  # noqa: E501

        :param unit_currency: The unit_currency of this ExchangeRateInformation.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and unit_currency is None:  # noqa: E501
            raise ValueError("Invalid value for `unit_currency`, must not be `None`")  # noqa: E501

        self._unit_currency = unit_currency

    @property
    def rate(self):
        """Gets the rate of this ExchangeRateInformation.  # noqa: E501

        __Optional__. The factor used for conversion of an amount from one currency to another. This reflects the price at which one currency was bought with another currency.  # noqa: E501

        :return: The rate of this ExchangeRateInformation.  # noqa: E501
        :rtype: float
        """
        return self._rate

    @rate.setter
    def rate(self, rate):
        """Sets the rate of this ExchangeRateInformation.

        __Optional__. The factor used for conversion of an amount from one currency to another. This reflects the price at which one currency was bought with another currency.  # noqa: E501

        :param rate: The rate of this ExchangeRateInformation.  # noqa: E501
        :type: float
        """

        self._rate = rate

    @property
    def rate_type(self):
        """Gets the rate_type of this ExchangeRateInformation.  # noqa: E501


        :return: The rate_type of this ExchangeRateInformation.  # noqa: E501
        :rtype: RateTypeEnum
        """
        return self._rate_type

    @rate_type.setter
    def rate_type(self, rate_type):
        """Sets the rate_type of this ExchangeRateInformation.


        :param rate_type: The rate_type of this ExchangeRateInformation.  # noqa: E501
        :type: RateTypeEnum
        """
        if self.local_vars_configuration.client_side_validation and rate_type is None:  # noqa: E501
            raise ValueError("Invalid value for `rate_type`, must not be `None`")  # noqa: E501

        self._rate_type = rate_type

    @property
    def foreign_exchange_contract_reference(self):
        """Gets the foreign_exchange_contract_reference of this ExchangeRateInformation.  # noqa: E501

        __Optional__. The unique and unambiguous reference to the foreign exchange contract agreed between the initiating party/creditor and the debtor agent.  # noqa: E501

        :return: The foreign_exchange_contract_reference of this ExchangeRateInformation.  # noqa: E501
        :rtype: str
        """
        return self._foreign_exchange_contract_reference

    @foreign_exchange_contract_reference.setter
    def foreign_exchange_contract_reference(self, foreign_exchange_contract_reference):
        """Sets the foreign_exchange_contract_reference of this ExchangeRateInformation.

        __Optional__. The unique and unambiguous reference to the foreign exchange contract agreed between the initiating party/creditor and the debtor agent.  # noqa: E501

        :param foreign_exchange_contract_reference: The foreign_exchange_contract_reference of this ExchangeRateInformation.  # noqa: E501
        :type: str
        """

        self._foreign_exchange_contract_reference = foreign_exchange_contract_reference

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ExchangeRateInformation):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ExchangeRateInformation):
            return True

        return self.to_dict() != other.to_dict()
