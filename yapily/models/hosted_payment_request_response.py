# coding: utf-8

"""
Yapily API

The Yapily API enables connections between your application and users' banks. For more information check out our [documentation](https://docs.yapily.com/).<br><br>In particular, make sure to view our [Getting Started](https://docs.yapily.com/pages/home/getting-started/) steps if this is your first time here.<br><br>While testing the API, our list of [sandbox credentials](https://docs.yapily.com/pages/key-concepts/sandbox-credentials/) maybe useful.

The version of the OpenAPI document: 7.2.0
Contact: support@yapily.com
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Optional
from pydantic import BaseModel, Field, StrictStr
from yapily.models.hosted_payment_response_details import HostedPaymentResponseDetails
from yapily.models.institution_identifiers_response import (
    InstitutionIdentifiersResponse,
)
from yapily.models.user_settings import UserSettings


class HostedPaymentRequestResponse(BaseModel):
    """
    HostedPaymentRequestResponse
    """

    payment_request_id: Optional[StrictStr] = Field(
        default=None,
        alias="paymentRequestId",
        description="Unique Id of the payment request.",
    )
    user_id: Optional[StrictStr] = Field(
        default=None,
        alias="userId",
        description="Unique Id for the `User` assigned by Yapily.",
    )
    application_user_id: Optional[StrictStr] = Field(
        default=None,
        alias="applicationUserId",
        description="Your reference to the `User`.",
    )
    application_id: Optional[StrictStr] = Field(
        default=None,
        alias="applicationId",
        description="Unique Id of the `Application` the user is associated with.",
    )
    institution_identifiers: Optional[InstitutionIdentifiersResponse] = Field(
        default=None, alias="institutionIdentifiers"
    )
    user_settings: Optional[UserSettings] = Field(default=None, alias="userSettings")
    redirect_url: Optional[StrictStr] = Field(
        default=None,
        alias="redirectUrl",
        description="URL of payment server to redirect the user after completion of the payment flow.",
    )
    payment_request_details: Optional[HostedPaymentResponseDetails] = Field(
        default=None, alias="paymentRequestDetails"
    )
    hosted_url: Optional[StrictStr] = Field(
        default=None,
        alias="hostedUrl",
        description="The URL of Hosted UI page for the applicationId which initiates the user journey for the payment. <br> URL would be appended with authToken, applicationId and userSettings.",
    )
    created_at: Optional[datetime] = Field(
        default=None,
        alias="createdAt",
        description="The date and time at which the payment was created.",
    )
    authorisation_expires_at: Optional[datetime] = Field(
        default=None,
        alias="authorisationExpiresAt",
        description="The date and time at which the auth Token will expire.",
    )
    status: Optional[StrictStr] = Field(
        default=None, description="Current status of the payment request."
    )
    __properties = [
        "paymentRequestId",
        "userId",
        "applicationUserId",
        "applicationId",
        "institutionIdentifiers",
        "userSettings",
        "redirectUrl",
        "paymentRequestDetails",
        "hostedUrl",
        "createdAt",
        "authorisationExpiresAt",
        "status",
    ]

    class Config:
        """Pydantic configuration"""

        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> HostedPaymentRequestResponse:
        """Create an instance of HostedPaymentRequestResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of institution_identifiers
        if self.institution_identifiers:
            _dict["institutionIdentifiers"] = self.institution_identifiers.to_dict()
        # override the default output from pydantic by calling `to_dict()` of user_settings
        if self.user_settings:
            _dict["userSettings"] = self.user_settings.to_dict()
        # override the default output from pydantic by calling `to_dict()` of payment_request_details
        if self.payment_request_details:
            _dict["paymentRequestDetails"] = self.payment_request_details.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> HostedPaymentRequestResponse:
        """Create an instance of HostedPaymentRequestResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return HostedPaymentRequestResponse.parse_obj(obj)

        _obj = HostedPaymentRequestResponse.parse_obj(
            {
                "payment_request_id": obj.get("paymentRequestId"),
                "user_id": obj.get("userId"),
                "application_user_id": obj.get("applicationUserId"),
                "application_id": obj.get("applicationId"),
                "institution_identifiers": InstitutionIdentifiersResponse.from_dict(
                    obj.get("institutionIdentifiers")
                )
                if obj.get("institutionIdentifiers") is not None
                else None,
                "user_settings": UserSettings.from_dict(obj.get("userSettings"))
                if obj.get("userSettings") is not None
                else None,
                "redirect_url": obj.get("redirectUrl"),
                "payment_request_details": HostedPaymentResponseDetails.from_dict(
                    obj.get("paymentRequestDetails")
                )
                if obj.get("paymentRequestDetails") is not None
                else None,
                "hosted_url": obj.get("hostedUrl"),
                "created_at": obj.get("createdAt"),
                "authorisation_expires_at": obj.get("authorisationExpiresAt"),
                "status": obj.get("status"),
            }
        )
        return _obj
