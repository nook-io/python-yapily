# coding: utf-8

"""
    Yapily API

    The Yapily API enables connections between your application and users' banks. For more information check out our [documentation](https://docs.yapily.com/).<br><br>In particular, make sure to view our [Getting Started](https://docs.yapily.com/pages/home/getting-started/) steps if this is your first time here.<br><br>While testing the API, our list of [sandbox credentials](https://docs.yapily.com/pages/key-concepts/sandbox-credentials/) maybe useful.  # noqa: E501

    The version of the OpenAPI document: 2.13.1
    Contact: support@yapily.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from yapily.configuration import Configuration


class VirtualAccountBeneficiaryAddress(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'address_line': 'str',
        'town_name': 'str',
        'post_code': 'str',
        'country': 'str'
    }

    attribute_map = {
        'address_line': 'addressLine',
        'town_name': 'townName',
        'post_code': 'postCode',
        'country': 'country'
    }

    def __init__(self, address_line=None, town_name=None, post_code=None, country=None, local_vars_configuration=None):  # noqa: E501
        """VirtualAccountBeneficiaryAddress - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._address_line = None
        self._town_name = None
        self._post_code = None
        self._country = None
        self.discriminator = None

        if address_line is not None:
            self.address_line = address_line
        if town_name is not None:
            self.town_name = town_name
        if post_code is not None:
            self.post_code = post_code
        self.country = country

    @property
    def address_line(self):
        """Gets the address_line of this VirtualAccountBeneficiaryAddress.  # noqa: E501


        :return: The address_line of this VirtualAccountBeneficiaryAddress.  # noqa: E501
        :rtype: str
        """
        return self._address_line

    @address_line.setter
    def address_line(self, address_line):
        """Sets the address_line of this VirtualAccountBeneficiaryAddress.


        :param address_line: The address_line of this VirtualAccountBeneficiaryAddress.  # noqa: E501
        :type: str
        """

        self._address_line = address_line

    @property
    def town_name(self):
        """Gets the town_name of this VirtualAccountBeneficiaryAddress.  # noqa: E501


        :return: The town_name of this VirtualAccountBeneficiaryAddress.  # noqa: E501
        :rtype: str
        """
        return self._town_name

    @town_name.setter
    def town_name(self, town_name):
        """Sets the town_name of this VirtualAccountBeneficiaryAddress.


        :param town_name: The town_name of this VirtualAccountBeneficiaryAddress.  # noqa: E501
        :type: str
        """

        self._town_name = town_name

    @property
    def post_code(self):
        """Gets the post_code of this VirtualAccountBeneficiaryAddress.  # noqa: E501


        :return: The post_code of this VirtualAccountBeneficiaryAddress.  # noqa: E501
        :rtype: str
        """
        return self._post_code

    @post_code.setter
    def post_code(self, post_code):
        """Sets the post_code of this VirtualAccountBeneficiaryAddress.


        :param post_code: The post_code of this VirtualAccountBeneficiaryAddress.  # noqa: E501
        :type: str
        """

        self._post_code = post_code

    @property
    def country(self):
        """Gets the country of this VirtualAccountBeneficiaryAddress.  # noqa: E501

        Two-letter ISO 3166 country code  # noqa: E501

        :return: The country of this VirtualAccountBeneficiaryAddress.  # noqa: E501
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this VirtualAccountBeneficiaryAddress.

        Two-letter ISO 3166 country code  # noqa: E501

        :param country: The country of this VirtualAccountBeneficiaryAddress.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and country is None:  # noqa: E501
            raise ValueError("Invalid value for `country`, must not be `None`")  # noqa: E501

        self._country = country

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, VirtualAccountBeneficiaryAddress):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, VirtualAccountBeneficiaryAddress):
            return True

        return self.to_dict() != other.to_dict()
