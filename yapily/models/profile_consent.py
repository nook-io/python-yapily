# coding: utf-8

"""
    Yapily API

    The Yapily API enables connections between your application and users' banks. For more information check out our [documentation](https://docs.yapily.com/).<br><br>In particular, make sure to view our [Getting Started](https://docs.yapily.com/pages/home/getting-started/) steps if this is your first time here.<br><br>While testing the API, our list of [sandbox credentials](https://docs.yapily.com/pages/key-concepts/sandbox-credentials/) maybe useful.

    The version of the OpenAPI document: 2.13.1
    Contact: support@yapily.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Optional
from pydantic import BaseModel, Field, StrictStr

class ProfileConsent(BaseModel):
    """
    Object returned when creating a User Profile.  # noqa: E501
    """
    id: Optional[StrictStr] = Field(None, description="The id of the ProfileConsent")
    status: Optional[StrictStr] = Field(None, description="The status, can be PENDING, COMPLETED or ERROR.")
    user_id: Optional[StrictStr] = Field(None, alias="userId", description="The userUuid.")
    reference_consent_id: Optional[StrictStr] = Field(None, alias="referenceConsentId", description="The referenceConsentId.")
    institution_id: Optional[StrictStr] = Field(None, alias="institutionId", description="The id of the Institution.")
    created_at: Optional[datetime] = Field(None, alias="createdAt", description="When a profile consent is created.")
    expires_at: Optional[datetime] = Field(None, alias="expiresAt", description="When a profile consent is expired after created + X.")
    data_inserted_at: Optional[datetime] = Field(None, alias="dataInsertedAt", description="After data retrieval from aggregated profile consent is completed.")
    __properties = ["id", "status", "userId", "referenceConsentId", "institutionId", "createdAt", "expiresAt", "dataInsertedAt"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ProfileConsent:
        """Create an instance of ProfileConsent from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ProfileConsent:
        """Create an instance of ProfileConsent from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ProfileConsent.parse_obj(obj)

        _obj = ProfileConsent.parse_obj({
            "id": obj.get("id"),
            "status": obj.get("status"),
            "user_id": obj.get("userId"),
            "reference_consent_id": obj.get("referenceConsentId"),
            "institution_id": obj.get("institutionId"),
            "created_at": obj.get("createdAt"),
            "expires_at": obj.get("expiresAt"),
            "data_inserted_at": obj.get("dataInsertedAt")
        })
        return _obj


