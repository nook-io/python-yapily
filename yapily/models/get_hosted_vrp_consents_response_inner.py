# coding: utf-8

"""
Yapily API

The Yapily API enables connections between your application and users' banks. For more information check out our [documentation](https://docs.yapily.com/).<br><br>In particular, make sure to view our [Getting Started](https://docs.yapily.com/pages/home/getting-started/) steps if this is your first time here.<br><br>While testing the API, our list of [sandbox credentials](https://docs.yapily.com/pages/key-concepts/sandbox-credentials/) maybe useful.

The version of the OpenAPI document: 7.2.0
Contact: support@yapily.com
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from yapily.models.institution_identifiers import InstitutionIdentifiers
from yapily.models.vrp_setup_request import VRPSetupRequest
from typing import Set
from typing_extensions import Self


class GetHostedVRPConsentsResponseInner(BaseModel):
    """
    GetHostedVRPConsentsResponseInner
    """  # noqa: E501

    id: StrictStr = Field(
        description="Represents the Unique Id of the VRP consent request"
    )
    application_id: StrictStr = Field(
        description="Represents the Unique Id of the `Application` the user is associated with.",
        alias="applicationId",
    )
    institution_identifiers: Optional[InstitutionIdentifiers] = Field(
        default=None, alias="institutionIdentifiers"
    )
    vrp_setup: Optional[VRPSetupRequest] = Field(default=None, alias="vrpSetup")
    updated_at: Optional[datetime] = Field(
        default=None,
        description="Represents the date and time at which the Consent was updated.",
        alias="updatedAt",
    )
    consent_status: Optional[StrictStr] = Field(
        default=None,
        description="Current status of the authorisation. Can be one of [AWAITING_AUTHORIZATION, AUTHORIZED, REJECTED, REVOKED, FAILED, EXPIRED]",
        alias="consentStatus",
    )
    __properties: ClassVar[List[str]] = [
        "id",
        "applicationId",
        "institutionIdentifiers",
        "vrpSetup",
        "updatedAt",
        "consentStatus",
    ]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GetHostedVRPConsentsResponseInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of institution_identifiers
        if self.institution_identifiers:
            _dict["institutionIdentifiers"] = self.institution_identifiers.to_dict()
        # override the default output from pydantic by calling `to_dict()` of vrp_setup
        if self.vrp_setup:
            _dict["vrpSetup"] = self.vrp_setup.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GetHostedVRPConsentsResponseInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "id": obj.get("id"),
                "applicationId": obj.get("applicationId"),
                "institutionIdentifiers": InstitutionIdentifiers.from_dict(
                    obj["institutionIdentifiers"]
                )
                if obj.get("institutionIdentifiers") is not None
                else None,
                "vrpSetup": VRPSetupRequest.from_dict(obj["vrpSetup"])
                if obj.get("vrpSetup") is not None
                else None,
                "updatedAt": obj.get("updatedAt"),
                "consentStatus": obj.get("consentStatus"),
            }
        )
        return _obj
