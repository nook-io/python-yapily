# coding: utf-8

"""
    Yapily API

    The Yapily API enables connections between your application and users' banks. For more information check out our [documentation](https://docs.yapily.com/).<br><br>In particular, make sure to view our [Getting Started](https://docs.yapily.com/pages/home/getting-started/) steps if this is your first time here.<br><br>While testing the API, our list of [sandbox credentials](https://docs.yapily.com/pages/key-concepts/sandbox-credentials/) maybe useful.

    The version of the OpenAPI document: 2.25.0
    Contact: support@yapily.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import List, Optional
from pydantic import BaseModel, Field, StrictStr, conlist
from yapily.models.institution_consent import InstitutionConsent

class ApplicationUser(BaseModel):
    """
    Information about a user of an application.  # noqa: E501
    """
    uuid: Optional[StrictStr] = Field(None, description="A unique identifier for the 'User' assigned by Yapily.")
    application_uuid: Optional[StrictStr] = Field(None, alias="applicationUuid", description="Unique identifier of the application the user is associated with.")
    application_user_id: Optional[StrictStr] = Field(None, alias="applicationUserId", description="__Conditional__. The user-friendly reference to the `User`.")
    reference_id: Optional[StrictStr] = Field(None, alias="referenceId")
    created_at: Optional[datetime] = Field(None, alias="createdAt", description="Date and time of when the user was created.")
    institution_consents: Optional[conlist(InstitutionConsent)] = Field(None, alias="institutionConsents")
    __properties = ["uuid", "applicationUuid", "applicationUserId", "referenceId", "createdAt", "institutionConsents"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ApplicationUser:
        """Create an instance of ApplicationUser from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in institution_consents (list)
        _items = []
        if self.institution_consents:
            for _item in self.institution_consents:
                if _item:
                    _items.append(_item.to_dict())
            _dict['institutionConsents'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ApplicationUser:
        """Create an instance of ApplicationUser from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ApplicationUser.parse_obj(obj)

        _obj = ApplicationUser.parse_obj({
            "uuid": obj.get("uuid"),
            "application_uuid": obj.get("applicationUuid"),
            "application_user_id": obj.get("applicationUserId"),
            "reference_id": obj.get("referenceId"),
            "created_at": obj.get("createdAt"),
            "institution_consents": [InstitutionConsent.from_dict(_item) for _item in obj.get("institutionConsents")] if obj.get("institutionConsents") is not None else None
        })
        return _obj


