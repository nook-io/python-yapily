# coding: utf-8

"""
    Yapily API

    The Yapily API enables connections between your application and users' banks. For more information check out our [documentation](https://docs.yapily.com/).<br><br>In particular, make sure to view our [Getting Started](https://docs.yapily.com/pages/home/getting-started/) steps if this is your first time here.<br><br>While testing the API, our list of [sandbox credentials](https://docs.yapily.com/pages/key-concepts/sandbox-credentials/) maybe useful.  # noqa: E501

    The version of the OpenAPI document: 2.13.1
    Contact: support@yapily.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from yapily.configuration import Configuration


class EnrichedWrapper(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'income_streams': 'list[TransactionStream]',
        'expenditure_streams': 'list[TransactionStream]',
        'recently_terminated_income_streams': 'list[TerminatedTransactionStream]',
        'recently_terminated_expenditure_streams': 'list[TerminatedTransactionStream]'
    }

    attribute_map = {
        'income_streams': 'incomeStreams',
        'expenditure_streams': 'expenditureStreams',
        'recently_terminated_income_streams': 'recentlyTerminatedIncomeStreams',
        'recently_terminated_expenditure_streams': 'recentlyTerminatedExpenditureStreams'
    }

    def __init__(self, income_streams=None, expenditure_streams=None, recently_terminated_income_streams=None, recently_terminated_expenditure_streams=None, local_vars_configuration=None):  # noqa: E501
        """EnrichedWrapper - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._income_streams = None
        self._expenditure_streams = None
        self._recently_terminated_income_streams = None
        self._recently_terminated_expenditure_streams = None
        self.discriminator = None

        self.income_streams = income_streams
        self.expenditure_streams = expenditure_streams
        self.recently_terminated_income_streams = recently_terminated_income_streams
        self.recently_terminated_expenditure_streams = recently_terminated_expenditure_streams

    @property
    def income_streams(self):
        """Gets the income_streams of this EnrichedWrapper.  # noqa: E501

        A list of transaction streams  # noqa: E501

        :return: The income_streams of this EnrichedWrapper.  # noqa: E501
        :rtype: list[TransactionStream]
        """
        return self._income_streams

    @income_streams.setter
    def income_streams(self, income_streams):
        """Sets the income_streams of this EnrichedWrapper.

        A list of transaction streams  # noqa: E501

        :param income_streams: The income_streams of this EnrichedWrapper.  # noqa: E501
        :type: list[TransactionStream]
        """
        if self.local_vars_configuration.client_side_validation and income_streams is None:  # noqa: E501
            raise ValueError("Invalid value for `income_streams`, must not be `None`")  # noqa: E501

        self._income_streams = income_streams

    @property
    def expenditure_streams(self):
        """Gets the expenditure_streams of this EnrichedWrapper.  # noqa: E501

        A list of transaction streams  # noqa: E501

        :return: The expenditure_streams of this EnrichedWrapper.  # noqa: E501
        :rtype: list[TransactionStream]
        """
        return self._expenditure_streams

    @expenditure_streams.setter
    def expenditure_streams(self, expenditure_streams):
        """Sets the expenditure_streams of this EnrichedWrapper.

        A list of transaction streams  # noqa: E501

        :param expenditure_streams: The expenditure_streams of this EnrichedWrapper.  # noqa: E501
        :type: list[TransactionStream]
        """
        if self.local_vars_configuration.client_side_validation and expenditure_streams is None:  # noqa: E501
            raise ValueError("Invalid value for `expenditure_streams`, must not be `None`")  # noqa: E501

        self._expenditure_streams = expenditure_streams

    @property
    def recently_terminated_income_streams(self):
        """Gets the recently_terminated_income_streams of this EnrichedWrapper.  # noqa: E501

        A list of terminated transaction income streams  # noqa: E501

        :return: The recently_terminated_income_streams of this EnrichedWrapper.  # noqa: E501
        :rtype: list[TerminatedTransactionStream]
        """
        return self._recently_terminated_income_streams

    @recently_terminated_income_streams.setter
    def recently_terminated_income_streams(self, recently_terminated_income_streams):
        """Sets the recently_terminated_income_streams of this EnrichedWrapper.

        A list of terminated transaction income streams  # noqa: E501

        :param recently_terminated_income_streams: The recently_terminated_income_streams of this EnrichedWrapper.  # noqa: E501
        :type: list[TerminatedTransactionStream]
        """
        if self.local_vars_configuration.client_side_validation and recently_terminated_income_streams is None:  # noqa: E501
            raise ValueError("Invalid value for `recently_terminated_income_streams`, must not be `None`")  # noqa: E501

        self._recently_terminated_income_streams = recently_terminated_income_streams

    @property
    def recently_terminated_expenditure_streams(self):
        """Gets the recently_terminated_expenditure_streams of this EnrichedWrapper.  # noqa: E501

        A list of terminated transaction expenditure streams  # noqa: E501

        :return: The recently_terminated_expenditure_streams of this EnrichedWrapper.  # noqa: E501
        :rtype: list[TerminatedTransactionStream]
        """
        return self._recently_terminated_expenditure_streams

    @recently_terminated_expenditure_streams.setter
    def recently_terminated_expenditure_streams(self, recently_terminated_expenditure_streams):
        """Sets the recently_terminated_expenditure_streams of this EnrichedWrapper.

        A list of terminated transaction expenditure streams  # noqa: E501

        :param recently_terminated_expenditure_streams: The recently_terminated_expenditure_streams of this EnrichedWrapper.  # noqa: E501
        :type: list[TerminatedTransactionStream]
        """
        if self.local_vars_configuration.client_side_validation and recently_terminated_expenditure_streams is None:  # noqa: E501
            raise ValueError("Invalid value for `recently_terminated_expenditure_streams`, must not be `None`")  # noqa: E501

        self._recently_terminated_expenditure_streams = recently_terminated_expenditure_streams

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EnrichedWrapper):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, EnrichedWrapper):
            return True

        return self.to_dict() != other.to_dict()
