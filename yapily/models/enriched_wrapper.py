# coding: utf-8

"""
    Yapily API

    The Yapily API enables connections between your application and users' banks. For more information check out our [documentation](https://docs.yapily.com/).<br><br>In particular, make sure to view our [Getting Started](https://docs.yapily.com/pages/home/getting-started/) steps if this is your first time here.<br><br>While testing the API, our list of [sandbox credentials](https://docs.yapily.com/pages/key-concepts/sandbox-credentials/) maybe useful.

    The version of the OpenAPI document: 2.13.1
    Contact: support@yapily.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List
from pydantic import BaseModel, Field, conlist
from yapily.models.terminated_transaction_stream import TerminatedTransactionStream
from yapily.models.transaction_stream import TransactionStream

class EnrichedWrapper(BaseModel):
    """
    A financial profile for a User.  # noqa: E501
    """
    income_streams: conlist(TransactionStream) = Field(..., alias="incomeStreams", description="A list of transaction streams")
    expenditure_streams: conlist(TransactionStream) = Field(..., alias="expenditureStreams", description="A list of transaction streams")
    recently_terminated_income_streams: conlist(TerminatedTransactionStream) = Field(..., alias="recentlyTerminatedIncomeStreams", description="A list of terminated transaction income streams")
    recently_terminated_expenditure_streams: conlist(TerminatedTransactionStream) = Field(..., alias="recentlyTerminatedExpenditureStreams", description="A list of terminated transaction expenditure streams")
    __properties = ["incomeStreams", "expenditureStreams", "recentlyTerminatedIncomeStreams", "recentlyTerminatedExpenditureStreams"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> EnrichedWrapper:
        """Create an instance of EnrichedWrapper from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in income_streams (list)
        _items = []
        if self.income_streams:
            for _item in self.income_streams:
                if _item:
                    _items.append(_item.to_dict())
            _dict['incomeStreams'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in expenditure_streams (list)
        _items = []
        if self.expenditure_streams:
            for _item in self.expenditure_streams:
                if _item:
                    _items.append(_item.to_dict())
            _dict['expenditureStreams'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in recently_terminated_income_streams (list)
        _items = []
        if self.recently_terminated_income_streams:
            for _item in self.recently_terminated_income_streams:
                if _item:
                    _items.append(_item.to_dict())
            _dict['recentlyTerminatedIncomeStreams'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in recently_terminated_expenditure_streams (list)
        _items = []
        if self.recently_terminated_expenditure_streams:
            for _item in self.recently_terminated_expenditure_streams:
                if _item:
                    _items.append(_item.to_dict())
            _dict['recentlyTerminatedExpenditureStreams'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> EnrichedWrapper:
        """Create an instance of EnrichedWrapper from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return EnrichedWrapper.parse_obj(obj)

        _obj = EnrichedWrapper.parse_obj({
            "income_streams": [TransactionStream.from_dict(_item) for _item in obj.get("incomeStreams")] if obj.get("incomeStreams") is not None else None,
            "expenditure_streams": [TransactionStream.from_dict(_item) for _item in obj.get("expenditureStreams")] if obj.get("expenditureStreams") is not None else None,
            "recently_terminated_income_streams": [TerminatedTransactionStream.from_dict(_item) for _item in obj.get("recentlyTerminatedIncomeStreams")] if obj.get("recentlyTerminatedIncomeStreams") is not None else None,
            "recently_terminated_expenditure_streams": [TerminatedTransactionStream.from_dict(_item) for _item in obj.get("recentlyTerminatedExpenditureStreams")] if obj.get("recentlyTerminatedExpenditureStreams") is not None else None
        })
        return _obj


