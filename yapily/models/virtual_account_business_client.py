# coding: utf-8

"""
    Yapily API

    The Yapily API enables connections between your application and users' banks. For more information check out our [documentation](https://docs.yapily.com/).<br><br>In particular, make sure to view our [Getting Started](https://docs.yapily.com/pages/home/getting-started/) steps if this is your first time here.<br><br>While testing the API, our list of [sandbox credentials](https://docs.yapily.com/pages/key-concepts/sandbox-credentials/) maybe useful.  # noqa: E501

    The version of the OpenAPI document: 2.13.1
    Contact: support@yapily.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from yapily.configuration import Configuration


class VirtualAccountBusinessClient(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'name': 'str',
        'type': 'VirtualAccountClientBusinessType',
        'registration_number': 'str',
        'registered_address': 'VirtualAccountAddress',
        'trading_address': 'VirtualAccountAddress',
        'contact_name': 'str',
        'email': 'str',
        'phone': 'str'
    }

    attribute_map = {
        'name': 'name',
        'type': 'type',
        'registration_number': 'registrationNumber',
        'registered_address': 'registeredAddress',
        'trading_address': 'tradingAddress',
        'contact_name': 'contactName',
        'email': 'email',
        'phone': 'phone'
    }

    def __init__(self, name=None, type=None, registration_number=None, registered_address=None, trading_address=None, contact_name=None, email=None, phone=None, local_vars_configuration=None):  # noqa: E501
        """VirtualAccountBusinessClient - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._name = None
        self._type = None
        self._registration_number = None
        self._registered_address = None
        self._trading_address = None
        self._contact_name = None
        self._email = None
        self._phone = None
        self.discriminator = None

        self.name = name
        self.type = type
        self.registration_number = registration_number
        self.registered_address = registered_address
        if trading_address is not None:
            self.trading_address = trading_address
        self.contact_name = contact_name
        self.email = email
        self.phone = phone

    @property
    def name(self):
        """Gets the name of this VirtualAccountBusinessClient.  # noqa: E501


        :return: The name of this VirtualAccountBusinessClient.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this VirtualAccountBusinessClient.


        :param name: The name of this VirtualAccountBusinessClient.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and name is None:  # noqa: E501
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def type(self):
        """Gets the type of this VirtualAccountBusinessClient.  # noqa: E501


        :return: The type of this VirtualAccountBusinessClient.  # noqa: E501
        :rtype: VirtualAccountClientBusinessType
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this VirtualAccountBusinessClient.


        :param type: The type of this VirtualAccountBusinessClient.  # noqa: E501
        :type: VirtualAccountClientBusinessType
        """
        if self.local_vars_configuration.client_side_validation and type is None:  # noqa: E501
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type

    @property
    def registration_number(self):
        """Gets the registration_number of this VirtualAccountBusinessClient.  # noqa: E501


        :return: The registration_number of this VirtualAccountBusinessClient.  # noqa: E501
        :rtype: str
        """
        return self._registration_number

    @registration_number.setter
    def registration_number(self, registration_number):
        """Sets the registration_number of this VirtualAccountBusinessClient.


        :param registration_number: The registration_number of this VirtualAccountBusinessClient.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and registration_number is None:  # noqa: E501
            raise ValueError("Invalid value for `registration_number`, must not be `None`")  # noqa: E501

        self._registration_number = registration_number

    @property
    def registered_address(self):
        """Gets the registered_address of this VirtualAccountBusinessClient.  # noqa: E501


        :return: The registered_address of this VirtualAccountBusinessClient.  # noqa: E501
        :rtype: VirtualAccountAddress
        """
        return self._registered_address

    @registered_address.setter
    def registered_address(self, registered_address):
        """Sets the registered_address of this VirtualAccountBusinessClient.


        :param registered_address: The registered_address of this VirtualAccountBusinessClient.  # noqa: E501
        :type: VirtualAccountAddress
        """
        if self.local_vars_configuration.client_side_validation and registered_address is None:  # noqa: E501
            raise ValueError("Invalid value for `registered_address`, must not be `None`")  # noqa: E501

        self._registered_address = registered_address

    @property
    def trading_address(self):
        """Gets the trading_address of this VirtualAccountBusinessClient.  # noqa: E501


        :return: The trading_address of this VirtualAccountBusinessClient.  # noqa: E501
        :rtype: VirtualAccountAddress
        """
        return self._trading_address

    @trading_address.setter
    def trading_address(self, trading_address):
        """Sets the trading_address of this VirtualAccountBusinessClient.


        :param trading_address: The trading_address of this VirtualAccountBusinessClient.  # noqa: E501
        :type: VirtualAccountAddress
        """

        self._trading_address = trading_address

    @property
    def contact_name(self):
        """Gets the contact_name of this VirtualAccountBusinessClient.  # noqa: E501


        :return: The contact_name of this VirtualAccountBusinessClient.  # noqa: E501
        :rtype: str
        """
        return self._contact_name

    @contact_name.setter
    def contact_name(self, contact_name):
        """Sets the contact_name of this VirtualAccountBusinessClient.


        :param contact_name: The contact_name of this VirtualAccountBusinessClient.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and contact_name is None:  # noqa: E501
            raise ValueError("Invalid value for `contact_name`, must not be `None`")  # noqa: E501

        self._contact_name = contact_name

    @property
    def email(self):
        """Gets the email of this VirtualAccountBusinessClient.  # noqa: E501


        :return: The email of this VirtualAccountBusinessClient.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this VirtualAccountBusinessClient.


        :param email: The email of this VirtualAccountBusinessClient.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and email is None:  # noqa: E501
            raise ValueError("Invalid value for `email`, must not be `None`")  # noqa: E501

        self._email = email

    @property
    def phone(self):
        """Gets the phone of this VirtualAccountBusinessClient.  # noqa: E501


        :return: The phone of this VirtualAccountBusinessClient.  # noqa: E501
        :rtype: str
        """
        return self._phone

    @phone.setter
    def phone(self, phone):
        """Sets the phone of this VirtualAccountBusinessClient.


        :param phone: The phone of this VirtualAccountBusinessClient.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and phone is None:  # noqa: E501
            raise ValueError("Invalid value for `phone`, must not be `None`")  # noqa: E501

        self._phone = phone

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, VirtualAccountBusinessClient):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, VirtualAccountBusinessClient):
            return True

        return self.to_dict() != other.to_dict()
