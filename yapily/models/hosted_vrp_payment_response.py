# coding: utf-8

"""
Yapily API

The Yapily API enables connections between your application and users' banks. For more information check out our [documentation](https://docs.yapily.com/).<br><br>In particular, make sure to view our [Getting Started](https://docs.yapily.com/pages/home/getting-started/) steps if this is your first time here.<br><br>While testing the API, our list of [sandbox credentials](https://docs.yapily.com/pages/key-concepts/sandbox-credentials/) maybe useful.

The version of the OpenAPI document: 7.2.0
Contact: support@yapily.com
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from yapily.models.amount import Amount
from yapily.models.hosted_payment_status_details import HostedPaymentStatusDetails
from yapily.models.hosted_vrp_payer_response import HostedVrpPayerResponse
from yapily.models.hosted_vrp_refund_account import HostedVrpRefundAccount
from yapily.models.payee import Payee
from yapily.models.payment_risk import PaymentRisk
from typing import Set
from typing_extensions import Self


class HostedVRPPaymentResponse(BaseModel):
    """
    HostedVRPPaymentResponse
    """  # noqa: E501

    id: Optional[StrictStr] = None
    payment_idempotency_id: Optional[StrictStr] = Field(
        default=None, alias="paymentIdempotencyId"
    )
    amount: Optional[Amount] = None
    reference: Optional[StrictStr] = Field(
        default=None,
        description="__Optional__. The payment reference or description. Limited to a maximum of 18 characters long.",
    )
    payee: Optional[Payee] = None
    payer: Optional[HostedVrpPayerResponse] = None
    refund_account: Optional[HostedVrpRefundAccount] = Field(
        default=None, alias="refundAccount"
    )
    risk: Optional[PaymentRisk] = None
    payment_lifecycle_id: Optional[StrictStr] = Field(
        default=None,
        description="The Unique Identifier provided by TPP in the Payment request to identify the payment.",
        alias="paymentLifecycleId",
    )
    expected_execution_time: Optional[datetime] = Field(
        default=None, alias="expectedExecutionTime"
    )
    expected_settlement_time: Optional[datetime] = Field(
        default=None, alias="expectedSettlementTime"
    )
    institution_payment_id: Optional[StrictStr] = Field(
        default=None, alias="institutionPaymentId"
    )
    status_details: Optional[HostedPaymentStatusDetails] = Field(
        default=None, alias="statusDetails"
    )
    __properties: ClassVar[List[str]] = [
        "id",
        "paymentIdempotencyId",
        "amount",
        "reference",
        "payee",
        "payer",
        "refundAccount",
        "risk",
        "paymentLifecycleId",
        "expectedExecutionTime",
        "expectedSettlementTime",
        "institutionPaymentId",
        "statusDetails",
    ]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of HostedVRPPaymentResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of amount
        if self.amount:
            _dict["amount"] = self.amount.to_dict()
        # override the default output from pydantic by calling `to_dict()` of payee
        if self.payee:
            _dict["payee"] = self.payee.to_dict()
        # override the default output from pydantic by calling `to_dict()` of payer
        if self.payer:
            _dict["payer"] = self.payer.to_dict()
        # override the default output from pydantic by calling `to_dict()` of refund_account
        if self.refund_account:
            _dict["refundAccount"] = self.refund_account.to_dict()
        # override the default output from pydantic by calling `to_dict()` of risk
        if self.risk:
            _dict["risk"] = self.risk.to_dict()
        # override the default output from pydantic by calling `to_dict()` of status_details
        if self.status_details:
            _dict["statusDetails"] = self.status_details.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of HostedVRPPaymentResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "id": obj.get("id"),
                "paymentIdempotencyId": obj.get("paymentIdempotencyId"),
                "amount": Amount.from_dict(obj["amount"])
                if obj.get("amount") is not None
                else None,
                "reference": obj.get("reference"),
                "payee": Payee.from_dict(obj["payee"])
                if obj.get("payee") is not None
                else None,
                "payer": HostedVrpPayerResponse.from_dict(obj["payer"])
                if obj.get("payer") is not None
                else None,
                "refundAccount": HostedVrpRefundAccount.from_dict(obj["refundAccount"])
                if obj.get("refundAccount") is not None
                else None,
                "risk": PaymentRisk.from_dict(obj["risk"])
                if obj.get("risk") is not None
                else None,
                "paymentLifecycleId": obj.get("paymentLifecycleId"),
                "expectedExecutionTime": obj.get("expectedExecutionTime"),
                "expectedSettlementTime": obj.get("expectedSettlementTime"),
                "institutionPaymentId": obj.get("institutionPaymentId"),
                "statusDetails": HostedPaymentStatusDetails.from_dict(
                    obj["statusDetails"]
                )
                if obj.get("statusDetails") is not None
                else None,
            }
        )
        return _obj
