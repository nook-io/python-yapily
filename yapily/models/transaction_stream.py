# coding: utf-8

"""
    Yapily API

    The Yapily API enables connections between your application and users' banks. For more information check out our [documentation](https://docs.yapily.com/).<br><br>In particular, make sure to view our [Getting Started](https://docs.yapily.com/#getting-started) steps if this is your first time here.<br><br>While testing the API, our list of [sandbox credentials](https://docs.yapily.com/guides/applications/institutions/sandbox/) maybe useful.  # noqa: E501

    The version of the OpenAPI document: 2.1.0
    Contact: support@yapily.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from yapily.configuration import Configuration


class TransactionStream(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'name': 'str',
        'transactions': 'list[EnrichedTransaction]',
        'transaction_schedule': 'TransactionSchedule',
        'schedule_consistency_score': 'float',
        'next_expected_transaction_date': 'date',
        'earliest_transaction_date': 'date',
        'most_recent_transaction_date': 'date',
        'amount_consistency_score': 'float',
        'average_amount': 'float'
    }

    attribute_map = {
        'name': 'name',
        'transactions': 'transactions',
        'transaction_schedule': 'transactionSchedule',
        'schedule_consistency_score': 'scheduleConsistencyScore',
        'next_expected_transaction_date': 'nextExpectedTransactionDate',
        'earliest_transaction_date': 'earliestTransactionDate',
        'most_recent_transaction_date': 'mostRecentTransactionDate',
        'amount_consistency_score': 'amountConsistencyScore',
        'average_amount': 'averageAmount'
    }

    def __init__(self, name=None, transactions=None, transaction_schedule=None, schedule_consistency_score=None, next_expected_transaction_date=None, earliest_transaction_date=None, most_recent_transaction_date=None, amount_consistency_score=None, average_amount=None, local_vars_configuration=None):  # noqa: E501
        """TransactionStream - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._name = None
        self._transactions = None
        self._transaction_schedule = None
        self._schedule_consistency_score = None
        self._next_expected_transaction_date = None
        self._earliest_transaction_date = None
        self._most_recent_transaction_date = None
        self._amount_consistency_score = None
        self._average_amount = None
        self.discriminator = None

        if name is not None:
            self.name = name
        if transactions is not None:
            self.transactions = transactions
        if transaction_schedule is not None:
            self.transaction_schedule = transaction_schedule
        if schedule_consistency_score is not None:
            self.schedule_consistency_score = schedule_consistency_score
        if next_expected_transaction_date is not None:
            self.next_expected_transaction_date = next_expected_transaction_date
        if earliest_transaction_date is not None:
            self.earliest_transaction_date = earliest_transaction_date
        if most_recent_transaction_date is not None:
            self.most_recent_transaction_date = most_recent_transaction_date
        if amount_consistency_score is not None:
            self.amount_consistency_score = amount_consistency_score
        if average_amount is not None:
            self.average_amount = average_amount

    @property
    def name(self):
        """Gets the name of this TransactionStream.  # noqa: E501

        The name of the TransactionStream  # noqa: E501

        :return: The name of this TransactionStream.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this TransactionStream.

        The name of the TransactionStream  # noqa: E501

        :param name: The name of this TransactionStream.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def transactions(self):
        """Gets the transactions of this TransactionStream.  # noqa: E501

        A list of Transactions from the transaction stream.  # noqa: E501

        :return: The transactions of this TransactionStream.  # noqa: E501
        :rtype: list[EnrichedTransaction]
        """
        return self._transactions

    @transactions.setter
    def transactions(self, transactions):
        """Sets the transactions of this TransactionStream.

        A list of Transactions from the transaction stream.  # noqa: E501

        :param transactions: The transactions of this TransactionStream.  # noqa: E501
        :type: list[EnrichedTransaction]
        """

        self._transactions = transactions

    @property
    def transaction_schedule(self):
        """Gets the transaction_schedule of this TransactionStream.  # noqa: E501


        :return: The transaction_schedule of this TransactionStream.  # noqa: E501
        :rtype: TransactionSchedule
        """
        return self._transaction_schedule

    @transaction_schedule.setter
    def transaction_schedule(self, transaction_schedule):
        """Sets the transaction_schedule of this TransactionStream.


        :param transaction_schedule: The transaction_schedule of this TransactionStream.  # noqa: E501
        :type: TransactionSchedule
        """

        self._transaction_schedule = transaction_schedule

    @property
    def schedule_consistency_score(self):
        """Gets the schedule_consistency_score of this TransactionStream.  # noqa: E501

        The consistency of the transaction.  This is a number between 0 and 1 with 1 being the most consistent schedule.  # noqa: E501

        :return: The schedule_consistency_score of this TransactionStream.  # noqa: E501
        :rtype: float
        """
        return self._schedule_consistency_score

    @schedule_consistency_score.setter
    def schedule_consistency_score(self, schedule_consistency_score):
        """Sets the schedule_consistency_score of this TransactionStream.

        The consistency of the transaction.  This is a number between 0 and 1 with 1 being the most consistent schedule.  # noqa: E501

        :param schedule_consistency_score: The schedule_consistency_score of this TransactionStream.  # noqa: E501
        :type: float
        """

        self._schedule_consistency_score = schedule_consistency_score

    @property
    def next_expected_transaction_date(self):
        """Gets the next_expected_transaction_date of this TransactionStream.  # noqa: E501

        When is the transaction expected to occur next.  # noqa: E501

        :return: The next_expected_transaction_date of this TransactionStream.  # noqa: E501
        :rtype: date
        """
        return self._next_expected_transaction_date

    @next_expected_transaction_date.setter
    def next_expected_transaction_date(self, next_expected_transaction_date):
        """Sets the next_expected_transaction_date of this TransactionStream.

        When is the transaction expected to occur next.  # noqa: E501

        :param next_expected_transaction_date: The next_expected_transaction_date of this TransactionStream.  # noqa: E501
        :type: date
        """

        self._next_expected_transaction_date = next_expected_transaction_date

    @property
    def earliest_transaction_date(self):
        """Gets the earliest_transaction_date of this TransactionStream.  # noqa: E501

        When is the first recorded transaction date  # noqa: E501

        :return: The earliest_transaction_date of this TransactionStream.  # noqa: E501
        :rtype: date
        """
        return self._earliest_transaction_date

    @earliest_transaction_date.setter
    def earliest_transaction_date(self, earliest_transaction_date):
        """Sets the earliest_transaction_date of this TransactionStream.

        When is the first recorded transaction date  # noqa: E501

        :param earliest_transaction_date: The earliest_transaction_date of this TransactionStream.  # noqa: E501
        :type: date
        """

        self._earliest_transaction_date = earliest_transaction_date

    @property
    def most_recent_transaction_date(self):
        """Gets the most_recent_transaction_date of this TransactionStream.  # noqa: E501

        When is the most recent transaction date  # noqa: E501

        :return: The most_recent_transaction_date of this TransactionStream.  # noqa: E501
        :rtype: date
        """
        return self._most_recent_transaction_date

    @most_recent_transaction_date.setter
    def most_recent_transaction_date(self, most_recent_transaction_date):
        """Sets the most_recent_transaction_date of this TransactionStream.

        When is the most recent transaction date  # noqa: E501

        :param most_recent_transaction_date: The most_recent_transaction_date of this TransactionStream.  # noqa: E501
        :type: date
        """

        self._most_recent_transaction_date = most_recent_transaction_date

    @property
    def amount_consistency_score(self):
        """Gets the amount_consistency_score of this TransactionStream.  # noqa: E501

        The consistency of the amount of the transaction.  This is a number between 0 and 1 with 1 being the most consistent amount.  # noqa: E501

        :return: The amount_consistency_score of this TransactionStream.  # noqa: E501
        :rtype: float
        """
        return self._amount_consistency_score

    @amount_consistency_score.setter
    def amount_consistency_score(self, amount_consistency_score):
        """Sets the amount_consistency_score of this TransactionStream.

        The consistency of the amount of the transaction.  This is a number between 0 and 1 with 1 being the most consistent amount.  # noqa: E501

        :param amount_consistency_score: The amount_consistency_score of this TransactionStream.  # noqa: E501
        :type: float
        """

        self._amount_consistency_score = amount_consistency_score

    @property
    def average_amount(self):
        """Gets the average_amount of this TransactionStream.  # noqa: E501

        The average amount of the transaction stream  # noqa: E501

        :return: The average_amount of this TransactionStream.  # noqa: E501
        :rtype: float
        """
        return self._average_amount

    @average_amount.setter
    def average_amount(self, average_amount):
        """Sets the average_amount of this TransactionStream.

        The average amount of the transaction stream  # noqa: E501

        :param average_amount: The average_amount of this TransactionStream.  # noqa: E501
        :type: float
        """

        self._average_amount = average_amount

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TransactionStream):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, TransactionStream):
            return True

        return self.to_dict() != other.to_dict()
