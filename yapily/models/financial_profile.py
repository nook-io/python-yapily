# coding: utf-8

"""
    Yapily API

    The Yapily API enables connections between your application and users' banks. For more information check out our [documentation](https://docs.yapily.com/).<br><br>In particular, make sure to view our [Getting Started](https://docs.yapily.com/#getting-started) steps if this is your first time here.<br><br>While testing the API, our list of [sandbox credentials](https://docs.yapily.com/guides/applications/institutions/sandbox/) maybe useful.  # noqa: E501

    The version of the OpenAPI document: 2.1.0
    Contact: support@yapily.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from yapily.configuration import Configuration


class FinancialProfile(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'status': 'str',
        'profile_consents': 'list[ProfileConsent]',
        'enrichment': 'EnrichedWrapper'
    }

    attribute_map = {
        'status': 'status',
        'profile_consents': 'profileConsents',
        'enrichment': 'enrichment'
    }

    def __init__(self, status=None, profile_consents=None, enrichment=None, local_vars_configuration=None):  # noqa: E501
        """FinancialProfile - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._status = None
        self._profile_consents = None
        self._enrichment = None
        self.discriminator = None

        if status is not None:
            self.status = status
        if profile_consents is not None:
            self.profile_consents = profile_consents
        if enrichment is not None:
            self.enrichment = enrichment

    @property
    def status(self):
        """Gets the status of this FinancialProfile.  # noqa: E501

        The status, can be EMPTY, PARTIAL, PENDING, COMPLETED or ERROR.  # noqa: E501

        :return: The status of this FinancialProfile.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this FinancialProfile.

        The status, can be EMPTY, PARTIAL, PENDING, COMPLETED or ERROR.  # noqa: E501

        :param status: The status of this FinancialProfile.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def profile_consents(self):
        """Gets the profile_consents of this FinancialProfile.  # noqa: E501

        A list of ProfileConsent used in the financial profile.  # noqa: E501

        :return: The profile_consents of this FinancialProfile.  # noqa: E501
        :rtype: list[ProfileConsent]
        """
        return self._profile_consents

    @profile_consents.setter
    def profile_consents(self, profile_consents):
        """Sets the profile_consents of this FinancialProfile.

        A list of ProfileConsent used in the financial profile.  # noqa: E501

        :param profile_consents: The profile_consents of this FinancialProfile.  # noqa: E501
        :type: list[ProfileConsent]
        """

        self._profile_consents = profile_consents

    @property
    def enrichment(self):
        """Gets the enrichment of this FinancialProfile.  # noqa: E501


        :return: The enrichment of this FinancialProfile.  # noqa: E501
        :rtype: EnrichedWrapper
        """
        return self._enrichment

    @enrichment.setter
    def enrichment(self, enrichment):
        """Sets the enrichment of this FinancialProfile.


        :param enrichment: The enrichment of this FinancialProfile.  # noqa: E501
        :type: EnrichedWrapper
        """

        self._enrichment = enrichment

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FinancialProfile):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, FinancialProfile):
            return True

        return self.to_dict() != other.to_dict()
