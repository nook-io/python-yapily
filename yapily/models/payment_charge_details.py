# coding: utf-8

"""
    Yapily API

    The Yapily API enables connections between your application and users' banks. For more information check out our [documentation](https://docs.yapily.com/).<br><br>In particular, make sure to view our [Getting Started](https://docs.yapily.com/pages/home/getting-started/) steps if this is your first time here.<br><br>While testing the API, our list of [sandbox credentials](https://docs.yapily.com/pages/key-concepts/sandbox-credentials/) maybe useful.  # noqa: E501

    The version of the OpenAPI document: 2.13.1
    Contact: support@yapily.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from yapily.configuration import Configuration


class PaymentChargeDetails(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'charge_amount': 'Amount',
        'charge_type': 'str',
        'charge_to': 'str'
    }

    attribute_map = {
        'charge_amount': 'chargeAmount',
        'charge_type': 'chargeType',
        'charge_to': 'chargeTo'
    }

    def __init__(self, charge_amount=None, charge_type=None, charge_to=None, local_vars_configuration=None):  # noqa: E501
        """PaymentChargeDetails - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._charge_amount = None
        self._charge_type = None
        self._charge_to = None
        self.discriminator = None

        if charge_amount is not None:
            self.charge_amount = charge_amount
        if charge_type is not None:
            self.charge_type = charge_type
        if charge_to is not None:
            self.charge_to = charge_to

    @property
    def charge_amount(self):
        """Gets the charge_amount of this PaymentChargeDetails.  # noqa: E501


        :return: The charge_amount of this PaymentChargeDetails.  # noqa: E501
        :rtype: Amount
        """
        return self._charge_amount

    @charge_amount.setter
    def charge_amount(self, charge_amount):
        """Sets the charge_amount of this PaymentChargeDetails.


        :param charge_amount: The charge_amount of this PaymentChargeDetails.  # noqa: E501
        :type: Amount
        """

        self._charge_amount = charge_amount

    @property
    def charge_type(self):
        """Gets the charge_type of this PaymentChargeDetails.  # noqa: E501

        Type of charge  # noqa: E501

        :return: The charge_type of this PaymentChargeDetails.  # noqa: E501
        :rtype: str
        """
        return self._charge_type

    @charge_type.setter
    def charge_type(self, charge_type):
        """Sets the charge_type of this PaymentChargeDetails.

        Type of charge  # noqa: E501

        :param charge_type: The charge_type of this PaymentChargeDetails.  # noqa: E501
        :type: str
        """

        self._charge_type = charge_type

    @property
    def charge_to(self):
        """Gets the charge_to of this PaymentChargeDetails.  # noqa: E501

        Charge bearer  # noqa: E501

        :return: The charge_to of this PaymentChargeDetails.  # noqa: E501
        :rtype: str
        """
        return self._charge_to

    @charge_to.setter
    def charge_to(self, charge_to):
        """Sets the charge_to of this PaymentChargeDetails.

        Charge bearer  # noqa: E501

        :param charge_to: The charge_to of this PaymentChargeDetails.  # noqa: E501
        :type: str
        """

        self._charge_to = charge_to

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PaymentChargeDetails):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, PaymentChargeDetails):
            return True

        return self.to_dict() != other.to_dict()
