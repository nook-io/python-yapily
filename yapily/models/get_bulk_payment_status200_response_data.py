# coding: utf-8

"""
Yapily API

The Yapily API enables connections between your application and users' banks. For more information check out our [documentation](https://docs.yapily.com/).<br><br>In particular, make sure to view our [Getting Started](https://docs.yapily.com/pages/home/getting-started/) steps if this is your first time here.<br><br>While testing the API, our list of [sandbox credentials](https://docs.yapily.com/pages/key-concepts/sandbox-credentials/) maybe useful.

The version of the OpenAPI document: 7.2.0
Contact: support@yapily.com
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictStr
from yapily.models.get_bulk_payment_status200_response_data_status_details import (
    GetBulkPaymentStatus200ResponseDataStatusDetails,
)


class GetBulkPaymentStatus200ResponseData(BaseModel):
    """
    GetBulkPaymentStatus200ResponseData
    """

    id: Optional[StrictStr] = Field(
        default=None, description="Unique identifier of the Bulk Payment"
    )
    consent_id: Optional[StrictStr] = Field(
        default=None, alias="consentId", description="Identification of the consent."
    )
    status_details: Optional[GetBulkPaymentStatus200ResponseDataStatusDetails] = Field(
        default=None, alias="statusDetails"
    )
    created_at: Optional[StrictStr] = Field(default=None, alias="createdAt")
    __properties = ["id", "consentId", "statusDetails", "createdAt"]

    class Config:
        """Pydantic configuration"""

        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> GetBulkPaymentStatus200ResponseData:
        """Create an instance of GetBulkPaymentStatus200ResponseData from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of status_details
        if self.status_details:
            _dict["statusDetails"] = self.status_details.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> GetBulkPaymentStatus200ResponseData:
        """Create an instance of GetBulkPaymentStatus200ResponseData from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return GetBulkPaymentStatus200ResponseData.parse_obj(obj)

        _obj = GetBulkPaymentStatus200ResponseData.parse_obj(
            {
                "id": obj.get("id"),
                "consent_id": obj.get("consentId"),
                "status_details": GetBulkPaymentStatus200ResponseDataStatusDetails.from_dict(
                    obj.get("statusDetails")
                )
                if obj.get("statusDetails") is not None
                else None,
                "created_at": obj.get("createdAt"),
            }
        )
        return _obj
