# coding: utf-8

"""
    Yapily API

    The Yapily API enables connections between your application and users' banks. For more information check out our [documentation](https://docs.yapily.com/).<br><br>In particular, make sure to view our [Getting Started](https://docs.yapily.com/pages/home/getting-started/) steps if this is your first time here.<br><br>While testing the API, our list of [sandbox credentials](https://docs.yapily.com/pages/key-concepts/sandbox-credentials/) maybe useful.

    The version of the OpenAPI document: 2.25.0
    Contact: support@yapily.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date, datetime
from typing import List, Optional
from pydantic import BaseModel, Field, StrictBool, StrictStr, conlist
from yapily.models.error_issue import ErrorIssue
from yapily.models.virtual_account_original_payment import VirtualAccountOriginalPayment
from yapily.models.virtual_account_payment_amount import VirtualAccountPaymentAmount

class VirtualAccountRefund(BaseModel):
    """
    VirtualAccountRefund
    """
    id: Optional[StrictStr] = Field(None, description="Unique id of the refund")
    original_payment: Optional[VirtualAccountOriginalPayment] = Field(None, alias="originalPayment")
    status: Optional[StrictStr] = Field(None, description="The current state of the transaction <br> INITIATED - The transaction request is acknowledged and will not undergo validation checks <br> PENDING - Initial checks were successful and the payment is pending processing. This is primarily used for future dated payments that have not yet reached their payment date <br> PROCESSING - Initial checks succeeded and the transaction request is now being processed <br> COMPLETED - The transaction has been successfully processed (terminal status) <br> FAILED - An failure occured during transaction processing (terminal status)")
    amount: Optional[VirtualAccountPaymentAmount] = None
    issues: Optional[conlist(ErrorIssue)] = Field(None, description="List of issues relating to a FAILED status")
    reason: Optional[StrictStr] = Field(None, description="The reason of the refund request")
    payment_date: Optional[date] = Field(None, alias="paymentDate", description="Date on which the refund instruction will be executed, that may be in the future")
    reference: Optional[StrictStr] = Field(None, description="Reference to be associated with the refund. This will appear on the beneficiary's bank statement")
    refund_to: Optional[StrictStr] = Field(None, alias="refundTo", description="Indicates which account will be used for refund.")
    refund_to_original_payer: Optional[StrictBool] = Field(None, alias="refundToOriginalPayer", description="Indicates if the refund is back to the original payer.")
    beneficiary_type: Optional[StrictStr] = Field(None, alias="beneficiaryType", description="Indicates the type of Beneficiary as either an INDIVIDUAL or BUSINESS")
    beneficiary_id: Optional[StrictStr] = Field(None, alias="beneficiaryId", description="Unique id of the beneficiary to whom the payment will be made")
    created_date_time: Optional[datetime] = Field(None, alias="createdDateTime", description="Date and time that the refund was created")
    updated_date_time: Optional[datetime] = Field(None, alias="updatedDateTime", description="Date and time that the refund was updated")
    __properties = ["id", "originalPayment", "status", "amount", "issues", "reason", "paymentDate", "reference", "refundTo", "refundToOriginalPayer", "beneficiaryType", "beneficiaryId", "createdDateTime", "updatedDateTime"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> VirtualAccountRefund:
        """Create an instance of VirtualAccountRefund from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of original_payment
        if self.original_payment:
            _dict['originalPayment'] = self.original_payment.to_dict()
        # override the default output from pydantic by calling `to_dict()` of amount
        if self.amount:
            _dict['amount'] = self.amount.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in issues (list)
        _items = []
        if self.issues:
            for _item in self.issues:
                if _item:
                    _items.append(_item.to_dict())
            _dict['issues'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> VirtualAccountRefund:
        """Create an instance of VirtualAccountRefund from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return VirtualAccountRefund.parse_obj(obj)

        _obj = VirtualAccountRefund.parse_obj({
            "id": obj.get("id"),
            "original_payment": VirtualAccountOriginalPayment.from_dict(obj.get("originalPayment")) if obj.get("originalPayment") is not None else None,
            "status": obj.get("status"),
            "amount": VirtualAccountPaymentAmount.from_dict(obj.get("amount")) if obj.get("amount") is not None else None,
            "issues": [ErrorIssue.from_dict(_item) for _item in obj.get("issues")] if obj.get("issues") is not None else None,
            "reason": obj.get("reason"),
            "payment_date": obj.get("paymentDate"),
            "reference": obj.get("reference"),
            "refund_to": obj.get("refundTo"),
            "refund_to_original_payer": obj.get("refundToOriginalPayer"),
            "beneficiary_type": obj.get("beneficiaryType"),
            "beneficiary_id": obj.get("beneficiaryId"),
            "created_date_time": obj.get("createdDateTime"),
            "updated_date_time": obj.get("updatedDateTime")
        })
        return _obj


