# coding: utf-8

"""
Yapily API

The Yapily API enables connections between your application and users' banks. For more information check out our [documentation](https://docs.yapily.com/).<br><br>In particular, make sure to view our [Getting Started](https://docs.yapily.com/pages/home/getting-started/) steps if this is your first time here.<br><br>While testing the API, our list of [sandbox credentials](https://docs.yapily.com/pages/key-concepts/sandbox-credentials/) maybe useful.

The version of the OpenAPI document: 7.2.0
Contact: support@yapily.com
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Optional
from pydantic import BaseModel, Field, StrictStr
from yapily.models.multi_authorisation import MultiAuthorisation
from yapily.models.payment_iso_status import PaymentIsoStatus
from yapily.models.payment_status import PaymentStatus


class PaymentStatusDetails(BaseModel):
    """
    PaymentStatusDetails
    """

    status: Optional[PaymentStatus] = None
    status_reason: Optional[StrictStr] = Field(default=None, alias="statusReason")
    status_reason_description: Optional[StrictStr] = Field(
        default=None, alias="statusReasonDescription"
    )
    status_update_date: Optional[datetime] = Field(
        default=None, alias="statusUpdateDate"
    )
    multi_authorisation_status: Optional[MultiAuthorisation] = Field(
        default=None, alias="multiAuthorisationStatus"
    )
    iso_status: Optional[PaymentIsoStatus] = Field(default=None, alias="isoStatus")
    __properties = [
        "status",
        "statusReason",
        "statusReasonDescription",
        "statusUpdateDate",
        "multiAuthorisationStatus",
        "isoStatus",
    ]

    class Config:
        """Pydantic configuration"""

        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> PaymentStatusDetails:
        """Create an instance of PaymentStatusDetails from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of multi_authorisation_status
        if self.multi_authorisation_status:
            _dict["multiAuthorisationStatus"] = (
                self.multi_authorisation_status.to_dict()
            )
        # override the default output from pydantic by calling `to_dict()` of iso_status
        if self.iso_status:
            _dict["isoStatus"] = self.iso_status.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> PaymentStatusDetails:
        """Create an instance of PaymentStatusDetails from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return PaymentStatusDetails.parse_obj(obj)

        _obj = PaymentStatusDetails.parse_obj(
            {
                "status": obj.get("status"),
                "status_reason": obj.get("statusReason"),
                "status_reason_description": obj.get("statusReasonDescription"),
                "status_update_date": obj.get("statusUpdateDate"),
                "multi_authorisation_status": MultiAuthorisation.from_dict(
                    obj.get("multiAuthorisationStatus")
                )
                if obj.get("multiAuthorisationStatus") is not None
                else None,
                "iso_status": PaymentIsoStatus.from_dict(obj.get("isoStatus"))
                if obj.get("isoStatus") is not None
                else None,
            }
        )
        return _obj
