# coding: utf-8

"""
Yapily API

The Yapily API enables connections between your application and users' banks. For more information check out our [documentation](https://docs.yapily.com/).<br><br>In particular, make sure to view our [Getting Started](https://docs.yapily.com/pages/home/getting-started/) steps if this is your first time here.<br><br>While testing the API, our list of [sandbox credentials](https://docs.yapily.com/pages/key-concepts/sandbox-credentials/) maybe useful.

The version of the OpenAPI document: 7.2.0
Contact: support@yapily.com
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from pydantic import BaseModel, Field
from yapily.models.alignment_enum import AlignmentEnum
from yapily.models.amount import Amount
from yapily.models.frequency_enum import FrequencyEnum


class VrpPeriodicLimit(BaseModel):
    """
    VrpPeriodicLimit
    """

    maximum_amount: Amount = Field(
        default=...,
        alias="maximumAmount",
        description="__Mandatory__. Maximum amount that can be specified in all payment instructions in a given period under this VRP consent. If the Alignment is Calendar, the limit is pro-rated in the first period to the remaining number of days.",
    )
    frequency: FrequencyEnum = Field(...)
    alignment: AlignmentEnum = Field(...)
    __properties = ["maximumAmount", "frequency", "alignment"]

    class Config:
        """Pydantic configuration"""

        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> VrpPeriodicLimit:
        """Create an instance of VrpPeriodicLimit from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of maximum_amount
        if self.maximum_amount:
            _dict["maximumAmount"] = self.maximum_amount.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> VrpPeriodicLimit:
        """Create an instance of VrpPeriodicLimit from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return VrpPeriodicLimit.parse_obj(obj)

        _obj = VrpPeriodicLimit.parse_obj(
            {
                "maximum_amount": Amount.from_dict(obj.get("maximumAmount"))
                if obj.get("maximumAmount") is not None
                else None,
                "frequency": obj.get("frequency"),
                "alignment": obj.get("alignment"),
            }
        )
        return _obj
