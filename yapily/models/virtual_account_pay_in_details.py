# coding: utf-8

"""
    Yapily API

    The Yapily API enables connections between your application and users' banks. For more information check out our [documentation](https://docs.yapily.com/).<br><br>In particular, make sure to view our [Getting Started](https://docs.yapily.com/pages/home/getting-started/) steps if this is your first time here.<br><br>While testing the API, our list of [sandbox credentials](https://docs.yapily.com/pages/key-concepts/sandbox-credentials/) maybe useful.

    The version of the OpenAPI document: 2.25.0
    Contact: support@yapily.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictStr
from yapily.models.virtual_account_payment_amount import VirtualAccountPaymentAmount
from yapily.models.virtual_account_payment_source import VirtualAccountPaymentSource

class VirtualAccountPayInDetails(BaseModel):
    """
    VirtualAccountPayInDetails
    """
    id: Optional[StrictStr] = Field(None, description="Unique id of the payment")
    payment_scheme: Optional[StrictStr] = Field(None, alias="paymentScheme", description="Method of settlement to complete the payment. One of: <br> FASTER_PAYMENTS <br> SEPA_CREDIT <br> SEPA_INSTANT <br> SWIFT <br> SWIFT_EXPRESS <br> CHAPS <br> IAT <br> WIRE <br> TRANSFER")
    amount: Optional[VirtualAccountPaymentAmount] = None
    reference: Optional[StrictStr] = Field(None, description="Reference associated with the payment and which appears on the beneficiary's bank statement")
    source: Optional[VirtualAccountPaymentSource] = None
    name: Optional[StrictStr] = Field(None, description="Account source name")
    address: Optional[StrictStr] = Field(None, description="The address of the source bank account")
    __properties = ["id", "paymentScheme", "amount", "reference", "source", "name", "address"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> VirtualAccountPayInDetails:
        """Create an instance of VirtualAccountPayInDetails from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of amount
        if self.amount:
            _dict['amount'] = self.amount.to_dict()
        # override the default output from pydantic by calling `to_dict()` of source
        if self.source:
            _dict['source'] = self.source.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> VirtualAccountPayInDetails:
        """Create an instance of VirtualAccountPayInDetails from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return VirtualAccountPayInDetails.parse_obj(obj)

        _obj = VirtualAccountPayInDetails.parse_obj({
            "id": obj.get("id"),
            "payment_scheme": obj.get("paymentScheme"),
            "amount": VirtualAccountPaymentAmount.from_dict(obj.get("amount")) if obj.get("amount") is not None else None,
            "reference": obj.get("reference"),
            "source": VirtualAccountPaymentSource.from_dict(obj.get("source")) if obj.get("source") is not None else None,
            "name": obj.get("name"),
            "address": obj.get("address")
        })
        return _obj


