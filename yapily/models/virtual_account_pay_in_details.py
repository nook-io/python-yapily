# coding: utf-8

"""
    Yapily API

    The Yapily API enables connections between your application and users' banks. For more information check out our [documentation](https://docs.yapily.com/).<br><br>In particular, make sure to view our [Getting Started](https://docs.yapily.com/pages/home/getting-started/) steps if this is your first time here.<br><br>While testing the API, our list of [sandbox credentials](https://docs.yapily.com/pages/key-concepts/sandbox-credentials/) maybe useful.  # noqa: E501

    The version of the OpenAPI document: 2.13.1
    Contact: support@yapily.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from yapily.configuration import Configuration


class VirtualAccountPayInDetails(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'payment_scheme': 'str',
        'amount': 'Amount',
        'reference': 'str',
        'source': 'VirtualAccountPaymentSource',
        'name': 'str',
        'address': 'str'
    }

    attribute_map = {
        'id': 'id',
        'payment_scheme': 'paymentScheme',
        'amount': 'amount',
        'reference': 'reference',
        'source': 'source',
        'name': 'name',
        'address': 'address'
    }

    def __init__(self, id=None, payment_scheme=None, amount=None, reference=None, source=None, name=None, address=None, local_vars_configuration=None):  # noqa: E501
        """VirtualAccountPayInDetails - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._payment_scheme = None
        self._amount = None
        self._reference = None
        self._source = None
        self._name = None
        self._address = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if payment_scheme is not None:
            self.payment_scheme = payment_scheme
        if amount is not None:
            self.amount = amount
        if reference is not None:
            self.reference = reference
        if source is not None:
            self.source = source
        if name is not None:
            self.name = name
        if address is not None:
            self.address = address

    @property
    def id(self):
        """Gets the id of this VirtualAccountPayInDetails.  # noqa: E501

        Unique id of the payment  # noqa: E501

        :return: The id of this VirtualAccountPayInDetails.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this VirtualAccountPayInDetails.

        Unique id of the payment  # noqa: E501

        :param id: The id of this VirtualAccountPayInDetails.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def payment_scheme(self):
        """Gets the payment_scheme of this VirtualAccountPayInDetails.  # noqa: E501

        Method of settlement to complete the payment. One of: <br> FASTER_PAYMENTS <br> SEPA_CREDIT <br> SEPA_INSTANT <br> SWIFT <br> SWIFT_EXPRESS <br> CHAPS <br> IAT <br> WIRE  # noqa: E501

        :return: The payment_scheme of this VirtualAccountPayInDetails.  # noqa: E501
        :rtype: str
        """
        return self._payment_scheme

    @payment_scheme.setter
    def payment_scheme(self, payment_scheme):
        """Sets the payment_scheme of this VirtualAccountPayInDetails.

        Method of settlement to complete the payment. One of: <br> FASTER_PAYMENTS <br> SEPA_CREDIT <br> SEPA_INSTANT <br> SWIFT <br> SWIFT_EXPRESS <br> CHAPS <br> IAT <br> WIRE  # noqa: E501

        :param payment_scheme: The payment_scheme of this VirtualAccountPayInDetails.  # noqa: E501
        :type: str
        """

        self._payment_scheme = payment_scheme

    @property
    def amount(self):
        """Gets the amount of this VirtualAccountPayInDetails.  # noqa: E501


        :return: The amount of this VirtualAccountPayInDetails.  # noqa: E501
        :rtype: Amount
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this VirtualAccountPayInDetails.


        :param amount: The amount of this VirtualAccountPayInDetails.  # noqa: E501
        :type: Amount
        """

        self._amount = amount

    @property
    def reference(self):
        """Gets the reference of this VirtualAccountPayInDetails.  # noqa: E501

        Reference associated with the payment and which appears on the beneficiary's bank statement  # noqa: E501

        :return: The reference of this VirtualAccountPayInDetails.  # noqa: E501
        :rtype: str
        """
        return self._reference

    @reference.setter
    def reference(self, reference):
        """Sets the reference of this VirtualAccountPayInDetails.

        Reference associated with the payment and which appears on the beneficiary's bank statement  # noqa: E501

        :param reference: The reference of this VirtualAccountPayInDetails.  # noqa: E501
        :type: str
        """

        self._reference = reference

    @property
    def source(self):
        """Gets the source of this VirtualAccountPayInDetails.  # noqa: E501


        :return: The source of this VirtualAccountPayInDetails.  # noqa: E501
        :rtype: VirtualAccountPaymentSource
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this VirtualAccountPayInDetails.


        :param source: The source of this VirtualAccountPayInDetails.  # noqa: E501
        :type: VirtualAccountPaymentSource
        """

        self._source = source

    @property
    def name(self):
        """Gets the name of this VirtualAccountPayInDetails.  # noqa: E501

        Account source name  # noqa: E501

        :return: The name of this VirtualAccountPayInDetails.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this VirtualAccountPayInDetails.

        Account source name  # noqa: E501

        :param name: The name of this VirtualAccountPayInDetails.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def address(self):
        """Gets the address of this VirtualAccountPayInDetails.  # noqa: E501

        The address of the source bank account  # noqa: E501

        :return: The address of this VirtualAccountPayInDetails.  # noqa: E501
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this VirtualAccountPayInDetails.

        The address of the source bank account  # noqa: E501

        :param address: The address of this VirtualAccountPayInDetails.  # noqa: E501
        :type: str
        """

        self._address = address

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, VirtualAccountPayInDetails):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, VirtualAccountPayInDetails):
            return True

        return self.to_dict() != other.to_dict()
