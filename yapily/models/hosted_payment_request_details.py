# coding: utf-8

"""
Yapily API

The Yapily API enables connections between your application and users' banks. For more information check out our [documentation](https://docs.yapily.com/).<br><br>In particular, make sure to view our [Getting Started](https://docs.yapily.com/pages/home/getting-started/) steps if this is your first time here.<br><br>While testing the API, our list of [sandbox credentials](https://docs.yapily.com/pages/key-concepts/sandbox-credentials/) maybe useful.

The version of the OpenAPI document: 7.2.0
Contact: support@yapily.com
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from typing import Optional
from pydantic import BaseModel, Field, StrictStr
from yapily.models.hosted_amount_details import HostedAmountDetails
from yapily.models.payee import Payee
from yapily.models.payer import Payer
from yapily.models.payment_context_type import PaymentContextType
from yapily.models.payment_type import PaymentType


class HostedPaymentRequestDetails(BaseModel):
    """
    Details of the payment.  # noqa: E501
    """

    payment_idempotency_id: StrictStr = Field(
        default=...,
        alias="paymentIdempotencyId",
        description="A unique identifier that you must provide to identify the payment. This can be any alpha-numeric string but is limited to a maximum of 35 characters.",
    )
    reference: Optional[StrictStr] = Field(
        default=None,
        description="The payment reference or description. Limited to a maximum of 18 characters for UK institutions.",
    )
    context_type: Optional[PaymentContextType] = Field(
        default=None, alias="contextType"
    )
    type: PaymentType = Field(...)
    payee: Payee = Field(...)
    payer: Optional[Payer] = None
    amount_details: HostedAmountDetails = Field(default=..., alias="amountDetails")
    payment_due_date: Optional[date] = Field(
        default=None,
        alias="paymentDueDate",
        description="The date that the payment is due. Displayed to the end user in the payment summary screen.",
    )
    __properties = [
        "paymentIdempotencyId",
        "reference",
        "contextType",
        "type",
        "payee",
        "payer",
        "amountDetails",
        "paymentDueDate",
    ]

    class Config:
        """Pydantic configuration"""

        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> HostedPaymentRequestDetails:
        """Create an instance of HostedPaymentRequestDetails from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of payee
        if self.payee:
            _dict["payee"] = self.payee.to_dict()
        # override the default output from pydantic by calling `to_dict()` of payer
        if self.payer:
            _dict["payer"] = self.payer.to_dict()
        # override the default output from pydantic by calling `to_dict()` of amount_details
        if self.amount_details:
            _dict["amountDetails"] = self.amount_details.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> HostedPaymentRequestDetails:
        """Create an instance of HostedPaymentRequestDetails from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return HostedPaymentRequestDetails.parse_obj(obj)

        _obj = HostedPaymentRequestDetails.parse_obj(
            {
                "payment_idempotency_id": obj.get("paymentIdempotencyId"),
                "reference": obj.get("reference"),
                "context_type": obj.get("contextType"),
                "type": obj.get("type"),
                "payee": Payee.from_dict(obj.get("payee"))
                if obj.get("payee") is not None
                else None,
                "payer": Payer.from_dict(obj.get("payer"))
                if obj.get("payer") is not None
                else None,
                "amount_details": HostedAmountDetails.from_dict(
                    obj.get("amountDetails")
                )
                if obj.get("amountDetails") is not None
                else None,
                "payment_due_date": obj.get("paymentDueDate"),
            }
        )
        return _obj
