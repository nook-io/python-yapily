# coding: utf-8

"""
    Yapily API

    The Yapily API enables connections between your application and users' banks. For more information check out our [documentation](https://docs.yapily.com/).<br><br>In particular, make sure to view our [Getting Started](https://docs.yapily.com/pages/home/getting-started/) steps if this is your first time here.<br><br>While testing the API, our list of [sandbox credentials](https://docs.yapily.com/pages/key-concepts/sandbox-credentials/) maybe useful.

    The version of the OpenAPI document: 4.2.0
    Contact: support@yapily.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Optional
from pydantic import BaseModel, Field, StrictStr
from yapily.models.amount import Amount
from yapily.models.direct_debit_payee import DirectDebitPayee
from yapily.models.payment_status_details import PaymentStatusDetails

class DirectDebitResponse(BaseModel):
    """
    DirectDebitResponse
    """
    id: Optional[StrictStr] = None
    status_details: Optional[PaymentStatusDetails] = Field(None, alias="statusDetails")
    payee_details: Optional[DirectDebitPayee] = Field(None, alias="payeeDetails")
    reference: Optional[StrictStr] = None
    previous_payment_amount: Optional[Amount] = Field(None, alias="previousPaymentAmount")
    previous_payment_date_time: Optional[datetime] = Field(None, alias="previousPaymentDateTime")
    __properties = ["id", "statusDetails", "payeeDetails", "reference", "previousPaymentAmount", "previousPaymentDateTime"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> DirectDebitResponse:
        """Create an instance of DirectDebitResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of status_details
        if self.status_details:
            _dict['statusDetails'] = self.status_details.to_dict()
        # override the default output from pydantic by calling `to_dict()` of payee_details
        if self.payee_details:
            _dict['payeeDetails'] = self.payee_details.to_dict()
        # override the default output from pydantic by calling `to_dict()` of previous_payment_amount
        if self.previous_payment_amount:
            _dict['previousPaymentAmount'] = self.previous_payment_amount.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> DirectDebitResponse:
        """Create an instance of DirectDebitResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return DirectDebitResponse.parse_obj(obj)

        _obj = DirectDebitResponse.parse_obj({
            "id": obj.get("id"),
            "status_details": PaymentStatusDetails.from_dict(obj.get("statusDetails")) if obj.get("statusDetails") is not None else None,
            "payee_details": DirectDebitPayee.from_dict(obj.get("payeeDetails")) if obj.get("payeeDetails") is not None else None,
            "reference": obj.get("reference"),
            "previous_payment_amount": Amount.from_dict(obj.get("previousPaymentAmount")) if obj.get("previousPaymentAmount") is not None else None,
            "previous_payment_date_time": obj.get("previousPaymentDateTime")
        })
        return _obj


