# coding: utf-8

"""
    Yapily API

    The Yapily API enables connections between your application and users' banks. For more information check out our [documentation](https://docs.yapily.com/).<br><br>In particular, make sure to view our [Getting Started](https://docs.yapily.com/pages/home/getting-started/) steps if this is your first time here.<br><br>While testing the API, our list of [sandbox credentials](https://docs.yapily.com/pages/key-concepts/sandbox-credentials/) maybe useful.

    The version of the OpenAPI document: 2.13.1
    Contact: support@yapily.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, StrictStr
from pydantic import Field
from yapily.models.initiation_details import InitiationDetails
from yapily.models.payer import Payer
from yapily.models.payment_status import PaymentStatus
from yapily.models.payment_status_details import PaymentStatusDetails
from yapily.models.refund_account import RefundAccount
from yapily.models.submission_details import SubmissionDetails
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class SubmissionResponse(BaseModel):
    """
    SubmissionResponse
    """ # noqa: E501
    id: Optional[StrictStr] = None
    payment_idempotency_id: Optional[StrictStr] = Field(default=None, alias="paymentIdempotencyId")
    institution_consent_id: Optional[StrictStr] = Field(default=None, alias="institutionConsentId")
    status: Optional[PaymentStatus] = None
    status_details: Optional[PaymentStatusDetails] = Field(default=None, alias="statusDetails")
    initiation_details: InitiationDetails = Field(alias="initiationDetails")
    submission_details: SubmissionDetails = Field(alias="submissionDetails")
    payer: Optional[Payer] = None
    refund_account: Optional[RefundAccount] = Field(default=None, alias="refundAccount")
    expected_execution_time: Optional[datetime] = Field(default=None, alias="expectedExecutionTime")
    expected_settlement_time: Optional[datetime] = Field(default=None, alias="expectedSettlementTime")
    __properties: ClassVar[List[str]] = ["id", "paymentIdempotencyId", "institutionConsentId", "status", "statusDetails", "initiationDetails", "submissionDetails", "payer", "refundAccount", "expectedExecutionTime", "expectedSettlementTime"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of SubmissionResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of status_details
        if self.status_details:
            _dict['statusDetails'] = self.status_details.to_dict()
        # override the default output from pydantic by calling `to_dict()` of initiation_details
        if self.initiation_details:
            _dict['initiationDetails'] = self.initiation_details.to_dict()
        # override the default output from pydantic by calling `to_dict()` of submission_details
        if self.submission_details:
            _dict['submissionDetails'] = self.submission_details.to_dict()
        # override the default output from pydantic by calling `to_dict()` of payer
        if self.payer:
            _dict['payer'] = self.payer.to_dict()
        # override the default output from pydantic by calling `to_dict()` of refund_account
        if self.refund_account:
            _dict['refundAccount'] = self.refund_account.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of SubmissionResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "paymentIdempotencyId": obj.get("paymentIdempotencyId"),
            "institutionConsentId": obj.get("institutionConsentId"),
            "status": obj.get("status"),
            "statusDetails": PaymentStatusDetails.from_dict(obj.get("statusDetails")) if obj.get("statusDetails") is not None else None,
            "initiationDetails": InitiationDetails.from_dict(obj.get("initiationDetails")) if obj.get("initiationDetails") is not None else None,
            "submissionDetails": SubmissionDetails.from_dict(obj.get("submissionDetails")) if obj.get("submissionDetails") is not None else None,
            "payer": Payer.from_dict(obj.get("payer")) if obj.get("payer") is not None else None,
            "refundAccount": RefundAccount.from_dict(obj.get("refundAccount")) if obj.get("refundAccount") is not None else None,
            "expectedExecutionTime": obj.get("expectedExecutionTime"),
            "expectedSettlementTime": obj.get("expectedSettlementTime")
        })
        return _obj


