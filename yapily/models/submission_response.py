# coding: utf-8

"""
Yapily API

The Yapily API enables connections between your application and users' banks. For more information check out our [documentation](https://docs.yapily.com/).<br><br>In particular, make sure to view our [Getting Started](https://docs.yapily.com/pages/home/getting-started/) steps if this is your first time here.<br><br>While testing the API, our list of [sandbox credentials](https://docs.yapily.com/pages/key-concepts/sandbox-credentials/) maybe useful.

The version of the OpenAPI document: 7.2.0
Contact: support@yapily.com
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Optional
from pydantic import BaseModel, Field, StrictStr
from yapily.models.initiation_details import InitiationDetails
from yapily.models.payer import Payer
from yapily.models.payment_status import PaymentStatus
from yapily.models.payment_status_details import PaymentStatusDetails
from yapily.models.refund_account import RefundAccount
from yapily.models.submission_details import SubmissionDetails


class SubmissionResponse(BaseModel):
    """
    SubmissionResponse
    """

    id: Optional[StrictStr] = None
    payment_idempotency_id: Optional[StrictStr] = Field(
        default=None, alias="paymentIdempotencyId"
    )
    payment_lifecycle_id: Optional[StrictStr] = Field(
        default=None, alias="paymentLifecycleId"
    )
    institution_consent_id: Optional[StrictStr] = Field(
        default=None, alias="institutionConsentId"
    )
    status: Optional[PaymentStatus] = None
    status_details: Optional[PaymentStatusDetails] = Field(
        default=None, alias="statusDetails"
    )
    initiation_details: InitiationDetails = Field(
        default=..., alias="initiationDetails"
    )
    submission_details: SubmissionDetails = Field(
        default=..., alias="submissionDetails"
    )
    payer: Optional[Payer] = None
    refund_account: Optional[RefundAccount] = Field(default=None, alias="refundAccount")
    expected_execution_time: Optional[datetime] = Field(
        default=None, alias="expectedExecutionTime"
    )
    expected_settlement_time: Optional[datetime] = Field(
        default=None, alias="expectedSettlementTime"
    )
    __properties = [
        "id",
        "paymentIdempotencyId",
        "paymentLifecycleId",
        "institutionConsentId",
        "status",
        "statusDetails",
        "initiationDetails",
        "submissionDetails",
        "payer",
        "refundAccount",
        "expectedExecutionTime",
        "expectedSettlementTime",
    ]

    class Config:
        """Pydantic configuration"""

        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> SubmissionResponse:
        """Create an instance of SubmissionResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of status_details
        if self.status_details:
            _dict["statusDetails"] = self.status_details.to_dict()
        # override the default output from pydantic by calling `to_dict()` of initiation_details
        if self.initiation_details:
            _dict["initiationDetails"] = self.initiation_details.to_dict()
        # override the default output from pydantic by calling `to_dict()` of submission_details
        if self.submission_details:
            _dict["submissionDetails"] = self.submission_details.to_dict()
        # override the default output from pydantic by calling `to_dict()` of payer
        if self.payer:
            _dict["payer"] = self.payer.to_dict()
        # override the default output from pydantic by calling `to_dict()` of refund_account
        if self.refund_account:
            _dict["refundAccount"] = self.refund_account.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> SubmissionResponse:
        """Create an instance of SubmissionResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return SubmissionResponse.parse_obj(obj)

        _obj = SubmissionResponse.parse_obj(
            {
                "id": obj.get("id"),
                "payment_idempotency_id": obj.get("paymentIdempotencyId"),
                "payment_lifecycle_id": obj.get("paymentLifecycleId"),
                "institution_consent_id": obj.get("institutionConsentId"),
                "status": obj.get("status"),
                "status_details": PaymentStatusDetails.from_dict(
                    obj.get("statusDetails")
                )
                if obj.get("statusDetails") is not None
                else None,
                "initiation_details": InitiationDetails.from_dict(
                    obj.get("initiationDetails")
                )
                if obj.get("initiationDetails") is not None
                else None,
                "submission_details": SubmissionDetails.from_dict(
                    obj.get("submissionDetails")
                )
                if obj.get("submissionDetails") is not None
                else None,
                "payer": Payer.from_dict(obj.get("payer"))
                if obj.get("payer") is not None
                else None,
                "refund_account": RefundAccount.from_dict(obj.get("refundAccount"))
                if obj.get("refundAccount") is not None
                else None,
                "expected_execution_time": obj.get("expectedExecutionTime"),
                "expected_settlement_time": obj.get("expectedSettlementTime"),
            }
        )
        return _obj
