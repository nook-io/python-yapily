# coding: utf-8

"""
    Yapily API

    The Yapily API enables connections between your application and users' banks. For more information check out our [documentation](https://docs.yapily.com/).<br><br>In particular, make sure to view our [Getting Started](https://docs.yapily.com/pages/home/getting-started/) steps if this is your first time here.<br><br>While testing the API, our list of [sandbox credentials](https://docs.yapily.com/pages/key-concepts/sandbox-credentials/) maybe useful.  # noqa: E501

    The version of the OpenAPI document: 2.13.1
    Contact: support@yapily.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from yapily.configuration import Configuration


class SubmissionResponse(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'payment_idempotency_id': 'str',
        'institution_consent_id': 'str',
        'status': 'PaymentStatus',
        'status_details': 'PaymentStatusDetails',
        'initiation_details': 'InitiationDetails',
        'submission_details': 'SubmissionDetails',
        'payer': 'Payer',
        'refund_account': 'RefundAccount',
        'expected_execution_time': 'datetime',
        'expected_settlement_time': 'datetime'
    }

    attribute_map = {
        'id': 'id',
        'payment_idempotency_id': 'paymentIdempotencyId',
        'institution_consent_id': 'institutionConsentId',
        'status': 'status',
        'status_details': 'statusDetails',
        'initiation_details': 'initiationDetails',
        'submission_details': 'submissionDetails',
        'payer': 'payer',
        'refund_account': 'refundAccount',
        'expected_execution_time': 'expectedExecutionTime',
        'expected_settlement_time': 'expectedSettlementTime'
    }

    def __init__(self, id=None, payment_idempotency_id=None, institution_consent_id=None, status=None, status_details=None, initiation_details=None, submission_details=None, payer=None, refund_account=None, expected_execution_time=None, expected_settlement_time=None, local_vars_configuration=None):  # noqa: E501
        """SubmissionResponse - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._payment_idempotency_id = None
        self._institution_consent_id = None
        self._status = None
        self._status_details = None
        self._initiation_details = None
        self._submission_details = None
        self._payer = None
        self._refund_account = None
        self._expected_execution_time = None
        self._expected_settlement_time = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if payment_idempotency_id is not None:
            self.payment_idempotency_id = payment_idempotency_id
        if institution_consent_id is not None:
            self.institution_consent_id = institution_consent_id
        if status is not None:
            self.status = status
        if status_details is not None:
            self.status_details = status_details
        self.initiation_details = initiation_details
        self.submission_details = submission_details
        if payer is not None:
            self.payer = payer
        if refund_account is not None:
            self.refund_account = refund_account
        if expected_execution_time is not None:
            self.expected_execution_time = expected_execution_time
        if expected_settlement_time is not None:
            self.expected_settlement_time = expected_settlement_time

    @property
    def id(self):
        """Gets the id of this SubmissionResponse.  # noqa: E501


        :return: The id of this SubmissionResponse.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this SubmissionResponse.


        :param id: The id of this SubmissionResponse.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def payment_idempotency_id(self):
        """Gets the payment_idempotency_id of this SubmissionResponse.  # noqa: E501


        :return: The payment_idempotency_id of this SubmissionResponse.  # noqa: E501
        :rtype: str
        """
        return self._payment_idempotency_id

    @payment_idempotency_id.setter
    def payment_idempotency_id(self, payment_idempotency_id):
        """Sets the payment_idempotency_id of this SubmissionResponse.


        :param payment_idempotency_id: The payment_idempotency_id of this SubmissionResponse.  # noqa: E501
        :type: str
        """

        self._payment_idempotency_id = payment_idempotency_id

    @property
    def institution_consent_id(self):
        """Gets the institution_consent_id of this SubmissionResponse.  # noqa: E501


        :return: The institution_consent_id of this SubmissionResponse.  # noqa: E501
        :rtype: str
        """
        return self._institution_consent_id

    @institution_consent_id.setter
    def institution_consent_id(self, institution_consent_id):
        """Sets the institution_consent_id of this SubmissionResponse.


        :param institution_consent_id: The institution_consent_id of this SubmissionResponse.  # noqa: E501
        :type: str
        """

        self._institution_consent_id = institution_consent_id

    @property
    def status(self):
        """Gets the status of this SubmissionResponse.  # noqa: E501


        :return: The status of this SubmissionResponse.  # noqa: E501
        :rtype: PaymentStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this SubmissionResponse.


        :param status: The status of this SubmissionResponse.  # noqa: E501
        :type: PaymentStatus
        """

        self._status = status

    @property
    def status_details(self):
        """Gets the status_details of this SubmissionResponse.  # noqa: E501


        :return: The status_details of this SubmissionResponse.  # noqa: E501
        :rtype: PaymentStatusDetails
        """
        return self._status_details

    @status_details.setter
    def status_details(self, status_details):
        """Sets the status_details of this SubmissionResponse.


        :param status_details: The status_details of this SubmissionResponse.  # noqa: E501
        :type: PaymentStatusDetails
        """

        self._status_details = status_details

    @property
    def initiation_details(self):
        """Gets the initiation_details of this SubmissionResponse.  # noqa: E501


        :return: The initiation_details of this SubmissionResponse.  # noqa: E501
        :rtype: InitiationDetails
        """
        return self._initiation_details

    @initiation_details.setter
    def initiation_details(self, initiation_details):
        """Sets the initiation_details of this SubmissionResponse.


        :param initiation_details: The initiation_details of this SubmissionResponse.  # noqa: E501
        :type: InitiationDetails
        """
        if self.local_vars_configuration.client_side_validation and initiation_details is None:  # noqa: E501
            raise ValueError("Invalid value for `initiation_details`, must not be `None`")  # noqa: E501

        self._initiation_details = initiation_details

    @property
    def submission_details(self):
        """Gets the submission_details of this SubmissionResponse.  # noqa: E501


        :return: The submission_details of this SubmissionResponse.  # noqa: E501
        :rtype: SubmissionDetails
        """
        return self._submission_details

    @submission_details.setter
    def submission_details(self, submission_details):
        """Sets the submission_details of this SubmissionResponse.


        :param submission_details: The submission_details of this SubmissionResponse.  # noqa: E501
        :type: SubmissionDetails
        """
        if self.local_vars_configuration.client_side_validation and submission_details is None:  # noqa: E501
            raise ValueError("Invalid value for `submission_details`, must not be `None`")  # noqa: E501

        self._submission_details = submission_details

    @property
    def payer(self):
        """Gets the payer of this SubmissionResponse.  # noqa: E501


        :return: The payer of this SubmissionResponse.  # noqa: E501
        :rtype: Payer
        """
        return self._payer

    @payer.setter
    def payer(self, payer):
        """Sets the payer of this SubmissionResponse.


        :param payer: The payer of this SubmissionResponse.  # noqa: E501
        :type: Payer
        """

        self._payer = payer

    @property
    def refund_account(self):
        """Gets the refund_account of this SubmissionResponse.  # noqa: E501


        :return: The refund_account of this SubmissionResponse.  # noqa: E501
        :rtype: RefundAccount
        """
        return self._refund_account

    @refund_account.setter
    def refund_account(self, refund_account):
        """Sets the refund_account of this SubmissionResponse.


        :param refund_account: The refund_account of this SubmissionResponse.  # noqa: E501
        :type: RefundAccount
        """

        self._refund_account = refund_account

    @property
    def expected_execution_time(self):
        """Gets the expected_execution_time of this SubmissionResponse.  # noqa: E501


        :return: The expected_execution_time of this SubmissionResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._expected_execution_time

    @expected_execution_time.setter
    def expected_execution_time(self, expected_execution_time):
        """Sets the expected_execution_time of this SubmissionResponse.


        :param expected_execution_time: The expected_execution_time of this SubmissionResponse.  # noqa: E501
        :type: datetime
        """

        self._expected_execution_time = expected_execution_time

    @property
    def expected_settlement_time(self):
        """Gets the expected_settlement_time of this SubmissionResponse.  # noqa: E501


        :return: The expected_settlement_time of this SubmissionResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._expected_settlement_time

    @expected_settlement_time.setter
    def expected_settlement_time(self, expected_settlement_time):
        """Sets the expected_settlement_time of this SubmissionResponse.


        :param expected_settlement_time: The expected_settlement_time of this SubmissionResponse.  # noqa: E501
        :type: datetime
        """

        self._expected_settlement_time = expected_settlement_time

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SubmissionResponse):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, SubmissionResponse):
            return True

        return self.to_dict() != other.to_dict()
