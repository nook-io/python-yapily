# coding: utf-8

"""
    Yapily API

    The Yapily API enables connections between your application and users' banks. For more information check out our [documentation](https://docs.yapily.com/).<br><br>In particular, make sure to view our [Getting Started](https://docs.yapily.com/pages/home/getting-started/) steps if this is your first time here.<br><br>While testing the API, our list of [sandbox credentials](https://docs.yapily.com/pages/key-concepts/sandbox-credentials/) maybe useful.

    The version of the OpenAPI document: 2.25.0
    Contact: support@yapily.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictStr, conlist
from yapily.models.account_identification import AccountIdentification

class VirtualAccountPaymentSource(BaseModel):
    """
    VirtualAccountPaymentSource
    """
    type: StrictStr = Field(..., description="Type of source for a payment. One of ACCOUNT or EXTERNAL")
    account_id: Optional[StrictStr] = Field(None, alias="accountId", description="Only present if type is ACCOUNT. Identifies the Virtual Account from which the payment was made")
    beneficiary_id: Optional[StrictStr] = Field(None, alias="beneficiaryId", description="Only present if type is BENEFICIARY. Identifies the Virtual Account Beneficiary from which the payment was made")
    account_identifications: Optional[conlist(AccountIdentification, unique_items=True)] = Field(None, alias="accountIdentifications", description="Only present if type is EXTERNAL. The account identifications that identify an external source")
    __properties = ["type", "accountId", "beneficiaryId", "accountIdentifications"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> VirtualAccountPaymentSource:
        """Create an instance of VirtualAccountPaymentSource from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in account_identifications (list)
        _items = []
        if self.account_identifications:
            for _item in self.account_identifications:
                if _item:
                    _items.append(_item.to_dict())
            _dict['accountIdentifications'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> VirtualAccountPaymentSource:
        """Create an instance of VirtualAccountPaymentSource from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return VirtualAccountPaymentSource.parse_obj(obj)

        _obj = VirtualAccountPaymentSource.parse_obj({
            "type": obj.get("type"),
            "account_id": obj.get("accountId"),
            "beneficiary_id": obj.get("beneficiaryId"),
            "account_identifications": [AccountIdentification.from_dict(_item) for _item in obj.get("accountIdentifications")] if obj.get("accountIdentifications") is not None else None
        })
        return _obj


