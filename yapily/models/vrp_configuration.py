# coding: utf-8

"""
Yapily API

The Yapily API enables connections between your application and users' banks. For more information check out our [documentation](https://docs.yapily.com/).<br><br>In particular, make sure to view our [Getting Started](https://docs.yapily.com/pages/home/getting-started/) steps if this is your first time here.<br><br>While testing the API, our list of [sandbox credentials](https://docs.yapily.com/pages/key-concepts/sandbox-credentials/) maybe useful.

The version of the OpenAPI document: 7.2.0
Contact: support@yapily.com
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictStr, conint, conlist
from yapily.models.amount import Amount
from yapily.models.vrp_periodic_limit import VrpPeriodicLimit


class VrpConfiguration(BaseModel):
    """
    VrpConfiguration
    """

    maximum_individual_amount: Optional[Amount] = Field(
        default=None,
        alias="maximumIndividualAmount",
        description="Maximum amount per transaction",
    )
    maximum_cumulative_amount: Optional[Amount] = Field(
        default=None,
        alias="maximumCumulativeAmount",
        description="Maximum cumulative amount",
    )
    maximum_cumulative_number_of_payments: Optional[conint(strict=True, ge=0)] = Field(
        default=None,
        alias="maximumCumulativeNumberOfPayments",
        description="Maximum cumulative number of payments",
    )
    periodic_limits: Optional[conlist(VrpPeriodicLimit, min_items=1)] = Field(
        default=None, alias="periodicLimits"
    )
    recurring_payment_category: Optional[StrictStr] = Field(
        default=None,
        alias="recurringPaymentCategory",
        description="Payment Category with allowed values: ONGOING, SUBSCRIPTION",
    )
    __properties = [
        "maximumIndividualAmount",
        "maximumCumulativeAmount",
        "maximumCumulativeNumberOfPayments",
        "periodicLimits",
        "recurringPaymentCategory",
    ]

    class Config:
        """Pydantic configuration"""

        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> VrpConfiguration:
        """Create an instance of VrpConfiguration from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of maximum_individual_amount
        if self.maximum_individual_amount:
            _dict["maximumIndividualAmount"] = self.maximum_individual_amount.to_dict()
        # override the default output from pydantic by calling `to_dict()` of maximum_cumulative_amount
        if self.maximum_cumulative_amount:
            _dict["maximumCumulativeAmount"] = self.maximum_cumulative_amount.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in periodic_limits (list)
        _items = []
        if self.periodic_limits:
            for _item in self.periodic_limits:
                if _item:
                    _items.append(_item.to_dict())
            _dict["periodicLimits"] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> VrpConfiguration:
        """Create an instance of VrpConfiguration from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return VrpConfiguration.parse_obj(obj)

        _obj = VrpConfiguration.parse_obj(
            {
                "maximum_individual_amount": Amount.from_dict(
                    obj.get("maximumIndividualAmount")
                )
                if obj.get("maximumIndividualAmount") is not None
                else None,
                "maximum_cumulative_amount": Amount.from_dict(
                    obj.get("maximumCumulativeAmount")
                )
                if obj.get("maximumCumulativeAmount") is not None
                else None,
                "maximum_cumulative_number_of_payments": obj.get(
                    "maximumCumulativeNumberOfPayments"
                ),
                "periodic_limits": [
                    VrpPeriodicLimit.from_dict(_item)
                    for _item in obj.get("periodicLimits")
                ]
                if obj.get("periodicLimits") is not None
                else None,
                "recurring_payment_category": obj.get("recurringPaymentCategory"),
            }
        )
        return _obj
