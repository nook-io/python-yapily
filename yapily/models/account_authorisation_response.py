# coding: utf-8

"""
    Yapily API

    The Yapily API enables connections between your application and users' banks. For more information check out our [documentation](https://docs.yapily.com/).<br><br>In particular, make sure to view our [Getting Started](https://docs.yapily.com/pages/home/getting-started/) steps if this is your first time here.<br><br>While testing the API, our list of [sandbox credentials](https://docs.yapily.com/pages/key-concepts/sandbox-credentials/) maybe useful.

    The version of the OpenAPI document: 2.13.1
    Contact: support@yapily.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, StrictInt, StrictStr
from pydantic import Field
from yapily.models.authorisation_status import AuthorisationStatus
from yapily.models.feature_enum import FeatureEnum
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class AccountAuthorisationResponse(BaseModel):
    """
    AccountAuthorisationResponse
    """ # noqa: E501
    id: Optional[StrictStr] = None
    user_uuid: Optional[StrictStr] = Field(default=None, alias="userUuid")
    application_user_id: Optional[StrictStr] = Field(default=None, alias="applicationUserId")
    reference_id: Optional[StrictStr] = Field(default=None, alias="referenceId")
    institution_id: Optional[StrictStr] = Field(default=None, alias="institutionId")
    status: Optional[AuthorisationStatus] = None
    created_at: Optional[datetime] = Field(default=None, alias="createdAt")
    transaction_from: Optional[datetime] = Field(default=None, alias="transactionFrom")
    transaction_to: Optional[datetime] = Field(default=None, alias="transactionTo")
    expires_at: Optional[datetime] = Field(default=None, alias="expiresAt")
    time_to_expire_in_millis: Optional[StrictInt] = Field(default=None, alias="timeToExpireInMillis")
    time_to_expire: Optional[StrictStr] = Field(default=None, alias="timeToExpire")
    feature_scope: Optional[List[FeatureEnum]] = Field(default=None, alias="featureScope")
    consent_token: Optional[StrictStr] = Field(default=None, alias="consentToken")
    state: Optional[StrictStr] = None
    authorized_at: Optional[datetime] = Field(default=None, alias="authorizedAt")
    last_confirmed_at: Optional[datetime] = Field(default=None, description="The time that the PSU last confirmed access to their account information, either through full authentication with the institution, or through reconfirmation with the TPP.", alias="lastConfirmedAt")
    reconfirm_by: Optional[datetime] = Field(default=None, description="The time by which the consent should be reconfirmed to ensure continued access to the account information.", alias="reconfirmBy")
    institution_consent_id: Optional[StrictStr] = Field(default=None, alias="institutionConsentId")
    authorisation_url: Optional[StrictStr] = Field(default=None, alias="authorisationUrl")
    qr_code_url: Optional[StrictStr] = Field(default=None, alias="qrCodeUrl")
    __properties: ClassVar[List[str]] = ["id", "userUuid", "applicationUserId", "referenceId", "institutionId", "status", "createdAt", "transactionFrom", "transactionTo", "expiresAt", "timeToExpireInMillis", "timeToExpire", "featureScope", "consentToken", "state", "authorizedAt", "lastConfirmedAt", "reconfirmBy", "institutionConsentId", "authorisationUrl", "qrCodeUrl"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of AccountAuthorisationResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of AccountAuthorisationResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "userUuid": obj.get("userUuid"),
            "applicationUserId": obj.get("applicationUserId"),
            "referenceId": obj.get("referenceId"),
            "institutionId": obj.get("institutionId"),
            "status": obj.get("status"),
            "createdAt": obj.get("createdAt"),
            "transactionFrom": obj.get("transactionFrom"),
            "transactionTo": obj.get("transactionTo"),
            "expiresAt": obj.get("expiresAt"),
            "timeToExpireInMillis": obj.get("timeToExpireInMillis"),
            "timeToExpire": obj.get("timeToExpire"),
            "featureScope": obj.get("featureScope"),
            "consentToken": obj.get("consentToken"),
            "state": obj.get("state"),
            "authorizedAt": obj.get("authorizedAt"),
            "lastConfirmedAt": obj.get("lastConfirmedAt"),
            "reconfirmBy": obj.get("reconfirmBy"),
            "institutionConsentId": obj.get("institutionConsentId"),
            "authorisationUrl": obj.get("authorisationUrl"),
            "qrCodeUrl": obj.get("qrCodeUrl")
        })
        return _obj


