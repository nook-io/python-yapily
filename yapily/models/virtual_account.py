# coding: utf-8

"""
    Yapily API

    The Yapily API enables connections between your application and users' banks. For more information check out our [documentation](https://docs.yapily.com/).<br><br>In particular, make sure to view our [Getting Started](https://docs.yapily.com/pages/home/getting-started/) steps if this is your first time here.<br><br>While testing the API, our list of [sandbox credentials](https://docs.yapily.com/pages/key-concepts/sandbox-credentials/) maybe useful.

    The version of the OpenAPI document: 2.25.0
    Contact: support@yapily.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import List, Optional
from pydantic import BaseModel, Field, StrictStr, conlist
from yapily.models.virtual_account_balance import VirtualAccountBalance
from yapily.models.virtual_account_bank_account import VirtualAccountBankAccount

class VirtualAccount(BaseModel):
    """
    VirtualAccount
    """
    id: Optional[StrictStr] = Field(None, description="Unique id of the account")
    created_date_time: Optional[datetime] = Field(None, alias="createdDateTime", description="Date and time that the account was created")
    status: Optional[StrictStr] = Field(None, description="The current state of the Account <br> PENDING - Creation of the account is in progress <br> ACTIVE - The account is active and in use <br> FAILED - An issue occured during account creation <br> SUSPENDED - The account has been temporarily suspended by the account provider. It cannot currently be used <br> CLOSED - The account has been permanently closed and cannot be used")
    nickname: Optional[StrictStr] = Field(None, description="Reference that can be provided in order to help with identification of the account")
    currency: Optional[StrictStr] = Field(None, description="Three-letter ISO 4217 currency code")
    balances: Optional[conlist(VirtualAccountBalance)] = None
    bank_account: Optional[VirtualAccountBankAccount] = Field(None, alias="bankAccount")
    __properties = ["id", "createdDateTime", "status", "nickname", "currency", "balances", "bankAccount"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> VirtualAccount:
        """Create an instance of VirtualAccount from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in balances (list)
        _items = []
        if self.balances:
            for _item in self.balances:
                if _item:
                    _items.append(_item.to_dict())
            _dict['balances'] = _items
        # override the default output from pydantic by calling `to_dict()` of bank_account
        if self.bank_account:
            _dict['bankAccount'] = self.bank_account.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> VirtualAccount:
        """Create an instance of VirtualAccount from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return VirtualAccount.parse_obj(obj)

        _obj = VirtualAccount.parse_obj({
            "id": obj.get("id"),
            "created_date_time": obj.get("createdDateTime"),
            "status": obj.get("status"),
            "nickname": obj.get("nickname"),
            "currency": obj.get("currency"),
            "balances": [VirtualAccountBalance.from_dict(_item) for _item in obj.get("balances")] if obj.get("balances") is not None else None,
            "bank_account": VirtualAccountBankAccount.from_dict(obj.get("bankAccount")) if obj.get("bankAccount") is not None else None
        })
        return _obj


