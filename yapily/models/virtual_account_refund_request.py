# coding: utf-8

"""
    Yapily API

    The Yapily API enables connections between your application and users' banks. For more information check out our [documentation](https://docs.yapily.com/).<br><br>In particular, make sure to view our [Getting Started](https://docs.yapily.com/pages/home/getting-started/) steps if this is your first time here.<br><br>While testing the API, our list of [sandbox credentials](https://docs.yapily.com/pages/key-concepts/sandbox-credentials/) maybe useful.

    The version of the OpenAPI document: 2.25.0
    Contact: support@yapily.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from typing import Optional
from pydantic import BaseModel, Field, StrictBool, StrictStr
from yapily.models.virtual_account_original_payment import VirtualAccountOriginalPayment
from yapily.models.virtual_account_refund_request_amount import VirtualAccountRefundRequestAmount
from yapily.models.virtual_account_refund_request_beneficiary import VirtualAccountRefundRequestBeneficiary

class VirtualAccountRefundRequest(BaseModel):
    """
    VirtualAccountRefundRequest
    """
    original_payment: VirtualAccountOriginalPayment = Field(..., alias="originalPayment")
    amount: Optional[VirtualAccountRefundRequestAmount] = None
    reason: Optional[StrictStr] = Field(None, description="Reason for the refund. Allowed values [REQUESTED_BY_CUSTOMER, DUPLICATE_PAYMENT, OTHER]")
    payment_date: Optional[date] = Field(None, alias="paymentDate", description="The date that the refund instruction will be executed. Must be in the present or future")
    reference: Optional[StrictStr] = Field(None, description="Reference to be associated with the refund. This will appear on the beneficiary's bank statement")
    refund_to: StrictStr = Field(..., alias="refundTo", description="Indicates which account will be used for refund. Allowed value: SOURCE")
    refund_to_original_payer: Optional[StrictBool] = Field(None, alias="refundToOriginalPayer", description="__Conditional__. This field is required when refundTo is BENEFICIARY. Indicates if the refund is back to the original payer. Allowed value: true")
    beneficiary_type: Optional[StrictStr] = Field(None, alias="beneficiaryType", description="__Conditional__. This field is required when refundTo is SOURCE. Indicates the type of Beneficiary as either an INDIVIDUAL or BUSINESS.")
    beneficiary: Optional[VirtualAccountRefundRequestBeneficiary] = None
    __properties = ["originalPayment", "amount", "reason", "paymentDate", "reference", "refundTo", "refundToOriginalPayer", "beneficiaryType", "beneficiary"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> VirtualAccountRefundRequest:
        """Create an instance of VirtualAccountRefundRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of original_payment
        if self.original_payment:
            _dict['originalPayment'] = self.original_payment.to_dict()
        # override the default output from pydantic by calling `to_dict()` of amount
        if self.amount:
            _dict['amount'] = self.amount.to_dict()
        # override the default output from pydantic by calling `to_dict()` of beneficiary
        if self.beneficiary:
            _dict['beneficiary'] = self.beneficiary.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> VirtualAccountRefundRequest:
        """Create an instance of VirtualAccountRefundRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return VirtualAccountRefundRequest.parse_obj(obj)

        _obj = VirtualAccountRefundRequest.parse_obj({
            "original_payment": VirtualAccountOriginalPayment.from_dict(obj.get("originalPayment")) if obj.get("originalPayment") is not None else None,
            "amount": VirtualAccountRefundRequestAmount.from_dict(obj.get("amount")) if obj.get("amount") is not None else None,
            "reason": obj.get("reason"),
            "payment_date": obj.get("paymentDate"),
            "reference": obj.get("reference"),
            "refund_to": obj.get("refundTo"),
            "refund_to_original_payer": obj.get("refundToOriginalPayer"),
            "beneficiary_type": obj.get("beneficiaryType"),
            "beneficiary": VirtualAccountRefundRequestBeneficiary.from_dict(obj.get("beneficiary")) if obj.get("beneficiary") is not None else None
        })
        return _obj


