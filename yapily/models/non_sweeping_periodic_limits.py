# coding: utf-8

"""
Yapily API

The Yapily API enables connections between your application and users' banks. For more information check out our [documentation](https://docs.yapily.com/).<br><br>In particular, make sure to view our [Getting Started](https://docs.yapily.com/pages/home/getting-started/) steps if this is your first time here.<br><br>While testing the API, our list of [sandbox credentials](https://docs.yapily.com/pages/key-concepts/sandbox-credentials/) maybe useful.

The version of the OpenAPI document: 7.2.0
Contact: support@yapily.com
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictInt, StrictStr
from yapily.models.amount import Amount


class NonSweepingPeriodicLimits(BaseModel):
    """
    NonSweepingPeriodicLimits
    """

    total_max_amount: Amount = Field(
        default=...,
        alias="totalMaxAmount",
        description="__Mandatory__. Maximum amount that can be specified in all payment instructions in a given period under this VRP consent. If the Alignment is Calendar, the limit is pro-rated in the first period to the remaining number of days.",
    )
    frequency: Optional[StrictStr] = Field(
        default=None,
        description="__Mandatory__. Frequency for which the payment limits are enforced. Allowed values are [DAILY, WEEKLY, EVERY_TWO_WEEKS, MONTHLY, YEARLY]. This field cannot be enforced when `recurringPaymentCategory=ONGOING`.",
    )
    alignment: Optional[StrictStr] = Field(
        default=None,
        description="__Mandatory__. Period alignment for which the payment limits are enforced. Allowed values are [CONSENT, CALENDAR]. If CONSENT, then period starts on consent creation date. If CALENDAR, then period lines up with the frequency e.g. WEEKLY period will begin at start of the week in question. This field cannot be enforced when `recurringPaymentCategory=ONGOING`.",
    )
    max_number_of_payments: Optional[StrictInt] = Field(
        default=None,
        alias="maxNumberOfPayments",
        description="__Optional__. Max number of payments that can be submitted under this period.",
    )
    __properties = ["totalMaxAmount", "frequency", "alignment", "maxNumberOfPayments"]

    class Config:
        """Pydantic configuration"""

        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> NonSweepingPeriodicLimits:
        """Create an instance of NonSweepingPeriodicLimits from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of total_max_amount
        if self.total_max_amount:
            _dict["totalMaxAmount"] = self.total_max_amount.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> NonSweepingPeriodicLimits:
        """Create an instance of NonSweepingPeriodicLimits from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return NonSweepingPeriodicLimits.parse_obj(obj)

        _obj = NonSweepingPeriodicLimits.parse_obj(
            {
                "total_max_amount": Amount.from_dict(obj.get("totalMaxAmount"))
                if obj.get("totalMaxAmount") is not None
                else None,
                "frequency": obj.get("frequency"),
                "alignment": obj.get("alignment"),
                "max_number_of_payments": obj.get("maxNumberOfPayments"),
            }
        )
        return _obj
