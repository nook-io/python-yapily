# coding: utf-8

"""
    Yapily API

    The Yapily API enables connections between your application and users' banks. For more information check out our [documentation](https://docs.yapily.com/).<br><br>In particular, make sure to view our [Getting Started](https://docs.yapily.com/pages/home/getting-started/) steps if this is your first time here.<br><br>While testing the API, our list of [sandbox credentials](https://docs.yapily.com/pages/key-concepts/sandbox-credentials/) maybe useful.

    The version of the OpenAPI document: 4.2.0
    Contact: support@yapily.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Optional
from pydantic import BaseModel, Field, StrictStr, validator

class PostAccountsAccountIdTransactionsCategorisationRequest(BaseModel):
    """
    PostAccountsAccountIdTransactionsCategorisationRequest
    """
    country_code: StrictStr = Field(..., alias="countryCode", description="_Mandatory_, ISO 3166-1 alpha-2 two-letter country codes e.g. GB")
    var_from: Optional[datetime] = Field(None, alias="from", description="__Optional__. Returned transactions will be on or after this date (yyyy-MM-dd'T'HH:mm:ss.SSSZ). ")
    before: Optional[datetime] = Field(None, description="__Optional__. Returned transactions will be on or before this date (yyyy-MM-dd'T'HH:mm:ss.SSSZ).")
    sort: Optional[StrictStr] = Field(None, description="__Optional__. Sort transaction records by date ascending with 'date' or descending with '-date'. The default sort order is descending")
    __properties = ["countryCode", "from", "before", "sort"]

    @validator('sort')
    def sort_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('-date', 'date'):
            raise ValueError("must be one of enum values ('-date', 'date')")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> PostAccountsAccountIdTransactionsCategorisationRequest:
        """Create an instance of PostAccountsAccountIdTransactionsCategorisationRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> PostAccountsAccountIdTransactionsCategorisationRequest:
        """Create an instance of PostAccountsAccountIdTransactionsCategorisationRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return PostAccountsAccountIdTransactionsCategorisationRequest.parse_obj(obj)

        _obj = PostAccountsAccountIdTransactionsCategorisationRequest.parse_obj({
            "country_code": obj.get("countryCode"),
            "var_from": obj.get("from"),
            "before": obj.get("before"),
            "sort": obj.get("sort")
        })
        return _obj


