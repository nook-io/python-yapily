# coding: utf-8

"""
    Yapily API

    The Yapily API enables connections between your application and users' banks. For more information check out our [documentation](https://docs.yapily.com/).<br><br>In particular, make sure to view our [Getting Started](https://docs.yapily.com/pages/home/getting-started/) steps if this is your first time here.<br><br>While testing the API, our list of [sandbox credentials](https://docs.yapily.com/pages/key-concepts/sandbox-credentials/) maybe useful.  # noqa: E501

    The version of the OpenAPI document: 2.13.1
    Contact: support@yapily.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from yapily.configuration import Configuration


class ErrorIssue(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'type': 'str',
        'code': 'str',
        'parameter': 'str',
        'message': 'str',
        'institution_error': 'InstitutionError'
    }

    attribute_map = {
        'type': 'type',
        'code': 'code',
        'parameter': 'parameter',
        'message': 'message',
        'institution_error': 'institutionError'
    }

    def __init__(self, type=None, code=None, parameter=None, message=None, institution_error=None, local_vars_configuration=None):  # noqa: E501
        """ErrorIssue - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._type = None
        self._code = None
        self._parameter = None
        self._message = None
        self._institution_error = None
        self.discriminator = None

        self.type = type
        self.code = code
        if parameter is not None:
            self.parameter = parameter
        if message is not None:
            self.message = message
        if institution_error is not None:
            self.institution_error = institution_error

    @property
    def type(self):
        """Gets the type of this ErrorIssue.  # noqa: E501

        Category of the issue  # noqa: E501

        :return: The type of this ErrorIssue.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ErrorIssue.

        Category of the issue  # noqa: E501

        :param type: The type of this ErrorIssue.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and type is None:  # noqa: E501
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type

    @property
    def code(self):
        """Gets the code of this ErrorIssue.  # noqa: E501

        Code that uniquely identifies the type of issue  # noqa: E501

        :return: The code of this ErrorIssue.  # noqa: E501
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this ErrorIssue.

        Code that uniquely identifies the type of issue  # noqa: E501

        :param code: The code of this ErrorIssue.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and code is None:  # noqa: E501
            raise ValueError("Invalid value for `code`, must not be `None`")  # noqa: E501

        self._code = code

    @property
    def parameter(self):
        """Gets the parameter of this ErrorIssue.  # noqa: E501

        Identfies the parameter / property within the request (headers, query parameters or body) that the issue relates to. For headers and query parameters, it refers to the parameter name. For the body, it refers to the JSONPath of the property  # noqa: E501

        :return: The parameter of this ErrorIssue.  # noqa: E501
        :rtype: str
        """
        return self._parameter

    @parameter.setter
    def parameter(self, parameter):
        """Sets the parameter of this ErrorIssue.

        Identfies the parameter / property within the request (headers, query parameters or body) that the issue relates to. For headers and query parameters, it refers to the parameter name. For the body, it refers to the JSONPath of the property  # noqa: E501

        :param parameter: The parameter of this ErrorIssue.  # noqa: E501
        :type: str
        """

        self._parameter = parameter

    @property
    def message(self):
        """Gets the message of this ErrorIssue.  # noqa: E501

        Human readable description of the issue that was experienced  # noqa: E501

        :return: The message of this ErrorIssue.  # noqa: E501
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this ErrorIssue.

        Human readable description of the issue that was experienced  # noqa: E501

        :param message: The message of this ErrorIssue.  # noqa: E501
        :type: str
        """

        self._message = message

    @property
    def institution_error(self):
        """Gets the institution_error of this ErrorIssue.  # noqa: E501


        :return: The institution_error of this ErrorIssue.  # noqa: E501
        :rtype: InstitutionError
        """
        return self._institution_error

    @institution_error.setter
    def institution_error(self, institution_error):
        """Sets the institution_error of this ErrorIssue.


        :param institution_error: The institution_error of this ErrorIssue.  # noqa: E501
        :type: InstitutionError
        """

        self._institution_error = institution_error

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ErrorIssue):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ErrorIssue):
            return True

        return self.to_dict() != other.to_dict()
