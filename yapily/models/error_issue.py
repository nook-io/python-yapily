# coding: utf-8

"""
    Yapily API

    The Yapily API enables connections between your application and users' banks. For more information check out our [documentation](https://docs.yapily.com/).<br><br>In particular, make sure to view our [Getting Started](https://docs.yapily.com/pages/home/getting-started/) steps if this is your first time here.<br><br>While testing the API, our list of [sandbox credentials](https://docs.yapily.com/pages/key-concepts/sandbox-credentials/) maybe useful.

    The version of the OpenAPI document: 4.2.0
    Contact: support@yapily.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictStr
from yapily.models.institution_error import InstitutionError

class ErrorIssue(BaseModel):
    """
    Detailed information regarding the issue that was experienced during processing of the request  # noqa: E501
    """
    type: StrictStr = Field(..., description="Category of the issue")
    code: StrictStr = Field(..., description="Code that uniquely identifies the type of issue")
    parameter: Optional[StrictStr] = Field(None, description="Identfies the parameter / property within the request (headers, query parameters or body) that the issue relates to. For headers and query parameters, it refers to the parameter name. For the body, it refers to the JSONPath of the property")
    message: Optional[StrictStr] = Field(None, description="Human readable description of the issue that was experienced")
    institution_error: Optional[InstitutionError] = Field(None, alias="institutionError")
    __properties = ["type", "code", "parameter", "message", "institutionError"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ErrorIssue:
        """Create an instance of ErrorIssue from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of institution_error
        if self.institution_error:
            _dict['institutionError'] = self.institution_error.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ErrorIssue:
        """Create an instance of ErrorIssue from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ErrorIssue.parse_obj(obj)

        _obj = ErrorIssue.parse_obj({
            "type": obj.get("type"),
            "code": obj.get("code"),
            "parameter": obj.get("parameter"),
            "message": obj.get("message"),
            "institution_error": InstitutionError.from_dict(obj.get("institutionError")) if obj.get("institutionError") is not None else None
        })
        return _obj


