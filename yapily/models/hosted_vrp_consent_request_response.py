# coding: utf-8

"""
    Yapily API

    The Yapily API enables connections between your application and users' banks. For more information check out our [documentation](https://docs.yapily.com/).<br><br>In particular, make sure to view our [Getting Started](https://docs.yapily.com/pages/home/getting-started/) steps if this is your first time here.<br><br>While testing the API, our list of [sandbox credentials](https://docs.yapily.com/pages/key-concepts/sandbox-credentials/) maybe useful.

    The version of the OpenAPI document: 4.2.0
    Contact: support@yapily.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Optional
from pydantic import BaseModel, Field, StrictStr
from yapily.models.institution_identifiers import InstitutionIdentifiers
from yapily.models.user_settings import UserSettings
from yapily.models.vrp_setup_request import VRPSetupRequest

class HostedVRPConsentRequestResponse(BaseModel):
    """
    HostedVRPConsentRequestResponse
    """
    id: StrictStr = Field(..., description="Represents the Unique Id of the VRP consent request")
    user_id: Optional[StrictStr] = Field(None, alias="userId", description="Represents the Unique Id for the `User` assigned by Yapily.")
    application_user_id: Optional[StrictStr] = Field(None, alias="applicationUserId", description="Represents the user-friendly reference to the `User`.")
    application_id: StrictStr = Field(..., alias="applicationId", description="Represents the Unique Id of the `Application` the user is associated with.")
    institution_identifiers: Optional[InstitutionIdentifiers] = Field(None, alias="institutionIdentifiers")
    user_settings: Optional[UserSettings] = Field(None, alias="userSettings")
    redirect_url: Optional[StrictStr] = Field(None, alias="redirectUrl", description="URL of client's server to redirect the PSU after completion of the consent authorisation.")
    vrp_setup: Optional[VRPSetupRequest] = Field(None, alias="vrpSetup")
    hosted_url: StrictStr = Field(..., alias="hostedUrl", description="Represents the URL of Hosted UI page for the applicationId which initiates the user journey for the Consent. <br> URL would be appended with authToken, applicationId and userSettings.")
    auth_token: StrictStr = Field(..., alias="authToken", description="Represents the JWT Token signed by the certificate-vault using Yapily's keys.")
    created_at: datetime = Field(..., alias="createdAt", description="Represents the date and time at which the Consent was created.")
    authorisation_expires_at: Optional[datetime] = Field(None, alias="authorisationExpiresAt", description="Represents the date and time at which the auth Token will expire.")
    __properties = ["id", "userId", "applicationUserId", "applicationId", "institutionIdentifiers", "userSettings", "redirectUrl", "vrpSetup", "hostedUrl", "authToken", "createdAt", "authorisationExpiresAt"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> HostedVRPConsentRequestResponse:
        """Create an instance of HostedVRPConsentRequestResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of institution_identifiers
        if self.institution_identifiers:
            _dict['institutionIdentifiers'] = self.institution_identifiers.to_dict()
        # override the default output from pydantic by calling `to_dict()` of user_settings
        if self.user_settings:
            _dict['userSettings'] = self.user_settings.to_dict()
        # override the default output from pydantic by calling `to_dict()` of vrp_setup
        if self.vrp_setup:
            _dict['vrpSetup'] = self.vrp_setup.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> HostedVRPConsentRequestResponse:
        """Create an instance of HostedVRPConsentRequestResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return HostedVRPConsentRequestResponse.parse_obj(obj)

        _obj = HostedVRPConsentRequestResponse.parse_obj({
            "id": obj.get("id"),
            "user_id": obj.get("userId"),
            "application_user_id": obj.get("applicationUserId"),
            "application_id": obj.get("applicationId"),
            "institution_identifiers": InstitutionIdentifiers.from_dict(obj.get("institutionIdentifiers")) if obj.get("institutionIdentifiers") is not None else None,
            "user_settings": UserSettings.from_dict(obj.get("userSettings")) if obj.get("userSettings") is not None else None,
            "redirect_url": obj.get("redirectUrl"),
            "vrp_setup": VRPSetupRequest.from_dict(obj.get("vrpSetup")) if obj.get("vrpSetup") is not None else None,
            "hosted_url": obj.get("hostedUrl"),
            "auth_token": obj.get("authToken"),
            "created_at": obj.get("createdAt"),
            "authorisation_expires_at": obj.get("authorisationExpiresAt")
        })
        return _obj


