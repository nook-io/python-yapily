# coding: utf-8

"""
    Yapily API

    The Yapily API enables connections between your application and users' banks. For more information check out our [documentation](https://docs.yapily.com/).<br><br>In particular, make sure to view our [Getting Started](https://docs.yapily.com/pages/home/getting-started/) steps if this is your first time here.<br><br>While testing the API, our list of [sandbox credentials](https://docs.yapily.com/pages/key-concepts/sandbox-credentials/) maybe useful.  # noqa: E501

    The version of the OpenAPI document: 2.13.1
    Contact: support@yapily.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from yapily.configuration import Configuration


class NonSweepingAuthorisationRequest(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'user_id': 'str',
        'application_user_id': 'str',
        'forward_parameters': 'list[str]',
        'context_type': 'PaymentContextType',
        'institution_id': 'str',
        'callback': 'str',
        'redirect': 'RedirectRequest',
        'one_time_token': 'bool',
        'control_parameters': 'NonSweepingControlParameters',
        'initiation_details': 'InitiationDetails'
    }

    attribute_map = {
        'user_id': 'userId',
        'application_user_id': 'applicationUserId',
        'forward_parameters': 'forwardParameters',
        'context_type': 'contextType',
        'institution_id': 'institutionId',
        'callback': 'callback',
        'redirect': 'redirect',
        'one_time_token': 'oneTimeToken',
        'control_parameters': 'controlParameters',
        'initiation_details': 'initiationDetails'
    }

    def __init__(self, user_id=None, application_user_id=None, forward_parameters=None, context_type=None, institution_id=None, callback=None, redirect=None, one_time_token=None, control_parameters=None, initiation_details=None, local_vars_configuration=None):  # noqa: E501
        """NonSweepingAuthorisationRequest - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._user_id = None
        self._application_user_id = None
        self._forward_parameters = None
        self._context_type = None
        self._institution_id = None
        self._callback = None
        self._redirect = None
        self._one_time_token = None
        self._control_parameters = None
        self._initiation_details = None
        self.discriminator = None

        if user_id is not None:
            self.user_id = user_id
        if application_user_id is not None:
            self.application_user_id = application_user_id
        if forward_parameters is not None:
            self.forward_parameters = forward_parameters
        if context_type is not None:
            self.context_type = context_type
        self.institution_id = institution_id
        if callback is not None:
            self.callback = callback
        if redirect is not None:
            self.redirect = redirect
        if one_time_token is not None:
            self.one_time_token = one_time_token
        self.control_parameters = control_parameters
        self.initiation_details = initiation_details

    @property
    def user_id(self):
        """Gets the user_id of this NonSweepingAuthorisationRequest.  # noqa: E501

        This is the Yapily user identifier for the user returned by the create user step POST ../users  # noqa: E501

        :return: The user_id of this NonSweepingAuthorisationRequest.  # noqa: E501
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this NonSweepingAuthorisationRequest.

        This is the Yapily user identifier for the user returned by the create user step POST ../users  # noqa: E501

        :param user_id: The user_id of this NonSweepingAuthorisationRequest.  # noqa: E501
        :type: str
        """

        self._user_id = user_id

    @property
    def application_user_id(self):
        """Gets the application_user_id of this NonSweepingAuthorisationRequest.  # noqa: E501

        A client's own user reference. If the client wants to work with their own unique references for individual PSUs then they can use the applicationUserId property to provide that value. Where Yapily does not already have a Yapily userId that matches the supplied applicationUserId, then a new Yapily userId is created automatically and linked to the applicationUserId value.  Clients can then use either their own applicationUserId or the Yapily userId to reference the same user in future calls.  # noqa: E501

        :return: The application_user_id of this NonSweepingAuthorisationRequest.  # noqa: E501
        :rtype: str
        """
        return self._application_user_id

    @application_user_id.setter
    def application_user_id(self, application_user_id):
        """Sets the application_user_id of this NonSweepingAuthorisationRequest.

        A client's own user reference. If the client wants to work with their own unique references for individual PSUs then they can use the applicationUserId property to provide that value. Where Yapily does not already have a Yapily userId that matches the supplied applicationUserId, then a new Yapily userId is created automatically and linked to the applicationUserId value.  Clients can then use either their own applicationUserId or the Yapily userId to reference the same user in future calls.  # noqa: E501

        :param application_user_id: The application_user_id of this NonSweepingAuthorisationRequest.  # noqa: E501
        :type: str
        """

        self._application_user_id = application_user_id

    @property
    def forward_parameters(self):
        """Gets the forward_parameters of this NonSweepingAuthorisationRequest.  # noqa: E501

        Extra parameters the TPP may want to get forwarded in the callback request after the PSU redirect.  # noqa: E501

        :return: The forward_parameters of this NonSweepingAuthorisationRequest.  # noqa: E501
        :rtype: list[str]
        """
        return self._forward_parameters

    @forward_parameters.setter
    def forward_parameters(self, forward_parameters):
        """Sets the forward_parameters of this NonSweepingAuthorisationRequest.

        Extra parameters the TPP may want to get forwarded in the callback request after the PSU redirect.  # noqa: E501

        :param forward_parameters: The forward_parameters of this NonSweepingAuthorisationRequest.  # noqa: E501
        :type: list[str]
        """

        self._forward_parameters = forward_parameters

    @property
    def context_type(self):
        """Gets the context_type of this NonSweepingAuthorisationRequest.  # noqa: E501


        :return: The context_type of this NonSweepingAuthorisationRequest.  # noqa: E501
        :rtype: PaymentContextType
        """
        return self._context_type

    @context_type.setter
    def context_type(self, context_type):
        """Sets the context_type of this NonSweepingAuthorisationRequest.


        :param context_type: The context_type of this NonSweepingAuthorisationRequest.  # noqa: E501
        :type: PaymentContextType
        """

        self._context_type = context_type

    @property
    def institution_id(self):
        """Gets the institution_id of this NonSweepingAuthorisationRequest.  # noqa: E501

        __Mandatory__. The reference to the `Institution` which identifies which institution the authorisation request is sent to.  # noqa: E501

        :return: The institution_id of this NonSweepingAuthorisationRequest.  # noqa: E501
        :rtype: str
        """
        return self._institution_id

    @institution_id.setter
    def institution_id(self, institution_id):
        """Sets the institution_id of this NonSweepingAuthorisationRequest.

        __Mandatory__. The reference to the `Institution` which identifies which institution the authorisation request is sent to.  # noqa: E501

        :param institution_id: The institution_id of this NonSweepingAuthorisationRequest.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and institution_id is None:  # noqa: E501
            raise ValueError("Invalid value for `institution_id`, must not be `None`")  # noqa: E501

        self._institution_id = institution_id

    @property
    def callback(self):
        """Gets the callback of this NonSweepingAuthorisationRequest.  # noqa: E501

        __Optional__. The server to redirect the user to after the user complete the authorisation at the `Institution`. <br><br>See [Using a callback (Optional)](https://docs.yapily.com/knowledge/callback_url/#using-a-callback-optional) for more information.  # noqa: E501

        :return: The callback of this NonSweepingAuthorisationRequest.  # noqa: E501
        :rtype: str
        """
        return self._callback

    @callback.setter
    def callback(self, callback):
        """Sets the callback of this NonSweepingAuthorisationRequest.

        __Optional__. The server to redirect the user to after the user complete the authorisation at the `Institution`. <br><br>See [Using a callback (Optional)](https://docs.yapily.com/knowledge/callback_url/#using-a-callback-optional) for more information.  # noqa: E501

        :param callback: The callback of this NonSweepingAuthorisationRequest.  # noqa: E501
        :type: str
        """

        self._callback = callback

    @property
    def redirect(self):
        """Gets the redirect of this NonSweepingAuthorisationRequest.  # noqa: E501


        :return: The redirect of this NonSweepingAuthorisationRequest.  # noqa: E501
        :rtype: RedirectRequest
        """
        return self._redirect

    @redirect.setter
    def redirect(self, redirect):
        """Sets the redirect of this NonSweepingAuthorisationRequest.


        :param redirect: The redirect of this NonSweepingAuthorisationRequest.  # noqa: E501
        :type: RedirectRequest
        """

        self._redirect = redirect

    @property
    def one_time_token(self):
        """Gets the one_time_token of this NonSweepingAuthorisationRequest.  # noqa: E501

        __Conditional__. Used to receive a `oneTimeToken` rather than a `consentToken` at the `callback` for additional security. This can only be used when the `callback` is set. <br><br>See [Using a callback with an OTT (Optional)](https://docs.yapily.com/knowledge/callback_url/#using-a-callback-with-an-ott-optional) for more information.  # noqa: E501

        :return: The one_time_token of this NonSweepingAuthorisationRequest.  # noqa: E501
        :rtype: bool
        """
        return self._one_time_token

    @one_time_token.setter
    def one_time_token(self, one_time_token):
        """Sets the one_time_token of this NonSweepingAuthorisationRequest.

        __Conditional__. Used to receive a `oneTimeToken` rather than a `consentToken` at the `callback` for additional security. This can only be used when the `callback` is set. <br><br>See [Using a callback with an OTT (Optional)](https://docs.yapily.com/knowledge/callback_url/#using-a-callback-with-an-ott-optional) for more information.  # noqa: E501

        :param one_time_token: The one_time_token of this NonSweepingAuthorisationRequest.  # noqa: E501
        :type: bool
        """

        self._one_time_token = one_time_token

    @property
    def control_parameters(self):
        """Gets the control_parameters of this NonSweepingAuthorisationRequest.  # noqa: E501


        :return: The control_parameters of this NonSweepingAuthorisationRequest.  # noqa: E501
        :rtype: NonSweepingControlParameters
        """
        return self._control_parameters

    @control_parameters.setter
    def control_parameters(self, control_parameters):
        """Sets the control_parameters of this NonSweepingAuthorisationRequest.


        :param control_parameters: The control_parameters of this NonSweepingAuthorisationRequest.  # noqa: E501
        :type: NonSweepingControlParameters
        """
        if self.local_vars_configuration.client_side_validation and control_parameters is None:  # noqa: E501
            raise ValueError("Invalid value for `control_parameters`, must not be `None`")  # noqa: E501

        self._control_parameters = control_parameters

    @property
    def initiation_details(self):
        """Gets the initiation_details of this NonSweepingAuthorisationRequest.  # noqa: E501


        :return: The initiation_details of this NonSweepingAuthorisationRequest.  # noqa: E501
        :rtype: InitiationDetails
        """
        return self._initiation_details

    @initiation_details.setter
    def initiation_details(self, initiation_details):
        """Sets the initiation_details of this NonSweepingAuthorisationRequest.


        :param initiation_details: The initiation_details of this NonSweepingAuthorisationRequest.  # noqa: E501
        :type: InitiationDetails
        """
        if self.local_vars_configuration.client_side_validation and initiation_details is None:  # noqa: E501
            raise ValueError("Invalid value for `initiation_details`, must not be `None`")  # noqa: E501

        self._initiation_details = initiation_details

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NonSweepingAuthorisationRequest):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, NonSweepingAuthorisationRequest):
            return True

        return self.to_dict() != other.to_dict()
