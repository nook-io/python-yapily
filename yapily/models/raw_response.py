# coding: utf-8

"""
    Yapily API

    The Yapily API enables connections between your application and users' banks. For more information check out our [documentation](https://docs.yapily.com/).<br><br>In particular, make sure to view our [Getting Started](https://docs.yapily.com/pages/home/getting-started/) steps if this is your first time here.<br><br>While testing the API, our list of [sandbox credentials](https://docs.yapily.com/pages/key-concepts/sandbox-credentials/) maybe useful.

    The version of the OpenAPI document: 4.2.0
    Contact: support@yapily.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, Dict, Optional
from pydantic import BaseModel, Field, StrictInt, StrictStr
from yapily.models.raw_request import RawRequest

class RawResponse(BaseModel):
    """
    Interaction (raw request and response) that occured with the `Institution` in order to fulfil a request.  # noqa: E501
    """
    request: Optional[RawRequest] = None
    duration: Optional[StrictStr] = None
    headers: Optional[Dict[str, StrictStr]] = None
    result_code: Optional[StrictInt] = Field(None, alias="resultCode")
    result: Optional[Dict[str, Any]] = None
    __properties = ["request", "duration", "headers", "resultCode", "result"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> RawResponse:
        """Create an instance of RawResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of request
        if self.request:
            _dict['request'] = self.request.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> RawResponse:
        """Create an instance of RawResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return RawResponse.parse_obj(obj)

        _obj = RawResponse.parse_obj({
            "request": RawRequest.from_dict(obj.get("request")) if obj.get("request") is not None else None,
            "duration": obj.get("duration"),
            "headers": obj.get("headers"),
            "result_code": obj.get("resultCode"),
            "result": obj.get("result")
        })
        return _obj


