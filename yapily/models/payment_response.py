# coding: utf-8

"""
    Yapily API

    The Yapily API enables connections between your application and users' banks. For more information check out our [documentation](https://docs.yapily.com/).<br><br>In particular, make sure to view our [Getting Started](https://docs.yapily.com/pages/home/getting-started/) steps if this is your first time here.<br><br>While testing the API, our list of [sandbox credentials](https://docs.yapily.com/pages/key-concepts/sandbox-credentials/) maybe useful.

    The version of the OpenAPI document: 2.13.1
    Contact: support@yapily.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Any, ClassVar, Dict, List, Optional, Union
from pydantic import BaseModel, StrictFloat, StrictInt, StrictStr
from pydantic import Field
from yapily.models.amount import Amount
from yapily.models.exchange_rate_information_response import ExchangeRateInformationResponse
from yapily.models.frequency_response import FrequencyResponse
from yapily.models.payee import Payee
from yapily.models.payer import Payer
from yapily.models.payment_charge_details import PaymentChargeDetails
from yapily.models.payment_status import PaymentStatus
from yapily.models.payment_status_details import PaymentStatusDetails
from yapily.models.priority_code_enum import PriorityCodeEnum
from yapily.models.refund_account import RefundAccount
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class PaymentResponse(BaseModel):
    """
    PaymentResponse
    """ # noqa: E501
    id: Optional[StrictStr] = None
    institution_consent_id: Optional[StrictStr] = Field(default=None, alias="institutionConsentId")
    payment_idempotency_id: Optional[StrictStr] = Field(default=None, alias="paymentIdempotencyId")
    payment_lifecycle_id: Optional[StrictStr] = Field(default=None, alias="paymentLifecycleId")
    status: Optional[PaymentStatus] = None
    status_details: Optional[PaymentStatusDetails] = Field(default=None, alias="statusDetails")
    payer: Optional[Payer] = None
    payee_details: Optional[Payee] = Field(default=None, alias="payeeDetails")
    reference: Optional[StrictStr] = None
    amount: Optional[Union[StrictFloat, StrictInt]] = None
    currency: Optional[StrictStr] = None
    amount_details: Optional[Amount] = Field(default=None, alias="amountDetails")
    created_at: Optional[datetime] = Field(default=None, alias="createdAt")
    first_payment_amount: Optional[Amount] = Field(default=None, alias="firstPaymentAmount")
    first_payment_date_time: Optional[datetime] = Field(default=None, alias="firstPaymentDateTime")
    next_payment_amount: Optional[Amount] = Field(default=None, alias="nextPaymentAmount")
    next_payment_date_time: Optional[datetime] = Field(default=None, alias="nextPaymentDateTime")
    final_payment_amount: Optional[Amount] = Field(default=None, alias="finalPaymentAmount")
    final_payment_date_time: Optional[datetime] = Field(default=None, alias="finalPaymentDateTime")
    number_of_payments: Optional[StrictInt] = Field(default=None, alias="numberOfPayments")
    previous_payment_amount: Optional[Amount] = Field(default=None, alias="previousPaymentAmount")
    previous_payment_date_time: Optional[datetime] = Field(default=None, alias="previousPaymentDateTime")
    charge_details: Optional[List[PaymentChargeDetails]] = Field(default=None, alias="chargeDetails")
    scheduled_payment_type: Optional[StrictStr] = Field(default=None, alias="scheduledPaymentType")
    scheduled_payment_date_time: Optional[datetime] = Field(default=None, alias="scheduledPaymentDateTime")
    frequency: Optional[FrequencyResponse] = None
    currency_of_transfer: Optional[StrictStr] = Field(default=None, alias="currencyOfTransfer")
    purpose: Optional[StrictStr] = None
    priority: Optional[PriorityCodeEnum] = None
    exchange_rate: Optional[ExchangeRateInformationResponse] = Field(default=None, alias="exchangeRate")
    refund_account: Optional[RefundAccount] = Field(default=None, alias="refundAccount")
    bulk_amount_sum: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="bulkAmountSum")
    __properties: ClassVar[List[str]] = ["id", "institutionConsentId", "paymentIdempotencyId", "paymentLifecycleId", "status", "statusDetails", "payer", "payeeDetails", "reference", "amount", "currency", "amountDetails", "createdAt", "firstPaymentAmount", "firstPaymentDateTime", "nextPaymentAmount", "nextPaymentDateTime", "finalPaymentAmount", "finalPaymentDateTime", "numberOfPayments", "previousPaymentAmount", "previousPaymentDateTime", "chargeDetails", "scheduledPaymentType", "scheduledPaymentDateTime", "frequency", "currencyOfTransfer", "purpose", "priority", "exchangeRate", "refundAccount", "bulkAmountSum"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of PaymentResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of status_details
        if self.status_details:
            _dict['statusDetails'] = self.status_details.to_dict()
        # override the default output from pydantic by calling `to_dict()` of payer
        if self.payer:
            _dict['payer'] = self.payer.to_dict()
        # override the default output from pydantic by calling `to_dict()` of payee_details
        if self.payee_details:
            _dict['payeeDetails'] = self.payee_details.to_dict()
        # override the default output from pydantic by calling `to_dict()` of amount_details
        if self.amount_details:
            _dict['amountDetails'] = self.amount_details.to_dict()
        # override the default output from pydantic by calling `to_dict()` of first_payment_amount
        if self.first_payment_amount:
            _dict['firstPaymentAmount'] = self.first_payment_amount.to_dict()
        # override the default output from pydantic by calling `to_dict()` of next_payment_amount
        if self.next_payment_amount:
            _dict['nextPaymentAmount'] = self.next_payment_amount.to_dict()
        # override the default output from pydantic by calling `to_dict()` of final_payment_amount
        if self.final_payment_amount:
            _dict['finalPaymentAmount'] = self.final_payment_amount.to_dict()
        # override the default output from pydantic by calling `to_dict()` of previous_payment_amount
        if self.previous_payment_amount:
            _dict['previousPaymentAmount'] = self.previous_payment_amount.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in charge_details (list)
        _items = []
        if self.charge_details:
            for _item in self.charge_details:
                if _item:
                    _items.append(_item.to_dict())
            _dict['chargeDetails'] = _items
        # override the default output from pydantic by calling `to_dict()` of frequency
        if self.frequency:
            _dict['frequency'] = self.frequency.to_dict()
        # override the default output from pydantic by calling `to_dict()` of exchange_rate
        if self.exchange_rate:
            _dict['exchangeRate'] = self.exchange_rate.to_dict()
        # override the default output from pydantic by calling `to_dict()` of refund_account
        if self.refund_account:
            _dict['refundAccount'] = self.refund_account.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of PaymentResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "institutionConsentId": obj.get("institutionConsentId"),
            "paymentIdempotencyId": obj.get("paymentIdempotencyId"),
            "paymentLifecycleId": obj.get("paymentLifecycleId"),
            "status": obj.get("status"),
            "statusDetails": PaymentStatusDetails.from_dict(obj.get("statusDetails")) if obj.get("statusDetails") is not None else None,
            "payer": Payer.from_dict(obj.get("payer")) if obj.get("payer") is not None else None,
            "payeeDetails": Payee.from_dict(obj.get("payeeDetails")) if obj.get("payeeDetails") is not None else None,
            "reference": obj.get("reference"),
            "amount": obj.get("amount"),
            "currency": obj.get("currency"),
            "amountDetails": Amount.from_dict(obj.get("amountDetails")) if obj.get("amountDetails") is not None else None,
            "createdAt": obj.get("createdAt"),
            "firstPaymentAmount": Amount.from_dict(obj.get("firstPaymentAmount")) if obj.get("firstPaymentAmount") is not None else None,
            "firstPaymentDateTime": obj.get("firstPaymentDateTime"),
            "nextPaymentAmount": Amount.from_dict(obj.get("nextPaymentAmount")) if obj.get("nextPaymentAmount") is not None else None,
            "nextPaymentDateTime": obj.get("nextPaymentDateTime"),
            "finalPaymentAmount": Amount.from_dict(obj.get("finalPaymentAmount")) if obj.get("finalPaymentAmount") is not None else None,
            "finalPaymentDateTime": obj.get("finalPaymentDateTime"),
            "numberOfPayments": obj.get("numberOfPayments"),
            "previousPaymentAmount": Amount.from_dict(obj.get("previousPaymentAmount")) if obj.get("previousPaymentAmount") is not None else None,
            "previousPaymentDateTime": obj.get("previousPaymentDateTime"),
            "chargeDetails": [PaymentChargeDetails.from_dict(_item) for _item in obj.get("chargeDetails")] if obj.get("chargeDetails") is not None else None,
            "scheduledPaymentType": obj.get("scheduledPaymentType"),
            "scheduledPaymentDateTime": obj.get("scheduledPaymentDateTime"),
            "frequency": FrequencyResponse.from_dict(obj.get("frequency")) if obj.get("frequency") is not None else None,
            "currencyOfTransfer": obj.get("currencyOfTransfer"),
            "purpose": obj.get("purpose"),
            "priority": obj.get("priority"),
            "exchangeRate": ExchangeRateInformationResponse.from_dict(obj.get("exchangeRate")) if obj.get("exchangeRate") is not None else None,
            "refundAccount": RefundAccount.from_dict(obj.get("refundAccount")) if obj.get("refundAccount") is not None else None,
            "bulkAmountSum": obj.get("bulkAmountSum")
        })
        return _obj


