# coding: utf-8

"""
    Yapily API

    The Yapily API enables connections between your application and users' banks. For more information check out our [documentation](https://docs.yapily.com/).<br><br>In particular, make sure to view our [Getting Started](https://docs.yapily.com/pages/home/getting-started/) steps if this is your first time here.<br><br>While testing the API, our list of [sandbox credentials](https://docs.yapily.com/pages/key-concepts/sandbox-credentials/) maybe useful.

    The version of the OpenAPI document: 4.2.0
    Contact: support@yapily.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Optional
from pydantic import BaseModel, Field, StrictInt, StrictStr

class MultiAuthorisation(BaseModel):
    """
    Details the additional levels of authorisation which are required from, and being managed by, the `Institution`.  # noqa: E501
    """
    status: Optional[StrictStr] = Field(None, description="_Mandatory_. Specifies the current status of the multi-authorisation flow.")
    number_of_authorisation_required: Optional[StrictInt] = Field(None, alias="numberOfAuthorisationRequired", description="__Mandatory__. Total number of authorisations required.")
    number_of_authorisation_received: Optional[StrictInt] = Field(None, alias="numberOfAuthorisationReceived", description="__Mandatory__. The total number of authorisations that have been recieved.")
    last_updated_date_time: Optional[datetime] = Field(None, alias="lastUpdatedDateTime", description="__Mandatory__. Date and time of when the authorisation was last updated.")
    expiration_date_time: Optional[datetime] = Field(None, alias="expirationDateTime", description="__Mandatory__. Date and time by when the authorisation flow must be completed before it expires and the authorisation request is terminated.")
    __properties = ["status", "numberOfAuthorisationRequired", "numberOfAuthorisationReceived", "lastUpdatedDateTime", "expirationDateTime"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> MultiAuthorisation:
        """Create an instance of MultiAuthorisation from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> MultiAuthorisation:
        """Create an instance of MultiAuthorisation from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return MultiAuthorisation.parse_obj(obj)

        _obj = MultiAuthorisation.parse_obj({
            "status": obj.get("status"),
            "number_of_authorisation_required": obj.get("numberOfAuthorisationRequired"),
            "number_of_authorisation_received": obj.get("numberOfAuthorisationReceived"),
            "last_updated_date_time": obj.get("lastUpdatedDateTime"),
            "expiration_date_time": obj.get("expirationDateTime")
        })
        return _obj


