# coding: utf-8

"""
    Yapily API

    The Yapily API enables connections between your application and users' banks. For more information check out our [documentation](https://docs.yapily.com/).<br><br>In particular, make sure to view our [Getting Started](https://docs.yapily.com/pages/home/getting-started/) steps if this is your first time here.<br><br>While testing the API, our list of [sandbox credentials](https://docs.yapily.com/pages/key-concepts/sandbox-credentials/) maybe useful.  # noqa: E501

    The version of the OpenAPI document: 2.13.1
    Contact: support@yapily.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from yapily.configuration import Configuration


class SweepingAuthorisationResponse(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'user_id': 'str',
        'application_user_id': 'str',
        'institution_id': 'str',
        'status': 'AuthorisationStatus',
        'created_at': 'datetime',
        'feature_scope': 'list[FeatureEnum]',
        'consent_token': 'str',
        'state': 'str',
        'authorized_at': 'datetime',
        'institution_consent_id': 'str',
        'authorisation_url': 'str',
        'qr_code_url': 'str',
        'control_parameters': 'SweepingControlParameters',
        'payer': 'Payer',
        'initiation_details': 'InitiationDetails'
    }

    attribute_map = {
        'id': 'id',
        'user_id': 'userId',
        'application_user_id': 'applicationUserId',
        'institution_id': 'institutionId',
        'status': 'status',
        'created_at': 'createdAt',
        'feature_scope': 'featureScope',
        'consent_token': 'consentToken',
        'state': 'state',
        'authorized_at': 'authorizedAt',
        'institution_consent_id': 'institutionConsentId',
        'authorisation_url': 'authorisationUrl',
        'qr_code_url': 'qrCodeUrl',
        'control_parameters': 'controlParameters',
        'payer': 'payer',
        'initiation_details': 'initiationDetails'
    }

    def __init__(self, id=None, user_id=None, application_user_id=None, institution_id=None, status=None, created_at=None, feature_scope=None, consent_token=None, state=None, authorized_at=None, institution_consent_id=None, authorisation_url=None, qr_code_url=None, control_parameters=None, payer=None, initiation_details=None, local_vars_configuration=None):  # noqa: E501
        """SweepingAuthorisationResponse - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._user_id = None
        self._application_user_id = None
        self._institution_id = None
        self._status = None
        self._created_at = None
        self._feature_scope = None
        self._consent_token = None
        self._state = None
        self._authorized_at = None
        self._institution_consent_id = None
        self._authorisation_url = None
        self._qr_code_url = None
        self._control_parameters = None
        self._payer = None
        self._initiation_details = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if user_id is not None:
            self.user_id = user_id
        if application_user_id is not None:
            self.application_user_id = application_user_id
        if institution_id is not None:
            self.institution_id = institution_id
        if status is not None:
            self.status = status
        if created_at is not None:
            self.created_at = created_at
        if feature_scope is not None:
            self.feature_scope = feature_scope
        if consent_token is not None:
            self.consent_token = consent_token
        if state is not None:
            self.state = state
        if authorized_at is not None:
            self.authorized_at = authorized_at
        if institution_consent_id is not None:
            self.institution_consent_id = institution_consent_id
        if authorisation_url is not None:
            self.authorisation_url = authorisation_url
        if qr_code_url is not None:
            self.qr_code_url = qr_code_url
        if control_parameters is not None:
            self.control_parameters = control_parameters
        if payer is not None:
            self.payer = payer
        if initiation_details is not None:
            self.initiation_details = initiation_details

    @property
    def id(self):
        """Gets the id of this SweepingAuthorisationResponse.  # noqa: E501


        :return: The id of this SweepingAuthorisationResponse.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this SweepingAuthorisationResponse.


        :param id: The id of this SweepingAuthorisationResponse.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def user_id(self):
        """Gets the user_id of this SweepingAuthorisationResponse.  # noqa: E501

        This is the Yapily user identifier for the user returned by the create user step POST ../users  # noqa: E501

        :return: The user_id of this SweepingAuthorisationResponse.  # noqa: E501
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this SweepingAuthorisationResponse.

        This is the Yapily user identifier for the user returned by the create user step POST ../users  # noqa: E501

        :param user_id: The user_id of this SweepingAuthorisationResponse.  # noqa: E501
        :type: str
        """

        self._user_id = user_id

    @property
    def application_user_id(self):
        """Gets the application_user_id of this SweepingAuthorisationResponse.  # noqa: E501

        A client's own user reference. If the client wants to work with their own unique references for individual PSUs then they can use the applicationUserId property to provide that value. Where Yapily does not already have a Yapily userId that matches the supplied applicationUserId, then a new Yapily userId is created automatically and linked to the applicationUserId value.  Clients can then use either their own applicationUserId or the Yapily userId to reference the same user in future calls.  # noqa: E501

        :return: The application_user_id of this SweepingAuthorisationResponse.  # noqa: E501
        :rtype: str
        """
        return self._application_user_id

    @application_user_id.setter
    def application_user_id(self, application_user_id):
        """Sets the application_user_id of this SweepingAuthorisationResponse.

        A client's own user reference. If the client wants to work with their own unique references for individual PSUs then they can use the applicationUserId property to provide that value. Where Yapily does not already have a Yapily userId that matches the supplied applicationUserId, then a new Yapily userId is created automatically and linked to the applicationUserId value.  Clients can then use either their own applicationUserId or the Yapily userId to reference the same user in future calls.  # noqa: E501

        :param application_user_id: The application_user_id of this SweepingAuthorisationResponse.  # noqa: E501
        :type: str
        """

        self._application_user_id = application_user_id

    @property
    def institution_id(self):
        """Gets the institution_id of this SweepingAuthorisationResponse.  # noqa: E501

        The reference to the Institution which identifies which institution the authorisation request is sent to.  # noqa: E501

        :return: The institution_id of this SweepingAuthorisationResponse.  # noqa: E501
        :rtype: str
        """
        return self._institution_id

    @institution_id.setter
    def institution_id(self, institution_id):
        """Sets the institution_id of this SweepingAuthorisationResponse.

        The reference to the Institution which identifies which institution the authorisation request is sent to.  # noqa: E501

        :param institution_id: The institution_id of this SweepingAuthorisationResponse.  # noqa: E501
        :type: str
        """

        self._institution_id = institution_id

    @property
    def status(self):
        """Gets the status of this SweepingAuthorisationResponse.  # noqa: E501


        :return: The status of this SweepingAuthorisationResponse.  # noqa: E501
        :rtype: AuthorisationStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this SweepingAuthorisationResponse.


        :param status: The status of this SweepingAuthorisationResponse.  # noqa: E501
        :type: AuthorisationStatus
        """

        self._status = status

    @property
    def created_at(self):
        """Gets the created_at of this SweepingAuthorisationResponse.  # noqa: E501


        :return: The created_at of this SweepingAuthorisationResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this SweepingAuthorisationResponse.


        :param created_at: The created_at of this SweepingAuthorisationResponse.  # noqa: E501
        :type: datetime
        """

        self._created_at = created_at

    @property
    def feature_scope(self):
        """Gets the feature_scope of this SweepingAuthorisationResponse.  # noqa: E501

        __Optional__. Used to granularly specify the set of features that the user will give their consent for when requesting access to their account information. Depending on the `Institution`, this may also populate a consent screen which list these scopes before the user authorises.<br><br>This endpoint accepts allow all [Financial Data Features](/guides/financial-data/features/#feature-list) that the `Institution` supports.To find out which scopes an `Institution` supports, check [GET Institution](./#get-institution).  # noqa: E501

        :return: The feature_scope of this SweepingAuthorisationResponse.  # noqa: E501
        :rtype: list[FeatureEnum]
        """
        return self._feature_scope

    @feature_scope.setter
    def feature_scope(self, feature_scope):
        """Sets the feature_scope of this SweepingAuthorisationResponse.

        __Optional__. Used to granularly specify the set of features that the user will give their consent for when requesting access to their account information. Depending on the `Institution`, this may also populate a consent screen which list these scopes before the user authorises.<br><br>This endpoint accepts allow all [Financial Data Features](/guides/financial-data/features/#feature-list) that the `Institution` supports.To find out which scopes an `Institution` supports, check [GET Institution](./#get-institution).  # noqa: E501

        :param feature_scope: The feature_scope of this SweepingAuthorisationResponse.  # noqa: E501
        :type: list[FeatureEnum]
        """

        self._feature_scope = feature_scope

    @property
    def consent_token(self):
        """Gets the consent_token of this SweepingAuthorisationResponse.  # noqa: E501

        The `consent-token` containing the user's authorisation to make the payment request.  # noqa: E501

        :return: The consent_token of this SweepingAuthorisationResponse.  # noqa: E501
        :rtype: str
        """
        return self._consent_token

    @consent_token.setter
    def consent_token(self, consent_token):
        """Sets the consent_token of this SweepingAuthorisationResponse.

        The `consent-token` containing the user's authorisation to make the payment request.  # noqa: E501

        :param consent_token: The consent_token of this SweepingAuthorisationResponse.  # noqa: E501
        :type: str
        """

        self._consent_token = consent_token

    @property
    def state(self):
        """Gets the state of this SweepingAuthorisationResponse.  # noqa: E501


        :return: The state of this SweepingAuthorisationResponse.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this SweepingAuthorisationResponse.


        :param state: The state of this SweepingAuthorisationResponse.  # noqa: E501
        :type: str
        """

        self._state = state

    @property
    def authorized_at(self):
        """Gets the authorized_at of this SweepingAuthorisationResponse.  # noqa: E501


        :return: The authorized_at of this SweepingAuthorisationResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._authorized_at

    @authorized_at.setter
    def authorized_at(self, authorized_at):
        """Sets the authorized_at of this SweepingAuthorisationResponse.


        :param authorized_at: The authorized_at of this SweepingAuthorisationResponse.  # noqa: E501
        :type: datetime
        """

        self._authorized_at = authorized_at

    @property
    def institution_consent_id(self):
        """Gets the institution_consent_id of this SweepingAuthorisationResponse.  # noqa: E501


        :return: The institution_consent_id of this SweepingAuthorisationResponse.  # noqa: E501
        :rtype: str
        """
        return self._institution_consent_id

    @institution_consent_id.setter
    def institution_consent_id(self, institution_consent_id):
        """Sets the institution_consent_id of this SweepingAuthorisationResponse.


        :param institution_consent_id: The institution_consent_id of this SweepingAuthorisationResponse.  # noqa: E501
        :type: str
        """

        self._institution_consent_id = institution_consent_id

    @property
    def authorisation_url(self):
        """Gets the authorisation_url of this SweepingAuthorisationResponse.  # noqa: E501


        :return: The authorisation_url of this SweepingAuthorisationResponse.  # noqa: E501
        :rtype: str
        """
        return self._authorisation_url

    @authorisation_url.setter
    def authorisation_url(self, authorisation_url):
        """Sets the authorisation_url of this SweepingAuthorisationResponse.


        :param authorisation_url: The authorisation_url of this SweepingAuthorisationResponse.  # noqa: E501
        :type: str
        """

        self._authorisation_url = authorisation_url

    @property
    def qr_code_url(self):
        """Gets the qr_code_url of this SweepingAuthorisationResponse.  # noqa: E501


        :return: The qr_code_url of this SweepingAuthorisationResponse.  # noqa: E501
        :rtype: str
        """
        return self._qr_code_url

    @qr_code_url.setter
    def qr_code_url(self, qr_code_url):
        """Sets the qr_code_url of this SweepingAuthorisationResponse.


        :param qr_code_url: The qr_code_url of this SweepingAuthorisationResponse.  # noqa: E501
        :type: str
        """

        self._qr_code_url = qr_code_url

    @property
    def control_parameters(self):
        """Gets the control_parameters of this SweepingAuthorisationResponse.  # noqa: E501


        :return: The control_parameters of this SweepingAuthorisationResponse.  # noqa: E501
        :rtype: SweepingControlParameters
        """
        return self._control_parameters

    @control_parameters.setter
    def control_parameters(self, control_parameters):
        """Sets the control_parameters of this SweepingAuthorisationResponse.


        :param control_parameters: The control_parameters of this SweepingAuthorisationResponse.  # noqa: E501
        :type: SweepingControlParameters
        """

        self._control_parameters = control_parameters

    @property
    def payer(self):
        """Gets the payer of this SweepingAuthorisationResponse.  # noqa: E501


        :return: The payer of this SweepingAuthorisationResponse.  # noqa: E501
        :rtype: Payer
        """
        return self._payer

    @payer.setter
    def payer(self, payer):
        """Sets the payer of this SweepingAuthorisationResponse.


        :param payer: The payer of this SweepingAuthorisationResponse.  # noqa: E501
        :type: Payer
        """

        self._payer = payer

    @property
    def initiation_details(self):
        """Gets the initiation_details of this SweepingAuthorisationResponse.  # noqa: E501


        :return: The initiation_details of this SweepingAuthorisationResponse.  # noqa: E501
        :rtype: InitiationDetails
        """
        return self._initiation_details

    @initiation_details.setter
    def initiation_details(self, initiation_details):
        """Sets the initiation_details of this SweepingAuthorisationResponse.


        :param initiation_details: The initiation_details of this SweepingAuthorisationResponse.  # noqa: E501
        :type: InitiationDetails
        """

        self._initiation_details = initiation_details

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SweepingAuthorisationResponse):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, SweepingAuthorisationResponse):
            return True

        return self.to_dict() != other.to_dict()
