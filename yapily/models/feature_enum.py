# coding: utf-8

"""
    Yapily API

    The Yapily API enables connections between your application and users' banks. For more information check out our [documentation](https://docs.yapily.com/).<br><br>In particular, make sure to view our [Getting Started](https://docs.yapily.com/#getting-started) steps if this is your first time here.<br><br>While testing the API, our list of [sandbox credentials](https://docs.yapily.com/guides/applications/institutions/sandbox/) maybe useful.  # noqa: E501

    The version of the OpenAPI document: 2.1.0
    Contact: support@yapily.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from yapily.configuration import Configuration


class FeatureEnum(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    allowed enum values
    """
    INITIATE_PRE_AUTHORISATION = "INITIATE_PRE_AUTHORISATION"
    INITIATE_PRE_AUTHORISATION_ACCOUNTS = "INITIATE_PRE_AUTHORISATION_ACCOUNTS"
    INITIATE_PRE_AUTHORISATION_PAYMENTS = "INITIATE_PRE_AUTHORISATION_PAYMENTS"
    INITIATE_ACCOUNT_REQUEST = "INITIATE_ACCOUNT_REQUEST"
    INITIATE_EMBEDDED_ACCOUNT_REQUEST = "INITIATE_EMBEDDED_ACCOUNT_REQUEST"
    ACCOUNT_REQUEST_DETAILS = "ACCOUNT_REQUEST_DETAILS"
    ACCOUNTS = "ACCOUNTS"
    ACCOUNT = "ACCOUNT"
    ACCOUNT_TRANSACTIONS = "ACCOUNT_TRANSACTIONS"
    ACCOUNT_STATEMENTS = "ACCOUNT_STATEMENTS"
    ACCOUNT_STATEMENT = "ACCOUNT_STATEMENT"
    ACCOUNT_STATEMENT_FILE = "ACCOUNT_STATEMENT_FILE"
    ACCOUNT_SCHEDULED_PAYMENTS = "ACCOUNT_SCHEDULED_PAYMENTS"
    ACCOUNT_DIRECT_DEBITS = "ACCOUNT_DIRECT_DEBITS"
    ACCOUNT_PERIODIC_PAYMENTS = "ACCOUNT_PERIODIC_PAYMENTS"
    ACCOUNT_TRANSACTIONS_WITH_MERCHANT = "ACCOUNT_TRANSACTIONS_WITH_MERCHANT"
    IDENTITY = "IDENTITY"
    ACCOUNTS_WITHOUT_BALANCE = "ACCOUNTS_WITHOUT_BALANCE"
    ACCOUNT_WITHOUT_BALANCE = "ACCOUNT_WITHOUT_BALANCE"
    ACCOUNT_BALANCES = "ACCOUNT_BALANCES"
    INITIATE_SINGLE_PAYMENT_SORTCODE = "INITIATE_SINGLE_PAYMENT_SORTCODE"
    EXISTING_PAYMENT_INITIATION_DETAILS = "EXISTING_PAYMENT_INITIATION_DETAILS"
    CREATE_SINGLE_PAYMENT_SORTCODE = "CREATE_SINGLE_PAYMENT_SORTCODE"
    EXISTING_PAYMENTS_DETAILS = "EXISTING_PAYMENTS_DETAILS"
    INITIATE_DOMESTIC_SINGLE_PAYMENT = "INITIATE_DOMESTIC_SINGLE_PAYMENT"
    INITIATE_EMBEDDED_DOMESTIC_SINGLE_PAYMENT = "INITIATE_EMBEDDED_DOMESTIC_SINGLE_PAYMENT"
    CREATE_DOMESTIC_SINGLE_PAYMENT = "CREATE_DOMESTIC_SINGLE_PAYMENT"
    INITIATE_EMBEDDED_BULK_PAYMENT = "INITIATE_EMBEDDED_BULK_PAYMENT"
    INITIATE_DOMESTIC_SINGLE_INSTANT_PAYMENT = "INITIATE_DOMESTIC_SINGLE_INSTANT_PAYMENT"
    CREATE_DOMESTIC_SINGLE_INSTANT_PAYMENT = "CREATE_DOMESTIC_SINGLE_INSTANT_PAYMENT"
    INITIATE_DOMESTIC_VARIABLE_RECURRING_PAYMENT = "INITIATE_DOMESTIC_VARIABLE_RECURRING_PAYMENT"
    CREATE_DOMESTIC_VARIABLE_RECURRING_PAYMENT = "CREATE_DOMESTIC_VARIABLE_RECURRING_PAYMENT"
    INITIATE_DOMESTIC_SCHEDULED_PAYMENT = "INITIATE_DOMESTIC_SCHEDULED_PAYMENT"
    CREATE_DOMESTIC_SCHEDULED_PAYMENT = "CREATE_DOMESTIC_SCHEDULED_PAYMENT"
    INITIATE_DOMESTIC_PERIODIC_PAYMENT = "INITIATE_DOMESTIC_PERIODIC_PAYMENT"
    CREATE_DOMESTIC_PERIODIC_PAYMENT = "CREATE_DOMESTIC_PERIODIC_PAYMENT"
    PERIODIC_PAYMENT_FREQUENCY_EXTENDED = "PERIODIC_PAYMENT_FREQUENCY_EXTENDED"
    INITIATE_INTERNATIONAL_VARIABLE_RECURRING_PAYMENT = "INITIATE_INTERNATIONAL_VARIABLE_RECURRING_PAYMENT"
    CREATE_INTERNATIONAL_VARIABLE_RECURRING_PAYMENT = "CREATE_INTERNATIONAL_VARIABLE_RECURRING_PAYMENT"
    INITIATE_INTERNATIONAL_SCHEDULED_PAYMENT = "INITIATE_INTERNATIONAL_SCHEDULED_PAYMENT"
    CREATE_INTERNATIONAL_SCHEDULED_PAYMENT = "CREATE_INTERNATIONAL_SCHEDULED_PAYMENT"
    INITIATE_INTERNATIONAL_PERIODIC_PAYMENT = "INITIATE_INTERNATIONAL_PERIODIC_PAYMENT"
    CREATE_INTERNATIONAL_PERIODIC_PAYMENT = "CREATE_INTERNATIONAL_PERIODIC_PAYMENT"
    INITIATE_INTERNATIONAL_SINGLE_PAYMENT = "INITIATE_INTERNATIONAL_SINGLE_PAYMENT"
    CREATE_INTERNATIONAL_SINGLE_PAYMENT = "CREATE_INTERNATIONAL_SINGLE_PAYMENT"
    INITIATE_BULK_PAYMENT = "INITIATE_BULK_PAYMENT"
    CREATE_BULK_PAYMENT = "CREATE_BULK_PAYMENT"
    TRANSFER = "TRANSFER"
    OPEN_DATA_PERSONAL_CURRENT_ACCOUNTS = "OPEN_DATA_PERSONAL_CURRENT_ACCOUNTS"
    OPEN_DATA_ATMS = "OPEN_DATA_ATMS"
    READ_DOMESTIC_SINGLE_REFUND = "READ_DOMESTIC_SINGLE_REFUND"
    READ_DOMESTIC_SCHEDULED_REFUND = "READ_DOMESTIC_SCHEDULED_REFUND"
    READ_DOMESTIC_PERIODIC_PAYMENT_REFUND = "READ_DOMESTIC_PERIODIC_PAYMENT_REFUND"
    READ_INTERNATIONAL_SINGLE_REFUND = "READ_INTERNATIONAL_SINGLE_REFUND"
    READ_INTERNATIONAL_SCHEDULED_REFUND = "READ_INTERNATIONAL_SCHEDULED_REFUND"
    ACCOUNT_BENEFICIARIES = "ACCOUNT_BENEFICIARIES"
    INITIATE_ONETIME_PRE_AUTHORISATION_PAYMENTS = "INITIATE_ONETIME_PRE_AUTHORISATION_PAYMENTS"

    allowable_values = [INITIATE_PRE_AUTHORISATION, INITIATE_PRE_AUTHORISATION_ACCOUNTS, INITIATE_PRE_AUTHORISATION_PAYMENTS, INITIATE_ACCOUNT_REQUEST, INITIATE_EMBEDDED_ACCOUNT_REQUEST, ACCOUNT_REQUEST_DETAILS, ACCOUNTS, ACCOUNT, ACCOUNT_TRANSACTIONS, ACCOUNT_STATEMENTS, ACCOUNT_STATEMENT, ACCOUNT_STATEMENT_FILE, ACCOUNT_SCHEDULED_PAYMENTS, ACCOUNT_DIRECT_DEBITS, ACCOUNT_PERIODIC_PAYMENTS, ACCOUNT_TRANSACTIONS_WITH_MERCHANT, IDENTITY, ACCOUNTS_WITHOUT_BALANCE, ACCOUNT_WITHOUT_BALANCE, ACCOUNT_BALANCES, INITIATE_SINGLE_PAYMENT_SORTCODE, EXISTING_PAYMENT_INITIATION_DETAILS, CREATE_SINGLE_PAYMENT_SORTCODE, EXISTING_PAYMENTS_DETAILS, INITIATE_DOMESTIC_SINGLE_PAYMENT, INITIATE_EMBEDDED_DOMESTIC_SINGLE_PAYMENT, CREATE_DOMESTIC_SINGLE_PAYMENT, INITIATE_EMBEDDED_BULK_PAYMENT, INITIATE_DOMESTIC_SINGLE_INSTANT_PAYMENT, CREATE_DOMESTIC_SINGLE_INSTANT_PAYMENT, INITIATE_DOMESTIC_VARIABLE_RECURRING_PAYMENT, CREATE_DOMESTIC_VARIABLE_RECURRING_PAYMENT, INITIATE_DOMESTIC_SCHEDULED_PAYMENT, CREATE_DOMESTIC_SCHEDULED_PAYMENT, INITIATE_DOMESTIC_PERIODIC_PAYMENT, CREATE_DOMESTIC_PERIODIC_PAYMENT, PERIODIC_PAYMENT_FREQUENCY_EXTENDED, INITIATE_INTERNATIONAL_VARIABLE_RECURRING_PAYMENT, CREATE_INTERNATIONAL_VARIABLE_RECURRING_PAYMENT, INITIATE_INTERNATIONAL_SCHEDULED_PAYMENT, CREATE_INTERNATIONAL_SCHEDULED_PAYMENT, INITIATE_INTERNATIONAL_PERIODIC_PAYMENT, CREATE_INTERNATIONAL_PERIODIC_PAYMENT, INITIATE_INTERNATIONAL_SINGLE_PAYMENT, CREATE_INTERNATIONAL_SINGLE_PAYMENT, INITIATE_BULK_PAYMENT, CREATE_BULK_PAYMENT, TRANSFER, OPEN_DATA_PERSONAL_CURRENT_ACCOUNTS, OPEN_DATA_ATMS, READ_DOMESTIC_SINGLE_REFUND, READ_DOMESTIC_SCHEDULED_REFUND, READ_DOMESTIC_PERIODIC_PAYMENT_REFUND, READ_INTERNATIONAL_SINGLE_REFUND, READ_INTERNATIONAL_SCHEDULED_REFUND, ACCOUNT_BENEFICIARIES, INITIATE_ONETIME_PRE_AUTHORISATION_PAYMENTS]  # noqa: E501

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
    }

    attribute_map = {
    }

    def __init__(self, local_vars_configuration=None):  # noqa: E501
        """FeatureEnum - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration
        self.discriminator = None

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FeatureEnum):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, FeatureEnum):
            return True

        return self.to_dict() != other.to_dict()
