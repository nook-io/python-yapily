# coding: utf-8

"""
    Yapily API

    The Yapily API enables connections between your application and users' banks. For more information check out our [documentation](https://docs.yapily.com/).<br><br>In particular, make sure to view our [Getting Started](https://docs.yapily.com/pages/home/getting-started/) steps if this is your first time here.<br><br>While testing the API, our list of [sandbox credentials](https://docs.yapily.com/pages/key-concepts/sandbox-credentials/) maybe useful.

    The version of the OpenAPI document: 2.25.0
    Contact: support@yapily.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date, datetime
from typing import Optional
from pydantic import BaseModel, Field, StrictStr
from yapily.models.virtual_account_payment_amount import VirtualAccountPaymentAmount
from yapily.models.virtual_account_payment_destination import VirtualAccountPaymentDestination
from yapily.models.virtual_account_payment_source import VirtualAccountPaymentSource

class VirtualAccountPayment(BaseModel):
    """
    VirtualAccountPayment
    """
    id: Optional[StrictStr] = Field(None, description="Unique id of the payment")
    created_date_time: Optional[datetime] = Field(None, alias="createdDateTime", description="Date and time that the payment was created")
    payment_date: Optional[date] = Field(None, alias="paymentDate", description="Date on which the payment instruction will be executed, that may be in the future")
    type: Optional[StrictStr] = Field(None, description="Type of payment. One of PAY_IN, PAY_OUT, RETURN_IN or RETURN_OUT")
    payment_scheme: Optional[StrictStr] = Field(None, alias="paymentScheme", description="Method of settlement to complete the payment. One of: <br> FASTER_PAYMENTS <br> SEPA_CREDIT <br> SEPA_INSTANT <br> SWIFT <br> SWIFT_EXPRESS <br> CHAPS <br> IAT <br> WIRE <br> TRANSFER")
    amount: Optional[VirtualAccountPaymentAmount] = None
    reference: Optional[StrictStr] = Field(None, description="Reference to be associated with the payment. This will be appear on the beneficiary's bank statement")
    status: Optional[StrictStr] = Field(None, description="The current state of the transaction <br> INITIATED - The transaction request is acknowledged and will not undergo validation checks <br> PENDING - Initial checks were successful and the payment is pending processing. This is primarily used for future dated payments that have not yet reached their payment date <br> PROCESSING - Initial checks succeeded and the transaction request is now being processed <br> COMPLETED - The transaction has been successfully processed (terminal status) <br> FAILED - An failure occured during transaction processing (terminal status)")
    source: Optional[VirtualAccountPaymentSource] = None
    destination: Optional[VirtualAccountPaymentDestination] = None
    original_payment_id: Optional[StrictStr] = Field(None, alias="originalPaymentId", description="Unique id of the original payment that was refunded")
    __properties = ["id", "createdDateTime", "paymentDate", "type", "paymentScheme", "amount", "reference", "status", "source", "destination", "originalPaymentId"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> VirtualAccountPayment:
        """Create an instance of VirtualAccountPayment from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of amount
        if self.amount:
            _dict['amount'] = self.amount.to_dict()
        # override the default output from pydantic by calling `to_dict()` of source
        if self.source:
            _dict['source'] = self.source.to_dict()
        # override the default output from pydantic by calling `to_dict()` of destination
        if self.destination:
            _dict['destination'] = self.destination.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> VirtualAccountPayment:
        """Create an instance of VirtualAccountPayment from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return VirtualAccountPayment.parse_obj(obj)

        _obj = VirtualAccountPayment.parse_obj({
            "id": obj.get("id"),
            "created_date_time": obj.get("createdDateTime"),
            "payment_date": obj.get("paymentDate"),
            "type": obj.get("type"),
            "payment_scheme": obj.get("paymentScheme"),
            "amount": VirtualAccountPaymentAmount.from_dict(obj.get("amount")) if obj.get("amount") is not None else None,
            "reference": obj.get("reference"),
            "status": obj.get("status"),
            "source": VirtualAccountPaymentSource.from_dict(obj.get("source")) if obj.get("source") is not None else None,
            "destination": VirtualAccountPaymentDestination.from_dict(obj.get("destination")) if obj.get("destination") is not None else None,
            "original_payment_id": obj.get("originalPaymentId")
        })
        return _obj


