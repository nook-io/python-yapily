# coding: utf-8

"""
Yapily API

The Yapily API enables connections between your application and users' banks. For more information check out our [documentation](https://docs.yapily.com/).<br><br>In particular, make sure to view our [Getting Started](https://docs.yapily.com/pages/home/getting-started/) steps if this is your first time here.<br><br>While testing the API, our list of [sandbox credentials](https://docs.yapily.com/pages/key-concepts/sandbox-credentials/) maybe useful.

The version of the OpenAPI document: 7.2.0
Contact: support@yapily.com
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Any, Dict, Optional, Union
from pydantic import BaseModel, Field, StrictFloat, StrictInt, StrictStr, conlist
from yapily.models.address_details import AddressDetails
from yapily.models.amount import Amount
from yapily.models.currency_exchange import CurrencyExchange
from yapily.models.enrichment import Enrichment
from yapily.models.iso_bank_transaction_code import IsoBankTransactionCode
from yapily.models.merchant import Merchant
from yapily.models.proprietary_bank_transaction_code import (
    ProprietaryBankTransactionCode,
)
from yapily.models.statement_reference import StatementReference
from yapily.models.transaction_balance import TransactionBalance
from yapily.models.transaction_charge_details import TransactionChargeDetails
from yapily.models.transaction_payee_details import TransactionPayeeDetails
from yapily.models.transaction_payer_details import TransactionPayerDetails
from yapily.models.transaction_status_enum import TransactionStatusEnum


class Transaction(BaseModel):
    """
    Details of a transaction (credit or debit) that has occurred on the account.  # noqa: E501
    """

    id: Optional[StrictStr] = Field(
        default=None, description="Unique identifier of the transaction."
    )
    var_date: Optional[datetime] = Field(default=None, alias="date")
    booking_date_time: Optional[datetime] = Field(
        default=None,
        alias="bookingDateTime",
        description="Date and time in UTC format of when a transaction was booked.",
    )
    value_date_time: Optional[datetime] = Field(
        default=None,
        alias="valueDateTime",
        description="Date and time in UTC format when the funds either cease to be available (for debit transactions) or become available (for credit transactions) to the account owner.",
    )
    status: Optional[TransactionStatusEnum] = None
    amount: Optional[Union[StrictFloat, StrictInt]] = Field(
        default=None, description="The transaction amount."
    )
    currency: Optional[StrictStr] = Field(
        default=None,
        description="Currency the transaction amount is denoted in. Specified as a 3-letter ISO 4217 code.",
    )
    transaction_amount: Optional[Amount] = Field(
        default=None, alias="transactionAmount"
    )
    gross_amount: Optional[Amount] = Field(default=None, alias="grossAmount")
    currency_exchange: Optional[CurrencyExchange] = Field(
        default=None, alias="currencyExchange"
    )
    charge_details: Optional[TransactionChargeDetails] = Field(
        default=None, alias="chargeDetails"
    )
    reference: Optional[StrictStr] = None
    statement_references: Optional[conlist(StatementReference)] = Field(
        default=None, alias="statementReferences"
    )
    description: Optional[StrictStr] = None
    transaction_information: Optional[conlist(StrictStr)] = Field(
        default=None,
        alias="transactionInformation",
        description="Further details on the transaction. This is narrative data, caught as unstructured text.",
    )
    address_details: Optional[AddressDetails] = Field(
        default=None, alias="addressDetails"
    )
    iso_bank_transaction_code: Optional[IsoBankTransactionCode] = Field(
        default=None, alias="isoBankTransactionCode"
    )
    proprietary_bank_transaction_code: Optional[ProprietaryBankTransactionCode] = Field(
        default=None, alias="proprietaryBankTransactionCode"
    )
    balance: Optional[TransactionBalance] = None
    payee_details: Optional[TransactionPayeeDetails] = Field(
        default=None, alias="payeeDetails"
    )
    payer_details: Optional[TransactionPayerDetails] = Field(
        default=None, alias="payerDetails"
    )
    merchant: Optional[Merchant] = None
    enrichment: Optional[Enrichment] = None
    supplementary_data: Optional[Dict[str, Any]] = Field(
        default=None,
        alias="supplementaryData",
        description="Additional information that cannot be captured in a structured field or block.",
    )
    transaction_mutability: Optional[StrictStr] = Field(
        default=None,
        alias="transactionMutability",
        description="__Optional__. Specifies the Mutability of the Transaction record.<ul><li>A transaction with a `Status` of `Pending` is mutable.</li><li>A transaction with a `Status` of `Booked` where the `TransactionMutability` flag is not specified is not guaranteed to be immutable (although in most instances it will be).</li><li>A transaction with a `Status` of `Booked` with the `TransactionMutability` flag set to `Immutable` is immutable.</li><li>A transaction with a `Status` of `Booked` with the `TransactionMutability` flag set to `Mutable` is mutable.</li></ul>",
    )
    __properties = [
        "id",
        "date",
        "bookingDateTime",
        "valueDateTime",
        "status",
        "amount",
        "currency",
        "transactionAmount",
        "grossAmount",
        "currencyExchange",
        "chargeDetails",
        "reference",
        "statementReferences",
        "description",
        "transactionInformation",
        "addressDetails",
        "isoBankTransactionCode",
        "proprietaryBankTransactionCode",
        "balance",
        "payeeDetails",
        "payerDetails",
        "merchant",
        "enrichment",
        "supplementaryData",
        "transactionMutability",
    ]

    class Config:
        """Pydantic configuration"""

        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Transaction:
        """Create an instance of Transaction from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of transaction_amount
        if self.transaction_amount:
            _dict["transactionAmount"] = self.transaction_amount.to_dict()
        # override the default output from pydantic by calling `to_dict()` of gross_amount
        if self.gross_amount:
            _dict["grossAmount"] = self.gross_amount.to_dict()
        # override the default output from pydantic by calling `to_dict()` of currency_exchange
        if self.currency_exchange:
            _dict["currencyExchange"] = self.currency_exchange.to_dict()
        # override the default output from pydantic by calling `to_dict()` of charge_details
        if self.charge_details:
            _dict["chargeDetails"] = self.charge_details.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in statement_references (list)
        _items = []
        if self.statement_references:
            for _item in self.statement_references:
                if _item:
                    _items.append(_item.to_dict())
            _dict["statementReferences"] = _items
        # override the default output from pydantic by calling `to_dict()` of address_details
        if self.address_details:
            _dict["addressDetails"] = self.address_details.to_dict()
        # override the default output from pydantic by calling `to_dict()` of iso_bank_transaction_code
        if self.iso_bank_transaction_code:
            _dict["isoBankTransactionCode"] = self.iso_bank_transaction_code.to_dict()
        # override the default output from pydantic by calling `to_dict()` of proprietary_bank_transaction_code
        if self.proprietary_bank_transaction_code:
            _dict["proprietaryBankTransactionCode"] = (
                self.proprietary_bank_transaction_code.to_dict()
            )
        # override the default output from pydantic by calling `to_dict()` of balance
        if self.balance:
            _dict["balance"] = self.balance.to_dict()
        # override the default output from pydantic by calling `to_dict()` of payee_details
        if self.payee_details:
            _dict["payeeDetails"] = self.payee_details.to_dict()
        # override the default output from pydantic by calling `to_dict()` of payer_details
        if self.payer_details:
            _dict["payerDetails"] = self.payer_details.to_dict()
        # override the default output from pydantic by calling `to_dict()` of merchant
        if self.merchant:
            _dict["merchant"] = self.merchant.to_dict()
        # override the default output from pydantic by calling `to_dict()` of enrichment
        if self.enrichment:
            _dict["enrichment"] = self.enrichment.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Transaction:
        """Create an instance of Transaction from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return Transaction.parse_obj(obj)

        _obj = Transaction.parse_obj(
            {
                "id": obj.get("id"),
                "var_date": obj.get("date"),
                "booking_date_time": obj.get("bookingDateTime"),
                "value_date_time": obj.get("valueDateTime"),
                "status": obj.get("status"),
                "amount": obj.get("amount"),
                "currency": obj.get("currency"),
                "transaction_amount": Amount.from_dict(obj.get("transactionAmount"))
                if obj.get("transactionAmount") is not None
                else None,
                "gross_amount": Amount.from_dict(obj.get("grossAmount"))
                if obj.get("grossAmount") is not None
                else None,
                "currency_exchange": CurrencyExchange.from_dict(
                    obj.get("currencyExchange")
                )
                if obj.get("currencyExchange") is not None
                else None,
                "charge_details": TransactionChargeDetails.from_dict(
                    obj.get("chargeDetails")
                )
                if obj.get("chargeDetails") is not None
                else None,
                "reference": obj.get("reference"),
                "statement_references": [
                    StatementReference.from_dict(_item)
                    for _item in obj.get("statementReferences")
                ]
                if obj.get("statementReferences") is not None
                else None,
                "description": obj.get("description"),
                "transaction_information": obj.get("transactionInformation"),
                "address_details": AddressDetails.from_dict(obj.get("addressDetails"))
                if obj.get("addressDetails") is not None
                else None,
                "iso_bank_transaction_code": IsoBankTransactionCode.from_dict(
                    obj.get("isoBankTransactionCode")
                )
                if obj.get("isoBankTransactionCode") is not None
                else None,
                "proprietary_bank_transaction_code": ProprietaryBankTransactionCode.from_dict(
                    obj.get("proprietaryBankTransactionCode")
                )
                if obj.get("proprietaryBankTransactionCode") is not None
                else None,
                "balance": TransactionBalance.from_dict(obj.get("balance"))
                if obj.get("balance") is not None
                else None,
                "payee_details": TransactionPayeeDetails.from_dict(
                    obj.get("payeeDetails")
                )
                if obj.get("payeeDetails") is not None
                else None,
                "payer_details": TransactionPayerDetails.from_dict(
                    obj.get("payerDetails")
                )
                if obj.get("payerDetails") is not None
                else None,
                "merchant": Merchant.from_dict(obj.get("merchant"))
                if obj.get("merchant") is not None
                else None,
                "enrichment": Enrichment.from_dict(obj.get("enrichment"))
                if obj.get("enrichment") is not None
                else None,
                "supplementary_data": obj.get("supplementaryData"),
                "transaction_mutability": obj.get("transactionMutability"),
            }
        )
        return _obj
