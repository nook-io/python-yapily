# coding: utf-8

"""
    Yapily API

    The Yapily API enables connections between your application and users' banks. For more information check out our [documentation](https://docs.yapily.com/).<br><br>In particular, make sure to view our [Getting Started](https://docs.yapily.com/pages/home/getting-started/) steps if this is your first time here.<br><br>While testing the API, our list of [sandbox credentials](https://docs.yapily.com/pages/key-concepts/sandbox-credentials/) maybe useful.

    The version of the OpenAPI document: 2.13.1
    Contact: support@yapily.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Any, ClassVar, Dict, List, Optional, Union
from pydantic import BaseModel, StrictFloat, StrictInt, StrictStr
from pydantic import Field
from yapily.models.address_details import AddressDetails
from yapily.models.amount import Amount
from yapily.models.currency_exchange import CurrencyExchange
from yapily.models.enrichment import Enrichment
from yapily.models.iso_bank_transaction_code import IsoBankTransactionCode
from yapily.models.merchant import Merchant
from yapily.models.payee import Payee
from yapily.models.payer import Payer
from yapily.models.proprietary_bank_transaction_code import ProprietaryBankTransactionCode
from yapily.models.statement_reference import StatementReference
from yapily.models.transaction_balance import TransactionBalance
from yapily.models.transaction_charge_details import TransactionChargeDetails
from yapily.models.transaction_status_enum import TransactionStatusEnum
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class Transaction(BaseModel):
    """
    Transaction
    """ # noqa: E501
    id: Optional[StrictStr] = None
    var_date: Optional[datetime] = Field(default=None, alias="date")
    booking_date_time: Optional[datetime] = Field(default=None, alias="bookingDateTime")
    value_date_time: Optional[datetime] = Field(default=None, alias="valueDateTime")
    status: Optional[TransactionStatusEnum] = None
    amount: Optional[Union[StrictFloat, StrictInt]] = None
    currency: Optional[StrictStr] = None
    transaction_amount: Optional[Amount] = Field(default=None, alias="transactionAmount")
    gross_amount: Optional[Amount] = Field(default=None, alias="grossAmount")
    currency_exchange: Optional[CurrencyExchange] = Field(default=None, alias="currencyExchange")
    charge_details: Optional[TransactionChargeDetails] = Field(default=None, alias="chargeDetails")
    reference: Optional[StrictStr] = None
    statement_references: Optional[List[StatementReference]] = Field(default=None, alias="statementReferences")
    description: Optional[StrictStr] = None
    transaction_information: Optional[List[StrictStr]] = Field(default=None, alias="transactionInformation")
    address_details: Optional[AddressDetails] = Field(default=None, alias="addressDetails")
    iso_bank_transaction_code: Optional[IsoBankTransactionCode] = Field(default=None, alias="isoBankTransactionCode")
    proprietary_bank_transaction_code: Optional[ProprietaryBankTransactionCode] = Field(default=None, alias="proprietaryBankTransactionCode")
    balance: Optional[TransactionBalance] = None
    payee_details: Optional[Payee] = Field(default=None, alias="payeeDetails")
    payer_details: Optional[Payer] = Field(default=None, alias="payerDetails")
    merchant: Optional[Merchant] = None
    enrichment: Optional[Enrichment] = None
    supplementary_data: Optional[Dict[str, Any]] = Field(default=None, alias="supplementaryData")
    transaction_mutability: Optional[StrictStr] = Field(default=None, description="__Optional__. Specifies the Mutability of the Transaction record.<ul><li>A transaction with a `Status` of `Pending` is mutable.</li><li>A transaction with a `Status` of `Booked` where the `TransactionMutability` flag is not specified is not guaranteed to be immutable (although in most instances it will be).</li><li>A transaction with a `Status` of `Booked` with the `TransactionMutability` flag set to `Immutable` is immutable.</li><li>A transaction with a `Status` of `Booked` with the `TransactionMutability` flag set to `Mutable` is mutable.</li></ul>", alias="transactionMutability")
    __properties: ClassVar[List[str]] = ["id", "date", "bookingDateTime", "valueDateTime", "status", "amount", "currency", "transactionAmount", "grossAmount", "currencyExchange", "chargeDetails", "reference", "statementReferences", "description", "transactionInformation", "addressDetails", "isoBankTransactionCode", "proprietaryBankTransactionCode", "balance", "payeeDetails", "payerDetails", "merchant", "enrichment", "supplementaryData", "transactionMutability"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of Transaction from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of transaction_amount
        if self.transaction_amount:
            _dict['transactionAmount'] = self.transaction_amount.to_dict()
        # override the default output from pydantic by calling `to_dict()` of gross_amount
        if self.gross_amount:
            _dict['grossAmount'] = self.gross_amount.to_dict()
        # override the default output from pydantic by calling `to_dict()` of currency_exchange
        if self.currency_exchange:
            _dict['currencyExchange'] = self.currency_exchange.to_dict()
        # override the default output from pydantic by calling `to_dict()` of charge_details
        if self.charge_details:
            _dict['chargeDetails'] = self.charge_details.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in statement_references (list)
        _items = []
        if self.statement_references:
            for _item in self.statement_references:
                if _item:
                    _items.append(_item.to_dict())
            _dict['statementReferences'] = _items
        # override the default output from pydantic by calling `to_dict()` of address_details
        if self.address_details:
            _dict['addressDetails'] = self.address_details.to_dict()
        # override the default output from pydantic by calling `to_dict()` of iso_bank_transaction_code
        if self.iso_bank_transaction_code:
            _dict['isoBankTransactionCode'] = self.iso_bank_transaction_code.to_dict()
        # override the default output from pydantic by calling `to_dict()` of proprietary_bank_transaction_code
        if self.proprietary_bank_transaction_code:
            _dict['proprietaryBankTransactionCode'] = self.proprietary_bank_transaction_code.to_dict()
        # override the default output from pydantic by calling `to_dict()` of balance
        if self.balance:
            _dict['balance'] = self.balance.to_dict()
        # override the default output from pydantic by calling `to_dict()` of payee_details
        if self.payee_details:
            _dict['payeeDetails'] = self.payee_details.to_dict()
        # override the default output from pydantic by calling `to_dict()` of payer_details
        if self.payer_details:
            _dict['payerDetails'] = self.payer_details.to_dict()
        # override the default output from pydantic by calling `to_dict()` of merchant
        if self.merchant:
            _dict['merchant'] = self.merchant.to_dict()
        # override the default output from pydantic by calling `to_dict()` of enrichment
        if self.enrichment:
            _dict['enrichment'] = self.enrichment.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of Transaction from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "date": obj.get("date"),
            "bookingDateTime": obj.get("bookingDateTime"),
            "valueDateTime": obj.get("valueDateTime"),
            "status": obj.get("status"),
            "amount": obj.get("amount"),
            "currency": obj.get("currency"),
            "transactionAmount": Amount.from_dict(obj.get("transactionAmount")) if obj.get("transactionAmount") is not None else None,
            "grossAmount": Amount.from_dict(obj.get("grossAmount")) if obj.get("grossAmount") is not None else None,
            "currencyExchange": CurrencyExchange.from_dict(obj.get("currencyExchange")) if obj.get("currencyExchange") is not None else None,
            "chargeDetails": TransactionChargeDetails.from_dict(obj.get("chargeDetails")) if obj.get("chargeDetails") is not None else None,
            "reference": obj.get("reference"),
            "statementReferences": [StatementReference.from_dict(_item) for _item in obj.get("statementReferences")] if obj.get("statementReferences") is not None else None,
            "description": obj.get("description"),
            "transactionInformation": obj.get("transactionInformation"),
            "addressDetails": AddressDetails.from_dict(obj.get("addressDetails")) if obj.get("addressDetails") is not None else None,
            "isoBankTransactionCode": IsoBankTransactionCode.from_dict(obj.get("isoBankTransactionCode")) if obj.get("isoBankTransactionCode") is not None else None,
            "proprietaryBankTransactionCode": ProprietaryBankTransactionCode.from_dict(obj.get("proprietaryBankTransactionCode")) if obj.get("proprietaryBankTransactionCode") is not None else None,
            "balance": TransactionBalance.from_dict(obj.get("balance")) if obj.get("balance") is not None else None,
            "payeeDetails": Payee.from_dict(obj.get("payeeDetails")) if obj.get("payeeDetails") is not None else None,
            "payerDetails": Payer.from_dict(obj.get("payerDetails")) if obj.get("payerDetails") is not None else None,
            "merchant": Merchant.from_dict(obj.get("merchant")) if obj.get("merchant") is not None else None,
            "enrichment": Enrichment.from_dict(obj.get("enrichment")) if obj.get("enrichment") is not None else None,
            "supplementaryData": obj.get("supplementaryData"),
            "transactionMutability": obj.get("transactionMutability")
        })
        return _obj


