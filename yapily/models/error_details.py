# coding: utf-8

"""
    Yapily API

    The Yapily API enables connections between your application and users' banks. For more information check out our [documentation](https://docs.yapily.com/).<br><br>In particular, make sure to view our [Getting Started](https://docs.yapily.com/pages/home/getting-started/) steps if this is your first time here.<br><br>While testing the API, our list of [sandbox credentials](https://docs.yapily.com/pages/key-concepts/sandbox-credentials/) maybe useful.  # noqa: E501

    The version of the OpenAPI document: 2.13.1
    Contact: support@yapily.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from yapily.configuration import Configuration


class ErrorDetails(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'tracing_id': 'str',
        'code': 'int',
        'status': 'str',
        'support_url': 'str',
        'source': 'str',
        'issues': 'list[ErrorIssue]'
    }

    attribute_map = {
        'tracing_id': 'tracingId',
        'code': 'code',
        'status': 'status',
        'support_url': 'supportUrl',
        'source': 'source',
        'issues': 'issues'
    }

    def __init__(self, tracing_id=None, code=None, status=None, support_url=None, source=None, issues=None, local_vars_configuration=None):  # noqa: E501
        """ErrorDetails - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._tracing_id = None
        self._code = None
        self._status = None
        self._support_url = None
        self._source = None
        self._issues = None
        self.discriminator = None

        self.tracing_id = tracing_id
        self.code = code
        self.status = status
        if support_url is not None:
            self.support_url = support_url
        if source is not None:
            self.source = source
        if issues is not None:
            self.issues = issues

    @property
    def tracing_id(self):
        """Gets the tracing_id of this ErrorDetails.  # noqa: E501

        Unique identifier of the request, used by Yapily for support purposes  # noqa: E501

        :return: The tracing_id of this ErrorDetails.  # noqa: E501
        :rtype: str
        """
        return self._tracing_id

    @tracing_id.setter
    def tracing_id(self, tracing_id):
        """Sets the tracing_id of this ErrorDetails.

        Unique identifier of the request, used by Yapily for support purposes  # noqa: E501

        :param tracing_id: The tracing_id of this ErrorDetails.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and tracing_id is None:  # noqa: E501
            raise ValueError("Invalid value for `tracing_id`, must not be `None`")  # noqa: E501

        self._tracing_id = tracing_id

    @property
    def code(self):
        """Gets the code of this ErrorDetails.  # noqa: E501

        Numeric HTTP status code associated with the error  # noqa: E501

        :return: The code of this ErrorDetails.  # noqa: E501
        :rtype: int
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this ErrorDetails.

        Numeric HTTP status code associated with the error  # noqa: E501

        :param code: The code of this ErrorDetails.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and code is None:  # noqa: E501
            raise ValueError("Invalid value for `code`, must not be `None`")  # noqa: E501

        self._code = code

    @property
    def status(self):
        """Gets the status of this ErrorDetails.  # noqa: E501

        Textual description of the HTTP status  # noqa: E501

        :return: The status of this ErrorDetails.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ErrorDetails.

        Textual description of the HTTP status  # noqa: E501

        :param status: The status of this ErrorDetails.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and status is None:  # noqa: E501
            raise ValueError("Invalid value for `status`, must not be `None`")  # noqa: E501

        self._status = status

    @property
    def support_url(self):
        """Gets the support_url of this ErrorDetails.  # noqa: E501

        Link to where further information regarding the error can be found  # noqa: E501

        :return: The support_url of this ErrorDetails.  # noqa: E501
        :rtype: str
        """
        return self._support_url

    @support_url.setter
    def support_url(self, support_url):
        """Sets the support_url of this ErrorDetails.

        Link to where further information regarding the error can be found  # noqa: E501

        :param support_url: The support_url of this ErrorDetails.  # noqa: E501
        :type: str
        """

        self._support_url = support_url

    @property
    def source(self):
        """Gets the source of this ErrorDetails.  # noqa: E501

        Source of the error. This may be YAPILY, the INSTITUTION, or the USER  # noqa: E501

        :return: The source of this ErrorDetails.  # noqa: E501
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this ErrorDetails.

        Source of the error. This may be YAPILY, the INSTITUTION, or the USER  # noqa: E501

        :param source: The source of this ErrorDetails.  # noqa: E501
        :type: str
        """

        self._source = source

    @property
    def issues(self):
        """Gets the issues of this ErrorDetails.  # noqa: E501

        List of issues relating to the error  # noqa: E501

        :return: The issues of this ErrorDetails.  # noqa: E501
        :rtype: list[ErrorIssue]
        """
        return self._issues

    @issues.setter
    def issues(self, issues):
        """Sets the issues of this ErrorDetails.

        List of issues relating to the error  # noqa: E501

        :param issues: The issues of this ErrorDetails.  # noqa: E501
        :type: list[ErrorIssue]
        """

        self._issues = issues

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ErrorDetails):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ErrorDetails):
            return True

        return self.to_dict() != other.to_dict()
