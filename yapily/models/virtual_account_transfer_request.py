# coding: utf-8

"""
    Yapily API

    The Yapily API enables connections between your application and users' banks. For more information check out our [documentation](https://docs.yapily.com/).<br><br>In particular, make sure to view our [Getting Started](https://docs.yapily.com/pages/home/getting-started/) steps if this is your first time here.<br><br>While testing the API, our list of [sandbox credentials](https://docs.yapily.com/pages/key-concepts/sandbox-credentials/) maybe useful.

    The version of the OpenAPI document: 2.25.0
    Contact: support@yapily.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json



from pydantic import BaseModel, Field, StrictStr
from yapily.models.virtual_account_payment_amount import VirtualAccountPaymentAmount
from yapily.models.virtual_account_transfer_destination import VirtualAccountTransferDestination
from yapily.models.virtual_account_transfer_source import VirtualAccountTransferSource

class VirtualAccountTransferRequest(BaseModel):
    """
    VirtualAccountTransferRequest
    """
    amount: VirtualAccountPaymentAmount = Field(...)
    reference: StrictStr = Field(..., description="Reference to be associated with the transfer. This will be appear on the destination's bank statement")
    source: VirtualAccountTransferSource = Field(...)
    destination: VirtualAccountTransferDestination = Field(...)
    __properties = ["amount", "reference", "source", "destination"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> VirtualAccountTransferRequest:
        """Create an instance of VirtualAccountTransferRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of amount
        if self.amount:
            _dict['amount'] = self.amount.to_dict()
        # override the default output from pydantic by calling `to_dict()` of source
        if self.source:
            _dict['source'] = self.source.to_dict()
        # override the default output from pydantic by calling `to_dict()` of destination
        if self.destination:
            _dict['destination'] = self.destination.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> VirtualAccountTransferRequest:
        """Create an instance of VirtualAccountTransferRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return VirtualAccountTransferRequest.parse_obj(obj)

        _obj = VirtualAccountTransferRequest.parse_obj({
            "amount": VirtualAccountPaymentAmount.from_dict(obj.get("amount")) if obj.get("amount") is not None else None,
            "reference": obj.get("reference"),
            "source": VirtualAccountTransferSource.from_dict(obj.get("source")) if obj.get("source") is not None else None,
            "destination": VirtualAccountTransferDestination.from_dict(obj.get("destination")) if obj.get("destination") is not None else None
        })
        return _obj


