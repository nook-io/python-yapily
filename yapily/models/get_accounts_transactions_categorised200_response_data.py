# coding: utf-8

"""
Yapily API

The Yapily API enables connections between your application and users' banks. For more information check out our [documentation](https://docs.yapily.com/).<br><br>In particular, make sure to view our [Getting Started](https://docs.yapily.com/pages/home/getting-started/) steps if this is your first time here.<br><br>While testing the API, our list of [sandbox credentials](https://docs.yapily.com/pages/key-concepts/sandbox-credentials/) maybe useful.

The version of the OpenAPI document: 7.2.0
Contact: support@yapily.com
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, conlist
from yapily.models.get_accounts_transactions_categorised200_response_data_transactions_inner import (
    GetAccountsTransactionsCategorised200ResponseDataTransactionsInner,
)


class GetAccountsTransactionsCategorised200ResponseData(BaseModel):
    """
    GetAccountsTransactionsCategorised200ResponseData
    """

    transactions: Optional[
        conlist(GetAccountsTransactionsCategorised200ResponseDataTransactionsInner)
    ] = None
    __properties = ["transactions"]

    class Config:
        """Pydantic configuration"""

        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(
        cls, json_str: str
    ) -> GetAccountsTransactionsCategorised200ResponseData:
        """Create an instance of GetAccountsTransactionsCategorised200ResponseData from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in transactions (list)
        _items = []
        if self.transactions:
            for _item in self.transactions:
                if _item:
                    _items.append(_item.to_dict())
            _dict["transactions"] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> GetAccountsTransactionsCategorised200ResponseData:
        """Create an instance of GetAccountsTransactionsCategorised200ResponseData from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return GetAccountsTransactionsCategorised200ResponseData.parse_obj(obj)

        _obj = GetAccountsTransactionsCategorised200ResponseData.parse_obj(
            {
                "transactions": [
                    GetAccountsTransactionsCategorised200ResponseDataTransactionsInner.from_dict(
                        _item
                    )
                    for _item in obj.get("transactions")
                ]
                if obj.get("transactions") is not None
                else None
            }
        )
        return _obj
