# coding: utf-8

"""
    Yapily API

    The Yapily API enables connections between your application and users' banks. For more information check out our [documentation](https://docs.yapily.com/).<br><br>In particular, make sure to view our [Getting Started](https://docs.yapily.com/pages/home/getting-started/) steps if this is your first time here.<br><br>While testing the API, our list of [sandbox credentials](https://docs.yapily.com/pages/key-concepts/sandbox-credentials/) maybe useful.

    The version of the OpenAPI document: 2.13.1
    Contact: support@yapily.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, StrictStr
from pydantic import Field
from yapily.models.virtual_account_beneficiary_account import VirtualAccountBeneficiaryAccount
from yapily.models.virtual_account_beneficiary_address import VirtualAccountBeneficiaryAddress
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class VirtualAccountBeneficiaryRequest(BaseModel):
    """
    VirtualAccountBeneficiaryRequest
    """ # noqa: E501
    nickname: StrictStr = Field(description="Reference that can be provided in order to help with identification of the Beneficiary")
    type: StrictStr = Field(description="Indicates the type of Beneficiary as either an INDIVIDUAL or BUSINESS")
    name: StrictStr
    birth_date: Optional[date] = Field(default=None, alias="birthDate")
    payment_schemes: List[StrictStr] = Field(description="Beneficiary payment schemes", alias="paymentSchemes")
    address: VirtualAccountBeneficiaryAddress
    account: VirtualAccountBeneficiaryAccount
    __properties: ClassVar[List[str]] = ["nickname", "type", "name", "birthDate", "paymentSchemes", "address", "account"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of VirtualAccountBeneficiaryRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of address
        if self.address:
            _dict['address'] = self.address.to_dict()
        # override the default output from pydantic by calling `to_dict()` of account
        if self.account:
            _dict['account'] = self.account.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of VirtualAccountBeneficiaryRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "nickname": obj.get("nickname"),
            "type": obj.get("type"),
            "name": obj.get("name"),
            "birthDate": obj.get("birthDate"),
            "paymentSchemes": obj.get("paymentSchemes"),
            "address": VirtualAccountBeneficiaryAddress.from_dict(obj.get("address")) if obj.get("address") is not None else None,
            "account": VirtualAccountBeneficiaryAccount.from_dict(obj.get("account")) if obj.get("account") is not None else None
        })
        return _obj


