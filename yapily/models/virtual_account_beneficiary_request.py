# coding: utf-8

"""
    Yapily API

    The Yapily API enables connections between your application and users' banks. For more information check out our [documentation](https://docs.yapily.com/).<br><br>In particular, make sure to view our [Getting Started](https://docs.yapily.com/pages/home/getting-started/) steps if this is your first time here.<br><br>While testing the API, our list of [sandbox credentials](https://docs.yapily.com/pages/key-concepts/sandbox-credentials/) maybe useful.  # noqa: E501

    The version of the OpenAPI document: 2.13.1
    Contact: support@yapily.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from yapily.configuration import Configuration


class VirtualAccountBeneficiaryRequest(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'nickname': 'str',
        'type': 'str',
        'name': 'str',
        'birth_date': 'date',
        'payment_schemes': 'list[str]',
        'address': 'VirtualAccountBeneficiaryAddress',
        'account': 'VirtualAccountBeneficiaryAccount'
    }

    attribute_map = {
        'nickname': 'nickname',
        'type': 'type',
        'name': 'name',
        'birth_date': 'birthDate',
        'payment_schemes': 'paymentSchemes',
        'address': 'address',
        'account': 'account'
    }

    def __init__(self, nickname=None, type=None, name=None, birth_date=None, payment_schemes=None, address=None, account=None, local_vars_configuration=None):  # noqa: E501
        """VirtualAccountBeneficiaryRequest - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._nickname = None
        self._type = None
        self._name = None
        self._birth_date = None
        self._payment_schemes = None
        self._address = None
        self._account = None
        self.discriminator = None

        self.nickname = nickname
        self.type = type
        self.name = name
        if birth_date is not None:
            self.birth_date = birth_date
        self.payment_schemes = payment_schemes
        self.address = address
        self.account = account

    @property
    def nickname(self):
        """Gets the nickname of this VirtualAccountBeneficiaryRequest.  # noqa: E501

        Reference that can be provided in order to help with identification of the Beneficiary  # noqa: E501

        :return: The nickname of this VirtualAccountBeneficiaryRequest.  # noqa: E501
        :rtype: str
        """
        return self._nickname

    @nickname.setter
    def nickname(self, nickname):
        """Sets the nickname of this VirtualAccountBeneficiaryRequest.

        Reference that can be provided in order to help with identification of the Beneficiary  # noqa: E501

        :param nickname: The nickname of this VirtualAccountBeneficiaryRequest.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and nickname is None:  # noqa: E501
            raise ValueError("Invalid value for `nickname`, must not be `None`")  # noqa: E501

        self._nickname = nickname

    @property
    def type(self):
        """Gets the type of this VirtualAccountBeneficiaryRequest.  # noqa: E501

        Indicates the type of Beneficiary as either an INDIVIDUAL or BUSINESS  # noqa: E501

        :return: The type of this VirtualAccountBeneficiaryRequest.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this VirtualAccountBeneficiaryRequest.

        Indicates the type of Beneficiary as either an INDIVIDUAL or BUSINESS  # noqa: E501

        :param type: The type of this VirtualAccountBeneficiaryRequest.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and type is None:  # noqa: E501
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type

    @property
    def name(self):
        """Gets the name of this VirtualAccountBeneficiaryRequest.  # noqa: E501


        :return: The name of this VirtualAccountBeneficiaryRequest.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this VirtualAccountBeneficiaryRequest.


        :param name: The name of this VirtualAccountBeneficiaryRequest.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and name is None:  # noqa: E501
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def birth_date(self):
        """Gets the birth_date of this VirtualAccountBeneficiaryRequest.  # noqa: E501


        :return: The birth_date of this VirtualAccountBeneficiaryRequest.  # noqa: E501
        :rtype: date
        """
        return self._birth_date

    @birth_date.setter
    def birth_date(self, birth_date):
        """Sets the birth_date of this VirtualAccountBeneficiaryRequest.


        :param birth_date: The birth_date of this VirtualAccountBeneficiaryRequest.  # noqa: E501
        :type: date
        """

        self._birth_date = birth_date

    @property
    def payment_schemes(self):
        """Gets the payment_schemes of this VirtualAccountBeneficiaryRequest.  # noqa: E501

        Beneficiary payment schemes  # noqa: E501

        :return: The payment_schemes of this VirtualAccountBeneficiaryRequest.  # noqa: E501
        :rtype: list[str]
        """
        return self._payment_schemes

    @payment_schemes.setter
    def payment_schemes(self, payment_schemes):
        """Sets the payment_schemes of this VirtualAccountBeneficiaryRequest.

        Beneficiary payment schemes  # noqa: E501

        :param payment_schemes: The payment_schemes of this VirtualAccountBeneficiaryRequest.  # noqa: E501
        :type: list[str]
        """
        if self.local_vars_configuration.client_side_validation and payment_schemes is None:  # noqa: E501
            raise ValueError("Invalid value for `payment_schemes`, must not be `None`")  # noqa: E501

        self._payment_schemes = payment_schemes

    @property
    def address(self):
        """Gets the address of this VirtualAccountBeneficiaryRequest.  # noqa: E501


        :return: The address of this VirtualAccountBeneficiaryRequest.  # noqa: E501
        :rtype: VirtualAccountBeneficiaryAddress
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this VirtualAccountBeneficiaryRequest.


        :param address: The address of this VirtualAccountBeneficiaryRequest.  # noqa: E501
        :type: VirtualAccountBeneficiaryAddress
        """
        if self.local_vars_configuration.client_side_validation and address is None:  # noqa: E501
            raise ValueError("Invalid value for `address`, must not be `None`")  # noqa: E501

        self._address = address

    @property
    def account(self):
        """Gets the account of this VirtualAccountBeneficiaryRequest.  # noqa: E501


        :return: The account of this VirtualAccountBeneficiaryRequest.  # noqa: E501
        :rtype: VirtualAccountBeneficiaryAccount
        """
        return self._account

    @account.setter
    def account(self, account):
        """Sets the account of this VirtualAccountBeneficiaryRequest.


        :param account: The account of this VirtualAccountBeneficiaryRequest.  # noqa: E501
        :type: VirtualAccountBeneficiaryAccount
        """
        if self.local_vars_configuration.client_side_validation and account is None:  # noqa: E501
            raise ValueError("Invalid value for `account`, must not be `None`")  # noqa: E501

        self._account = account

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, VirtualAccountBeneficiaryRequest):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, VirtualAccountBeneficiaryRequest):
            return True

        return self.to_dict() != other.to_dict()
