# coding: utf-8

"""
Yapily API

The Yapily API enables connections between your application and users' banks. For more information check out our [documentation](https://docs.yapily.com/).<br><br>In particular, make sure to view our [Getting Started](https://docs.yapily.com/pages/home/getting-started/) steps if this is your first time here.<br><br>While testing the API, our list of [sandbox credentials](https://docs.yapily.com/pages/key-concepts/sandbox-credentials/) maybe useful.

The version of the OpenAPI document: 4.2.0
Contact: support@yapily.com
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

import re  # noqa: F401

from pydantic import validate_arguments

from typing_extensions import Annotated
from pydantic import Field, StrictStr

from typing import Optional

from yapily.models.api_response_of_create_hosted_payment_request import (
    ApiResponseOfCreateHostedPaymentRequest,
)
from yapily.models.api_response_of_create_hosted_payment_request_link import (
    ApiResponseOfCreateHostedPaymentRequestLink,
)
from yapily.models.api_response_of_create_hosted_vrp_consent_request import (
    ApiResponseOfCreateHostedVRPConsentRequest,
)
from yapily.models.api_response_of_create_hosted_vrp_payment_request import (
    ApiResponseOfCreateHostedVRPPaymentRequest,
)
from yapily.models.api_response_of_funds_confirmation_response import (
    ApiResponseOfFundsConfirmationResponse,
)
from yapily.models.api_response_of_get_hosted_payment_request import (
    ApiResponseOfGetHostedPaymentRequest,
)
from yapily.models.api_response_of_get_hosted_vrp_consent_request import (
    ApiResponseOfGetHostedVRPConsentRequest,
)
from yapily.models.api_response_of_get_hosted_vrp_consents_request import (
    ApiResponseOfGetHostedVRPConsentsRequest,
)
from yapily.models.api_response_of_get_hosted_vrp_payment_request import (
    ApiResponseOfGetHostedVRPPaymentRequest,
)
from yapily.models.api_response_of_revoke_hosted_vrp_consent_request import (
    ApiResponseOfRevokeHostedVRPConsentRequest,
)
from yapily.models.create_hosted_payment_request import CreateHostedPaymentRequest
from yapily.models.create_hosted_payment_request_link import (
    CreateHostedPaymentRequestLink,
)
from yapily.models.create_hosted_vrp_consent_request import (
    CreateHostedVRPConsentRequest,
)
from yapily.models.create_hosted_vrp_payment_request import (
    CreateHostedVRPPaymentRequest,
)
from yapily.models.funds_confirmation_request import FundsConfirmationRequest

from yapily.api_client import ApiClient
from yapily.api_response import ApiResponse
from yapily.exceptions import (  # noqa: F401
    ApiTypeError,
    ApiValueError,
)


class HostedPagesApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client

    @validate_arguments
    def create_hosted_payment_request(
        self, create_hosted_payment_request: CreateHostedPaymentRequest, **kwargs
    ) -> ApiResponseOfCreateHostedPaymentRequest:  # noqa: E501
        """Create Hosted payment request  # noqa: E501

        Used to initiate a payment request using Yapily Hosted Pages.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_hosted_payment_request(create_hosted_payment_request, async_req=True)
        >>> result = thread.get()

        :param create_hosted_payment_request: (required)
        :type create_hosted_payment_request: CreateHostedPaymentRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ApiResponseOfCreateHostedPaymentRequest
        """
        kwargs["_return_http_data_only"] = True
        if "_preload_content" in kwargs:
            message = "Error! Please call the create_hosted_payment_request_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.create_hosted_payment_request_with_http_info(
            create_hosted_payment_request, **kwargs
        )  # noqa: E501

    @validate_arguments
    def create_hosted_payment_request_with_http_info(
        self, create_hosted_payment_request: CreateHostedPaymentRequest, **kwargs
    ) -> ApiResponse:  # noqa: E501
        """Create Hosted payment request  # noqa: E501

        Used to initiate a payment request using Yapily Hosted Pages.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_hosted_payment_request_with_http_info(create_hosted_payment_request, async_req=True)
        >>> result = thread.get()

        :param create_hosted_payment_request: (required)
        :type create_hosted_payment_request: CreateHostedPaymentRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(ApiResponseOfCreateHostedPaymentRequest, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = ["create_hosted_payment_request"]
        _all_params.extend(
            [
                "async_req",
                "_return_http_data_only",
                "_preload_content",
                "_request_timeout",
                "_request_auth",
                "_content_type",
                "_headers",
            ]
        )

        # validate the arguments
        for _key, _val in _params["kwargs"].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_hosted_payment_request" % _key
                )
            _params[_key] = _val
        del _params["kwargs"]

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get("_headers", {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params["create_hosted_payment_request"] is not None:
            _body_params = _params["create_hosted_payment_request"]

        # set the HTTP header `Accept`
        _header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json;charset=UTF-8"]
        )  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get(
            "_content_type",
            self.api_client.select_header_content_type(
                ["application/json;charset=UTF-8"]
            ),
        )
        if _content_types_list:
            _header_params["Content-Type"] = _content_types_list

        # authentication setting
        _auth_settings = ["basicAuth"]  # noqa: E501

        _response_types_map = {
            "201": "ApiResponseOfCreateHostedPaymentRequest",
            "400": "ApiResponseError",
            "401": "ApiResponseError",
            "500": "ApiResponseError",
        }

        return self.api_client.call_api(
            "/hosted/payment-requests",
            "POST",
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get("async_req"),
            _return_http_data_only=_params.get("_return_http_data_only"),  # noqa: E501
            _preload_content=_params.get("_preload_content", True),
            _request_timeout=_params.get("_request_timeout"),
            collection_formats=_collection_formats,
            _request_auth=_params.get("_request_auth"),
        )

    @validate_arguments
    def create_hosted_payment_request_link(
        self,
        create_hosted_payment_request_link: CreateHostedPaymentRequestLink,
        **kwargs,
    ) -> ApiResponseOfCreateHostedPaymentRequestLink:  # noqa: E501
        """Create Pay By Link  # noqa: E501

        Used to created a long lived payment request for Pay By Link  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_hosted_payment_request_link(create_hosted_payment_request_link, async_req=True)
        >>> result = thread.get()

        :param create_hosted_payment_request_link: (required)
        :type create_hosted_payment_request_link: CreateHostedPaymentRequestLink
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ApiResponseOfCreateHostedPaymentRequestLink
        """
        kwargs["_return_http_data_only"] = True
        if "_preload_content" in kwargs:
            message = "Error! Please call the create_hosted_payment_request_link_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.create_hosted_payment_request_link_with_http_info(
            create_hosted_payment_request_link, **kwargs
        )  # noqa: E501

    @validate_arguments
    def create_hosted_payment_request_link_with_http_info(
        self,
        create_hosted_payment_request_link: CreateHostedPaymentRequestLink,
        **kwargs,
    ) -> ApiResponse:  # noqa: E501
        """Create Pay By Link  # noqa: E501

        Used to created a long lived payment request for Pay By Link  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_hosted_payment_request_link_with_http_info(create_hosted_payment_request_link, async_req=True)
        >>> result = thread.get()

        :param create_hosted_payment_request_link: (required)
        :type create_hosted_payment_request_link: CreateHostedPaymentRequestLink
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(ApiResponseOfCreateHostedPaymentRequestLink, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = ["create_hosted_payment_request_link"]
        _all_params.extend(
            [
                "async_req",
                "_return_http_data_only",
                "_preload_content",
                "_request_timeout",
                "_request_auth",
                "_content_type",
                "_headers",
            ]
        )

        # validate the arguments
        for _key, _val in _params["kwargs"].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_hosted_payment_request_link" % _key
                )
            _params[_key] = _val
        del _params["kwargs"]

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get("_headers", {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params["create_hosted_payment_request_link"] is not None:
            _body_params = _params["create_hosted_payment_request_link"]

        # set the HTTP header `Accept`
        _header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json;charset=UTF-8"]
        )  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get(
            "_content_type",
            self.api_client.select_header_content_type(
                ["application/json;charset=UTF-8"]
            ),
        )
        if _content_types_list:
            _header_params["Content-Type"] = _content_types_list

        # authentication setting
        _auth_settings = ["basicAuth"]  # noqa: E501

        _response_types_map = {
            "201": "ApiResponseOfCreateHostedPaymentRequestLink",
            "400": "ApiResponseError",
            "401": "ApiResponseError",
            "500": "ApiResponseError",
        }

        return self.api_client.call_api(
            "/hosted/payment-requests/links",
            "POST",
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get("async_req"),
            _return_http_data_only=_params.get("_return_http_data_only"),  # noqa: E501
            _preload_content=_params.get("_preload_content", True),
            _request_timeout=_params.get("_request_timeout"),
            collection_formats=_collection_formats,
            _request_auth=_params.get("_request_auth"),
        )

    @validate_arguments
    def create_hosted_vrp_consent_request(
        self,
        sub_application: Annotated[
            StrictStr,
            Field(
                ...,
                description="__Mandatory__. The unique identifier of the sub application the request is being submitted on behalf of (e.g. an underlying merchant)",
            ),
        ],
        create_hosted_vrp_consent_request: CreateHostedVRPConsentRequest,
        **kwargs,
    ) -> ApiResponseOfCreateHostedVRPConsentRequest:  # noqa: E501
        """Create VRP Consent  # noqa: E501

        Used to initiate a VRP consent / mandate request through Yapily Hosted Pages  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_hosted_vrp_consent_request(sub_application, create_hosted_vrp_consent_request, async_req=True)
        >>> result = thread.get()

        :param sub_application: __Mandatory__. The unique identifier of the sub application the request is being submitted on behalf of (e.g. an underlying merchant) (required)
        :type sub_application: str
        :param create_hosted_vrp_consent_request: (required)
        :type create_hosted_vrp_consent_request: CreateHostedVRPConsentRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ApiResponseOfCreateHostedVRPConsentRequest
        """
        kwargs["_return_http_data_only"] = True
        if "_preload_content" in kwargs:
            message = "Error! Please call the create_hosted_vrp_consent_request_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.create_hosted_vrp_consent_request_with_http_info(
            sub_application, create_hosted_vrp_consent_request, **kwargs
        )  # noqa: E501

    @validate_arguments
    def create_hosted_vrp_consent_request_with_http_info(
        self,
        sub_application: Annotated[
            StrictStr,
            Field(
                ...,
                description="__Mandatory__. The unique identifier of the sub application the request is being submitted on behalf of (e.g. an underlying merchant)",
            ),
        ],
        create_hosted_vrp_consent_request: CreateHostedVRPConsentRequest,
        **kwargs,
    ) -> ApiResponse:  # noqa: E501
        """Create VRP Consent  # noqa: E501

        Used to initiate a VRP consent / mandate request through Yapily Hosted Pages  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_hosted_vrp_consent_request_with_http_info(sub_application, create_hosted_vrp_consent_request, async_req=True)
        >>> result = thread.get()

        :param sub_application: __Mandatory__. The unique identifier of the sub application the request is being submitted on behalf of (e.g. an underlying merchant) (required)
        :type sub_application: str
        :param create_hosted_vrp_consent_request: (required)
        :type create_hosted_vrp_consent_request: CreateHostedVRPConsentRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(ApiResponseOfCreateHostedVRPConsentRequest, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = ["sub_application", "create_hosted_vrp_consent_request"]
        _all_params.extend(
            [
                "async_req",
                "_return_http_data_only",
                "_preload_content",
                "_request_timeout",
                "_request_auth",
                "_content_type",
                "_headers",
            ]
        )

        # validate the arguments
        for _key, _val in _params["kwargs"].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_hosted_vrp_consent_request" % _key
                )
            _params[_key] = _val
        del _params["kwargs"]

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get("_headers", {}))
        if _params["sub_application"] is not None:
            _header_params["sub-application"] = _params["sub_application"]

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params["create_hosted_vrp_consent_request"] is not None:
            _body_params = _params["create_hosted_vrp_consent_request"]

        # set the HTTP header `Accept`
        _header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json;charset=UTF-8"]
        )  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get(
            "_content_type",
            self.api_client.select_header_content_type(
                ["application/json;charset=UTF-8"]
            ),
        )
        if _content_types_list:
            _header_params["Content-Type"] = _content_types_list

        # authentication setting
        _auth_settings = ["basicAuth"]  # noqa: E501

        _response_types_map = {
            "201": "ApiResponseOfCreateHostedVRPConsentRequest",
            "400": "ApiResponseError",
            "401": "ApiResponseError",
            "500": "ApiResponseError",
        }

        return self.api_client.call_api(
            "/hosted/vrp/consent-requests",
            "POST",
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get("async_req"),
            _return_http_data_only=_params.get("_return_http_data_only"),  # noqa: E501
            _preload_content=_params.get("_preload_content", True),
            _request_timeout=_params.get("_request_timeout"),
            collection_formats=_collection_formats,
            _request_auth=_params.get("_request_auth"),
        )

    @validate_arguments
    def create_hosted_vrp_funds_confirmation(
        self,
        consent_request_id: Annotated[
            StrictStr,
            Field(..., description="Unique Identifier of the Consent Request"),
        ],
        consent_token: Annotated[
            StrictStr,
            Field(
                ...,
                description="__Mandatory__. The `consent-token` containing the user's authorisation to make the request.",
            ),
        ],
        funds_confirmation_request: FundsConfirmationRequest,
        sub_application: Annotated[
            Optional[StrictStr],
            Field(
                description="The unique identifier of the sub application the request is being submitted on behalf of (e.g. an underlying merchant)"
            ),
        ] = None,
        **kwargs,
    ) -> ApiResponseOfFundsConfirmationResponse:  # noqa: E501
        """Check Funds Availability  # noqa: E501

        Confirms whether there are available funds on the Payer account to execute a Variable Recurring Payment after obtaining the user's authorisation. <br><br>Features:<ul><li>`VARIABLE_RECURRING_PAYMENT_FUNDS_CONFIRMATION`</li></ul>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_hosted_vrp_funds_confirmation(consent_request_id, consent_token, funds_confirmation_request, sub_application, async_req=True)
        >>> result = thread.get()

        :param consent_request_id: Unique Identifier of the Consent Request (required)
        :type consent_request_id: str
        :param consent_token: __Mandatory__. The `consent-token` containing the user's authorisation to make the request. (required)
        :type consent_token: str
        :param funds_confirmation_request: (required)
        :type funds_confirmation_request: FundsConfirmationRequest
        :param sub_application: The unique identifier of the sub application the request is being submitted on behalf of (e.g. an underlying merchant)
        :type sub_application: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ApiResponseOfFundsConfirmationResponse
        """
        kwargs["_return_http_data_only"] = True
        if "_preload_content" in kwargs:
            message = "Error! Please call the create_hosted_vrp_funds_confirmation_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.create_hosted_vrp_funds_confirmation_with_http_info(
            consent_request_id,
            consent_token,
            funds_confirmation_request,
            sub_application,
            **kwargs,
        )  # noqa: E501

    @validate_arguments
    def create_hosted_vrp_funds_confirmation_with_http_info(
        self,
        consent_request_id: Annotated[
            StrictStr,
            Field(..., description="Unique Identifier of the Consent Request"),
        ],
        consent_token: Annotated[
            StrictStr,
            Field(
                ...,
                description="__Mandatory__. The `consent-token` containing the user's authorisation to make the request.",
            ),
        ],
        funds_confirmation_request: FundsConfirmationRequest,
        sub_application: Annotated[
            Optional[StrictStr],
            Field(
                description="The unique identifier of the sub application the request is being submitted on behalf of (e.g. an underlying merchant)"
            ),
        ] = None,
        **kwargs,
    ) -> ApiResponse:  # noqa: E501
        """Check Funds Availability  # noqa: E501

        Confirms whether there are available funds on the Payer account to execute a Variable Recurring Payment after obtaining the user's authorisation. <br><br>Features:<ul><li>`VARIABLE_RECURRING_PAYMENT_FUNDS_CONFIRMATION`</li></ul>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_hosted_vrp_funds_confirmation_with_http_info(consent_request_id, consent_token, funds_confirmation_request, sub_application, async_req=True)
        >>> result = thread.get()

        :param consent_request_id: Unique Identifier of the Consent Request (required)
        :type consent_request_id: str
        :param consent_token: __Mandatory__. The `consent-token` containing the user's authorisation to make the request. (required)
        :type consent_token: str
        :param funds_confirmation_request: (required)
        :type funds_confirmation_request: FundsConfirmationRequest
        :param sub_application: The unique identifier of the sub application the request is being submitted on behalf of (e.g. an underlying merchant)
        :type sub_application: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(ApiResponseOfFundsConfirmationResponse, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            "consent_request_id",
            "consent_token",
            "funds_confirmation_request",
            "sub_application",
        ]
        _all_params.extend(
            [
                "async_req",
                "_return_http_data_only",
                "_preload_content",
                "_request_timeout",
                "_request_auth",
                "_content_type",
                "_headers",
            ]
        )

        # validate the arguments
        for _key, _val in _params["kwargs"].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_hosted_vrp_funds_confirmation" % _key
                )
            _params[_key] = _val
        del _params["kwargs"]

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params["consent_request_id"] is not None:
            _path_params["consentRequestId"] = _params["consent_request_id"]

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get("_headers", {}))
        if _params["consent_token"] is not None:
            _header_params["consent-token"] = _params["consent_token"]

        if _params["sub_application"] is not None:
            _header_params["sub-application"] = _params["sub_application"]

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params["funds_confirmation_request"] is not None:
            _body_params = _params["funds_confirmation_request"]

        # set the HTTP header `Accept`
        _header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json;charset=UTF-8"]
        )  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get(
            "_content_type",
            self.api_client.select_header_content_type(
                ["application/json;charset=UTF-8"]
            ),
        )
        if _content_types_list:
            _header_params["Content-Type"] = _content_types_list

        # authentication setting
        _auth_settings = ["basicAuth"]  # noqa: E501

        _response_types_map = {
            "201": "ApiResponseOfFundsConfirmationResponse",
            "401": "ApiResponseError",
        }

        return self.api_client.call_api(
            "/hosted/vrp/consent-requests/{consentRequestId}/funds-confirmation",
            "POST",
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get("async_req"),
            _return_http_data_only=_params.get("_return_http_data_only"),  # noqa: E501
            _preload_content=_params.get("_preload_content", True),
            _request_timeout=_params.get("_request_timeout"),
            collection_formats=_collection_formats,
            _request_auth=_params.get("_request_auth"),
        )

    @validate_arguments
    def create_hosted_vrp_payment(
        self,
        consent_request_id: Annotated[
            StrictStr,
            Field(..., description="Unique Identifier of the Consent Request"),
        ],
        consent_token: Annotated[
            StrictStr,
            Field(
                ...,
                description="__Mandatory__. The `consent-token` containing the user's authorisation to make the request.",
            ),
        ],
        create_hosted_vrp_payment_request: CreateHostedVRPPaymentRequest,
        sub_application: Annotated[
            Optional[StrictStr],
            Field(
                description="The unique identifier of the sub application the request is being submitted on behalf of (e.g. an underlying merchant)"
            ),
        ] = None,
        **kwargs,
    ) -> ApiResponseOfCreateHostedVRPPaymentRequest:  # noqa: E501
        """Create VRP Payment  # noqa: E501

        Creates a Variable Recurring Payment  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_hosted_vrp_payment(consent_request_id, consent_token, create_hosted_vrp_payment_request, sub_application, async_req=True)
        >>> result = thread.get()

        :param consent_request_id: Unique Identifier of the Consent Request (required)
        :type consent_request_id: str
        :param consent_token: __Mandatory__. The `consent-token` containing the user's authorisation to make the request. (required)
        :type consent_token: str
        :param create_hosted_vrp_payment_request: (required)
        :type create_hosted_vrp_payment_request: CreateHostedVRPPaymentRequest
        :param sub_application: The unique identifier of the sub application the request is being submitted on behalf of (e.g. an underlying merchant)
        :type sub_application: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ApiResponseOfCreateHostedVRPPaymentRequest
        """
        kwargs["_return_http_data_only"] = True
        if "_preload_content" in kwargs:
            message = "Error! Please call the create_hosted_vrp_payment_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.create_hosted_vrp_payment_with_http_info(
            consent_request_id,
            consent_token,
            create_hosted_vrp_payment_request,
            sub_application,
            **kwargs,
        )  # noqa: E501

    @validate_arguments
    def create_hosted_vrp_payment_with_http_info(
        self,
        consent_request_id: Annotated[
            StrictStr,
            Field(..., description="Unique Identifier of the Consent Request"),
        ],
        consent_token: Annotated[
            StrictStr,
            Field(
                ...,
                description="__Mandatory__. The `consent-token` containing the user's authorisation to make the request.",
            ),
        ],
        create_hosted_vrp_payment_request: CreateHostedVRPPaymentRequest,
        sub_application: Annotated[
            Optional[StrictStr],
            Field(
                description="The unique identifier of the sub application the request is being submitted on behalf of (e.g. an underlying merchant)"
            ),
        ] = None,
        **kwargs,
    ) -> ApiResponse:  # noqa: E501
        """Create VRP Payment  # noqa: E501

        Creates a Variable Recurring Payment  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_hosted_vrp_payment_with_http_info(consent_request_id, consent_token, create_hosted_vrp_payment_request, sub_application, async_req=True)
        >>> result = thread.get()

        :param consent_request_id: Unique Identifier of the Consent Request (required)
        :type consent_request_id: str
        :param consent_token: __Mandatory__. The `consent-token` containing the user's authorisation to make the request. (required)
        :type consent_token: str
        :param create_hosted_vrp_payment_request: (required)
        :type create_hosted_vrp_payment_request: CreateHostedVRPPaymentRequest
        :param sub_application: The unique identifier of the sub application the request is being submitted on behalf of (e.g. an underlying merchant)
        :type sub_application: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(ApiResponseOfCreateHostedVRPPaymentRequest, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            "consent_request_id",
            "consent_token",
            "create_hosted_vrp_payment_request",
            "sub_application",
        ]
        _all_params.extend(
            [
                "async_req",
                "_return_http_data_only",
                "_preload_content",
                "_request_timeout",
                "_request_auth",
                "_content_type",
                "_headers",
            ]
        )

        # validate the arguments
        for _key, _val in _params["kwargs"].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_hosted_vrp_payment" % _key
                )
            _params[_key] = _val
        del _params["kwargs"]

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params["consent_request_id"] is not None:
            _path_params["consentRequestId"] = _params["consent_request_id"]

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get("_headers", {}))
        if _params["consent_token"] is not None:
            _header_params["consent-token"] = _params["consent_token"]

        if _params["sub_application"] is not None:
            _header_params["sub-application"] = _params["sub_application"]

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params["create_hosted_vrp_payment_request"] is not None:
            _body_params = _params["create_hosted_vrp_payment_request"]

        # set the HTTP header `Accept`
        _header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json;charset=UTF-8"]
        )  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get(
            "_content_type",
            self.api_client.select_header_content_type(
                ["application/json;charset=UTF-8"]
            ),
        )
        if _content_types_list:
            _header_params["Content-Type"] = _content_types_list

        # authentication setting
        _auth_settings = ["basicAuth"]  # noqa: E501

        _response_types_map = {
            "201": "ApiResponseOfCreateHostedVRPPaymentRequest",
            "401": "ApiResponseError",
        }

        return self.api_client.call_api(
            "/hosted/vrp/consent-requests/{consentRequestId}/payments",
            "POST",
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get("async_req"),
            _return_http_data_only=_params.get("_return_http_data_only"),  # noqa: E501
            _preload_content=_params.get("_preload_content", True),
            _request_timeout=_params.get("_request_timeout"),
            collection_formats=_collection_formats,
            _request_auth=_params.get("_request_auth"),
        )

    @validate_arguments
    def get_hosted_consent_request(
        self,
        consent_request_id: Annotated[
            StrictStr,
            Field(..., description="Unique Identifier of the Consent Request"),
        ],
        sub_application: Annotated[
            Optional[StrictStr],
            Field(
                description="The unique identifier of the sub application the request is being submitted on behalf of (e.g. an underlying merchant)"
            ),
        ] = None,
        **kwargs,
    ) -> ApiResponseOfGetHostedVRPConsentRequest:  # noqa: E501
        """Get Hosted VRP Consent Request  # noqa: E501

        Used to get details of a VRP Consent Request  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_hosted_consent_request(consent_request_id, sub_application, async_req=True)
        >>> result = thread.get()

        :param consent_request_id: Unique Identifier of the Consent Request (required)
        :type consent_request_id: str
        :param sub_application: The unique identifier of the sub application the request is being submitted on behalf of (e.g. an underlying merchant)
        :type sub_application: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ApiResponseOfGetHostedVRPConsentRequest
        """
        kwargs["_return_http_data_only"] = True
        if "_preload_content" in kwargs:
            message = "Error! Please call the get_hosted_consent_request_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.get_hosted_consent_request_with_http_info(
            consent_request_id, sub_application, **kwargs
        )  # noqa: E501

    @validate_arguments
    def get_hosted_consent_request_with_http_info(
        self,
        consent_request_id: Annotated[
            StrictStr,
            Field(..., description="Unique Identifier of the Consent Request"),
        ],
        sub_application: Annotated[
            Optional[StrictStr],
            Field(
                description="The unique identifier of the sub application the request is being submitted on behalf of (e.g. an underlying merchant)"
            ),
        ] = None,
        **kwargs,
    ) -> ApiResponse:  # noqa: E501
        """Get Hosted VRP Consent Request  # noqa: E501

        Used to get details of a VRP Consent Request  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_hosted_consent_request_with_http_info(consent_request_id, sub_application, async_req=True)
        >>> result = thread.get()

        :param consent_request_id: Unique Identifier of the Consent Request (required)
        :type consent_request_id: str
        :param sub_application: The unique identifier of the sub application the request is being submitted on behalf of (e.g. an underlying merchant)
        :type sub_application: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(ApiResponseOfGetHostedVRPConsentRequest, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = ["consent_request_id", "sub_application"]
        _all_params.extend(
            [
                "async_req",
                "_return_http_data_only",
                "_preload_content",
                "_request_timeout",
                "_request_auth",
                "_content_type",
                "_headers",
            ]
        )

        # validate the arguments
        for _key, _val in _params["kwargs"].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_hosted_consent_request" % _key
                )
            _params[_key] = _val
        del _params["kwargs"]

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params["consent_request_id"] is not None:
            _path_params["consentRequestId"] = _params["consent_request_id"]

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get("_headers", {}))
        if _params["sub_application"] is not None:
            _header_params["sub-application"] = _params["sub_application"]

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json;charset=UTF-8"]
        )  # noqa: E501

        # authentication setting
        _auth_settings = ["basicAuth"]  # noqa: E501

        _response_types_map = {
            "200": "ApiResponseOfGetHostedVRPConsentRequest",
            "401": "ApiResponseError",
            "404": "ApiResponseError",
            "500": "ApiResponseError",
        }

        return self.api_client.call_api(
            "/hosted/vrp/consent-requests/{consentRequestId}",
            "GET",
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get("async_req"),
            _return_http_data_only=_params.get("_return_http_data_only"),  # noqa: E501
            _preload_content=_params.get("_preload_content", True),
            _request_timeout=_params.get("_request_timeout"),
            collection_formats=_collection_formats,
            _request_auth=_params.get("_request_auth"),
        )

    @validate_arguments
    def get_hosted_payment_request(
        self,
        payment_request_id: Annotated[
            StrictStr,
            Field(..., description="Unique Identifier of the payment request"),
        ],
        **kwargs,
    ) -> ApiResponseOfGetHostedPaymentRequest:  # noqa: E501
        """Get Hosted payment request  # noqa: E501

        Used to get details of a payment request  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_hosted_payment_request(payment_request_id, async_req=True)
        >>> result = thread.get()

        :param payment_request_id: Unique Identifier of the payment request (required)
        :type payment_request_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ApiResponseOfGetHostedPaymentRequest
        """
        kwargs["_return_http_data_only"] = True
        if "_preload_content" in kwargs:
            message = "Error! Please call the get_hosted_payment_request_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.get_hosted_payment_request_with_http_info(
            payment_request_id, **kwargs
        )  # noqa: E501

    @validate_arguments
    def get_hosted_payment_request_with_http_info(
        self,
        payment_request_id: Annotated[
            StrictStr,
            Field(..., description="Unique Identifier of the payment request"),
        ],
        **kwargs,
    ) -> ApiResponse:  # noqa: E501
        """Get Hosted payment request  # noqa: E501

        Used to get details of a payment request  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_hosted_payment_request_with_http_info(payment_request_id, async_req=True)
        >>> result = thread.get()

        :param payment_request_id: Unique Identifier of the payment request (required)
        :type payment_request_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(ApiResponseOfGetHostedPaymentRequest, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = ["payment_request_id"]
        _all_params.extend(
            [
                "async_req",
                "_return_http_data_only",
                "_preload_content",
                "_request_timeout",
                "_request_auth",
                "_content_type",
                "_headers",
            ]
        )

        # validate the arguments
        for _key, _val in _params["kwargs"].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_hosted_payment_request" % _key
                )
            _params[_key] = _val
        del _params["kwargs"]

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params["payment_request_id"] is not None:
            _path_params["paymentRequestId"] = _params["payment_request_id"]

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get("_headers", {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json;charset=UTF-8"]
        )  # noqa: E501

        # authentication setting
        _auth_settings = ["basicAuth"]  # noqa: E501

        _response_types_map = {
            "200": "ApiResponseOfGetHostedPaymentRequest",
            "401": "ApiResponseError",
            "404": "ApiResponseError",
            "500": "ApiResponseError",
        }

        return self.api_client.call_api(
            "/hosted/payment-requests/{paymentRequestId}",
            "GET",
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get("async_req"),
            _return_http_data_only=_params.get("_return_http_data_only"),  # noqa: E501
            _preload_content=_params.get("_preload_content", True),
            _request_timeout=_params.get("_request_timeout"),
            collection_formats=_collection_formats,
            _request_auth=_params.get("_request_auth"),
        )

    @validate_arguments
    def get_hosted_vrp_consent_requests(
        self,
        sub_application: Annotated[
            StrictStr,
            Field(
                ...,
                description="__Mandatory__. The unique identifier of the sub application the request is being submitted on behalf of (e.g. an underlying merchant)",
            ),
        ],
        **kwargs,
    ) -> ApiResponseOfGetHostedVRPConsentsRequest:  # noqa: E501
        """Get Hosted VRP Consent Requests  # noqa: E501

        Used to get all VRP consent requests initiated through Yapily Hosted Pages  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_hosted_vrp_consent_requests(sub_application, async_req=True)
        >>> result = thread.get()

        :param sub_application: __Mandatory__. The unique identifier of the sub application the request is being submitted on behalf of (e.g. an underlying merchant) (required)
        :type sub_application: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ApiResponseOfGetHostedVRPConsentsRequest
        """
        kwargs["_return_http_data_only"] = True
        if "_preload_content" in kwargs:
            message = "Error! Please call the get_hosted_vrp_consent_requests_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.get_hosted_vrp_consent_requests_with_http_info(
            sub_application, **kwargs
        )  # noqa: E501

    @validate_arguments
    def get_hosted_vrp_consent_requests_with_http_info(
        self,
        sub_application: Annotated[
            StrictStr,
            Field(
                ...,
                description="__Mandatory__. The unique identifier of the sub application the request is being submitted on behalf of (e.g. an underlying merchant)",
            ),
        ],
        **kwargs,
    ) -> ApiResponse:  # noqa: E501
        """Get Hosted VRP Consent Requests  # noqa: E501

        Used to get all VRP consent requests initiated through Yapily Hosted Pages  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_hosted_vrp_consent_requests_with_http_info(sub_application, async_req=True)
        >>> result = thread.get()

        :param sub_application: __Mandatory__. The unique identifier of the sub application the request is being submitted on behalf of (e.g. an underlying merchant) (required)
        :type sub_application: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(ApiResponseOfGetHostedVRPConsentsRequest, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = ["sub_application"]
        _all_params.extend(
            [
                "async_req",
                "_return_http_data_only",
                "_preload_content",
                "_request_timeout",
                "_request_auth",
                "_content_type",
                "_headers",
            ]
        )

        # validate the arguments
        for _key, _val in _params["kwargs"].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_hosted_vrp_consent_requests" % _key
                )
            _params[_key] = _val
        del _params["kwargs"]

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get("_headers", {}))
        if _params["sub_application"] is not None:
            _header_params["sub-application"] = _params["sub_application"]

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json;charset=UTF-8"]
        )  # noqa: E501

        # authentication setting
        _auth_settings = ["basicAuth"]  # noqa: E501

        _response_types_map = {
            "200": "ApiResponseOfGetHostedVRPConsentsRequest",
            "400": "ApiResponseError",
            "401": "ApiResponseError",
            "500": "ApiResponseError",
        }

        return self.api_client.call_api(
            "/hosted/vrp/consent-requests",
            "GET",
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get("async_req"),
            _return_http_data_only=_params.get("_return_http_data_only"),  # noqa: E501
            _preload_content=_params.get("_preload_content", True),
            _request_timeout=_params.get("_request_timeout"),
            collection_formats=_collection_formats,
            _request_auth=_params.get("_request_auth"),
        )

    @validate_arguments
    def get_hosted_vrp_payment_request(
        self,
        consent_request_id: Annotated[
            StrictStr,
            Field(..., description="Unique Identifier of the Consent Request"),
        ],
        payment_id: Annotated[
            StrictStr,
            Field(..., description="Unique Identifier of the Consent Request"),
        ],
        sub_application: Annotated[
            Optional[StrictStr],
            Field(
                description="The unique identifier of the sub application the request is being submitted on behalf of (e.g. an underlying merchant)"
            ),
        ] = None,
        **kwargs,
    ) -> ApiResponseOfGetHostedVRPPaymentRequest:  # noqa: E501
        """Get VRP payment  # noqa: E501

        Used to get details of a VRP Payment  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_hosted_vrp_payment_request(consent_request_id, payment_id, sub_application, async_req=True)
        >>> result = thread.get()

        :param consent_request_id: Unique Identifier of the Consent Request (required)
        :type consent_request_id: str
        :param payment_id: Unique Identifier of the Consent Request (required)
        :type payment_id: str
        :param sub_application: The unique identifier of the sub application the request is being submitted on behalf of (e.g. an underlying merchant)
        :type sub_application: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ApiResponseOfGetHostedVRPPaymentRequest
        """
        kwargs["_return_http_data_only"] = True
        if "_preload_content" in kwargs:
            message = "Error! Please call the get_hosted_vrp_payment_request_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.get_hosted_vrp_payment_request_with_http_info(
            consent_request_id, payment_id, sub_application, **kwargs
        )  # noqa: E501

    @validate_arguments
    def get_hosted_vrp_payment_request_with_http_info(
        self,
        consent_request_id: Annotated[
            StrictStr,
            Field(..., description="Unique Identifier of the Consent Request"),
        ],
        payment_id: Annotated[
            StrictStr,
            Field(..., description="Unique Identifier of the Consent Request"),
        ],
        sub_application: Annotated[
            Optional[StrictStr],
            Field(
                description="The unique identifier of the sub application the request is being submitted on behalf of (e.g. an underlying merchant)"
            ),
        ] = None,
        **kwargs,
    ) -> ApiResponse:  # noqa: E501
        """Get VRP payment  # noqa: E501

        Used to get details of a VRP Payment  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_hosted_vrp_payment_request_with_http_info(consent_request_id, payment_id, sub_application, async_req=True)
        >>> result = thread.get()

        :param consent_request_id: Unique Identifier of the Consent Request (required)
        :type consent_request_id: str
        :param payment_id: Unique Identifier of the Consent Request (required)
        :type payment_id: str
        :param sub_application: The unique identifier of the sub application the request is being submitted on behalf of (e.g. an underlying merchant)
        :type sub_application: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(ApiResponseOfGetHostedVRPPaymentRequest, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = ["consent_request_id", "payment_id", "sub_application"]
        _all_params.extend(
            [
                "async_req",
                "_return_http_data_only",
                "_preload_content",
                "_request_timeout",
                "_request_auth",
                "_content_type",
                "_headers",
            ]
        )

        # validate the arguments
        for _key, _val in _params["kwargs"].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_hosted_vrp_payment_request" % _key
                )
            _params[_key] = _val
        del _params["kwargs"]

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params["consent_request_id"] is not None:
            _path_params["consentRequestId"] = _params["consent_request_id"]

        if _params["payment_id"] is not None:
            _path_params["paymentId"] = _params["payment_id"]

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get("_headers", {}))
        if _params["sub_application"] is not None:
            _header_params["sub-application"] = _params["sub_application"]

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json;charset=UTF-8"]
        )  # noqa: E501

        # authentication setting
        _auth_settings = ["basicAuth"]  # noqa: E501

        _response_types_map = {
            "200": "ApiResponseOfGetHostedVRPPaymentRequest",
            "401": "ApiResponseError",
            "404": "ApiResponseError",
            "500": "ApiResponseError",
        }

        return self.api_client.call_api(
            "/hosted/vrp/consent-requests/{consentRequestId}/payments/{paymentId}",
            "GET",
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get("async_req"),
            _return_http_data_only=_params.get("_return_http_data_only"),  # noqa: E501
            _preload_content=_params.get("_preload_content", True),
            _request_timeout=_params.get("_request_timeout"),
            collection_formats=_collection_formats,
            _request_auth=_params.get("_request_auth"),
        )

    @validate_arguments
    def revoke_hosted_consent_request(
        self,
        consent_request_id: Annotated[
            StrictStr,
            Field(..., description="Unique Identifier of the Consent Request"),
        ],
        sub_application: Annotated[
            Optional[StrictStr],
            Field(
                description="The unique identifier of the sub application the request is being submitted on behalf of (e.g. an underlying merchant)"
            ),
        ] = None,
        **kwargs,
    ) -> ApiResponseOfRevokeHostedVRPConsentRequest:  # noqa: E501
        """Revoke Hosted VRP Consent Request  # noqa: E501

        Revoke Hosted VRP Consent Request  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.revoke_hosted_consent_request(consent_request_id, sub_application, async_req=True)
        >>> result = thread.get()

        :param consent_request_id: Unique Identifier of the Consent Request (required)
        :type consent_request_id: str
        :param sub_application: The unique identifier of the sub application the request is being submitted on behalf of (e.g. an underlying merchant)
        :type sub_application: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ApiResponseOfRevokeHostedVRPConsentRequest
        """
        kwargs["_return_http_data_only"] = True
        if "_preload_content" in kwargs:
            message = "Error! Please call the revoke_hosted_consent_request_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.revoke_hosted_consent_request_with_http_info(
            consent_request_id, sub_application, **kwargs
        )  # noqa: E501

    @validate_arguments
    def revoke_hosted_consent_request_with_http_info(
        self,
        consent_request_id: Annotated[
            StrictStr,
            Field(..., description="Unique Identifier of the Consent Request"),
        ],
        sub_application: Annotated[
            Optional[StrictStr],
            Field(
                description="The unique identifier of the sub application the request is being submitted on behalf of (e.g. an underlying merchant)"
            ),
        ] = None,
        **kwargs,
    ) -> ApiResponse:  # noqa: E501
        """Revoke Hosted VRP Consent Request  # noqa: E501

        Revoke Hosted VRP Consent Request  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.revoke_hosted_consent_request_with_http_info(consent_request_id, sub_application, async_req=True)
        >>> result = thread.get()

        :param consent_request_id: Unique Identifier of the Consent Request (required)
        :type consent_request_id: str
        :param sub_application: The unique identifier of the sub application the request is being submitted on behalf of (e.g. an underlying merchant)
        :type sub_application: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(ApiResponseOfRevokeHostedVRPConsentRequest, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = ["consent_request_id", "sub_application"]
        _all_params.extend(
            [
                "async_req",
                "_return_http_data_only",
                "_preload_content",
                "_request_timeout",
                "_request_auth",
                "_content_type",
                "_headers",
            ]
        )

        # validate the arguments
        for _key, _val in _params["kwargs"].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method revoke_hosted_consent_request" % _key
                )
            _params[_key] = _val
        del _params["kwargs"]

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params["consent_request_id"] is not None:
            _path_params["consentRequestId"] = _params["consent_request_id"]

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get("_headers", {}))
        if _params["sub_application"] is not None:
            _header_params["sub-application"] = _params["sub_application"]

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json;charset=UTF-8"]
        )  # noqa: E501

        # authentication setting
        _auth_settings = ["basicAuth"]  # noqa: E501

        _response_types_map = {
            "200": "ApiResponseOfRevokeHostedVRPConsentRequest",
            "401": "ApiResponseError",
            "404": "ApiResponseError",
            "500": "ApiResponseError",
        }

        return self.api_client.call_api(
            "/hosted/vrp/consent-requests/{consentRequestId}/revoke",
            "POST",
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get("async_req"),
            _return_http_data_only=_params.get("_return_http_data_only"),  # noqa: E501
            _preload_content=_params.get("_preload_content", True),
            _request_timeout=_params.get("_request_timeout"),
            collection_formats=_collection_formats,
            _request_auth=_params.get("_request_auth"),
        )
