# coding: utf-8

"""
Yapily API

The Yapily API enables connections between your application and users' banks. For more information check out our [documentation](https://docs.yapily.com/).<br><br>In particular, make sure to view our [Getting Started](https://docs.yapily.com/pages/home/getting-started/) steps if this is your first time here.<br><br>While testing the API, our list of [sandbox credentials](https://docs.yapily.com/pages/key-concepts/sandbox-credentials/) maybe useful.

The version of the OpenAPI document: 7.2.0
Contact: support@yapily.com
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

import re  # noqa: F401

from pydantic import validate_arguments
from typing import Optional

from typing_extensions import Annotated
from pydantic import Field, StrictStr, conint


from yapily.models.get_accounts_transactions_categorised200_response import (
    GetAccountsTransactionsCategorised200Response,
)
from yapily.models.get_categorisation_account_type200_response import (
    GetCategorisationAccountType200Response,
)
from yapily.models.post_accounts_account_id_transactions_categorisation201_response import (
    PostAccountsAccountIdTransactionsCategorisation201Response,
)
from yapily.models.post_accounts_account_id_transactions_categorisation_request import (
    PostAccountsAccountIdTransactionsCategorisationRequest,
)

from yapily.api_client import ApiClient
from yapily.api_response import ApiResponse
from yapily.exceptions import (  # noqa: F401
    ApiTypeError,
    ApiValueError,
)


class EnrichmentApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client

    @validate_arguments
    async def get_accounts_transactions_categorised(
        self,
        consent: Annotated[
            StrictStr,
            Field(
                ...,
                description="__Mandatory__. The `consent-token` containing the user's authorisation to make the request.",
            ),
        ],
        account_id: Annotated[
            StrictStr, Field(..., description="Unique identifier for account")
        ],
        categorisation_id: Annotated[
            StrictStr,
            Field(
                ...,
                description="Unique identifier for transaction categorisation request",
            ),
        ],
        sub_application: Annotated[
            Optional[StrictStr],
            Field(
                description="The sub-application ID to which event type is being subscribed to"
            ),
        ] = None,
        limit: Annotated[
            Optional[conint(strict=True, le=1000, ge=100)],
            Field(
                description="__Optional__. The maximum number of transaction records to be returned. Must be between 100 and 1000. If not specified will default to 100."
            ),
        ] = None,
        page: Annotated[
            Optional[conint(strict=True, ge=1)],
            Field(
                description="__Optional__. The page number to be returned. If not specified will default to 1."
            ),
        ] = None,
        **kwargs,
    ) -> GetAccountsTransactionsCategorised200Response:  # noqa: E501
        """Get Categorised Transactions  # noqa: E501

        Retrieve a set of categorised transactions using a provided categorisation ID (__Note__: A categorisation ID will only be valid for 30 mins after a __transactions.categorisation.successful__ wedhook has be received)  # noqa: E501

        :param consent: __Mandatory__. The `consent-token` containing the user's authorisation to make the request. (required)
        :type consent: str
        :param account_id: Unique identifier for account (required)
        :type account_id: str
        :param categorisation_id: Unique identifier for transaction categorisation request (required)
        :type categorisation_id: str
        :param sub_application: The sub-application ID to which event type is being subscribed to
        :type sub_application: str
        :param limit: __Optional__. The maximum number of transaction records to be returned. Must be between 100 and 1000. If not specified will default to 100.
        :type limit: int
        :param page: __Optional__. The page number to be returned. If not specified will default to 1.
        :type page: int
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: GetAccountsTransactionsCategorised200Response
        """
        kwargs["_return_http_data_only"] = True
        if "_preload_content" in kwargs:
            message = "Error! Please call the get_accounts_transactions_categorised_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return await self.get_accounts_transactions_categorised_with_http_info(
            consent,
            account_id,
            categorisation_id,
            sub_application,
            limit,
            page,
            **kwargs,
        )  # noqa: E501

    @validate_arguments
    async def get_accounts_transactions_categorised_with_http_info(
        self,
        consent: Annotated[
            StrictStr,
            Field(
                ...,
                description="__Mandatory__. The `consent-token` containing the user's authorisation to make the request.",
            ),
        ],
        account_id: Annotated[
            StrictStr, Field(..., description="Unique identifier for account")
        ],
        categorisation_id: Annotated[
            StrictStr,
            Field(
                ...,
                description="Unique identifier for transaction categorisation request",
            ),
        ],
        sub_application: Annotated[
            Optional[StrictStr],
            Field(
                description="The sub-application ID to which event type is being subscribed to"
            ),
        ] = None,
        limit: Annotated[
            Optional[conint(strict=True, le=1000, ge=100)],
            Field(
                description="__Optional__. The maximum number of transaction records to be returned. Must be between 100 and 1000. If not specified will default to 100."
            ),
        ] = None,
        page: Annotated[
            Optional[conint(strict=True, ge=1)],
            Field(
                description="__Optional__. The page number to be returned. If not specified will default to 1."
            ),
        ] = None,
        **kwargs,
    ) -> ApiResponse:  # noqa: E501
        """Get Categorised Transactions  # noqa: E501

        Retrieve a set of categorised transactions using a provided categorisation ID (__Note__: A categorisation ID will only be valid for 30 mins after a __transactions.categorisation.successful__ wedhook has be received)  # noqa: E501

        :param consent: __Mandatory__. The `consent-token` containing the user's authorisation to make the request. (required)
        :type consent: str
        :param account_id: Unique identifier for account (required)
        :type account_id: str
        :param categorisation_id: Unique identifier for transaction categorisation request (required)
        :type categorisation_id: str
        :param sub_application: The sub-application ID to which event type is being subscribed to
        :type sub_application: str
        :param limit: __Optional__. The maximum number of transaction records to be returned. Must be between 100 and 1000. If not specified will default to 100.
        :type limit: int
        :param page: __Optional__. The page number to be returned. If not specified will default to 1.
        :type page: int
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(GetAccountsTransactionsCategorised200Response, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            "consent",
            "account_id",
            "categorisation_id",
            "sub_application",
            "limit",
            "page",
        ]
        _all_params.extend(
            [
                "_return_http_data_only",
                "_preload_content",
                "_request_timeout",
                "_request_auth",
                "_content_type",
                "_headers",
            ]
        )

        # validate the arguments
        for _key, _val in _params["kwargs"].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_accounts_transactions_categorised" % _key
                )
            _params[_key] = _val
        del _params["kwargs"]

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params["account_id"] is not None:
            _path_params["accountId"] = _params["account_id"]

        if _params["categorisation_id"] is not None:
            _path_params["categorisationId"] = _params["categorisation_id"]

        # process the query parameters
        _query_params = []
        if _params.get("limit") is not None:  # noqa: E501
            _query_params.append(("limit", _params["limit"]))

        if _params.get("page") is not None:  # noqa: E501
            _query_params.append(("page", _params["page"]))

        # process the header parameters
        _header_params = dict(_params.get("_headers", {}))
        if _params["consent"] is not None:
            _header_params["consent"] = _params["consent"]

        if _params["sub_application"] is not None:
            _header_params["sub-application"] = _params["sub_application"]

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json", "application/json;charset=UTF-8"]
        )  # noqa: E501

        # authentication setting
        _auth_settings = ["basicAuth"]  # noqa: E501

        _response_types_map = {
            "200": "GetAccountsTransactionsCategorised200Response",
            "400": "ApiErrorResponseV2",
            "401": "ApiErrorResponseV2",
            "404": "ApiErrorResponseV2",
            "500": "ApiErrorResponseV2",
        }

        return await self.api_client.call_api(
            "/accounts/{accountId}/transactions/categorisation/{categorisationId}",
            "GET",
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            _return_http_data_only=_params.get("_return_http_data_only"),  # noqa: E501
            _preload_content=_params.get("_preload_content", True),
            _request_timeout=_params.get("_request_timeout"),
            collection_formats=_collection_formats,
            _request_auth=_params.get("_request_auth"),
        )

    @validate_arguments
    async def get_categorisation_account_type(
        self,
        account_type: Annotated[
            StrictStr,
            Field(..., description="type of bank account (consumer or business)"),
        ],
        sub_application: Annotated[
            Optional[StrictStr],
            Field(
                description="The sub-application ID to which event type is being subscribed to"
            ),
        ] = None,
        **kwargs,
    ) -> GetCategorisationAccountType200Response:  # noqa: E501
        """Get the list of all categories for a specific account type  # noqa: E501

        Returns the list of categories that can be returned for a specific account type (consumer or business)  # noqa: E501

        :param account_type: type of bank account (consumer or business) (required)
        :type account_type: str
        :param sub_application: The sub-application ID to which event type is being subscribed to
        :type sub_application: str
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: GetCategorisationAccountType200Response
        """
        kwargs["_return_http_data_only"] = True
        if "_preload_content" in kwargs:
            message = "Error! Please call the get_categorisation_account_type_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return await self.get_categorisation_account_type_with_http_info(
            account_type, sub_application, **kwargs
        )  # noqa: E501

    @validate_arguments
    async def get_categorisation_account_type_with_http_info(
        self,
        account_type: Annotated[
            StrictStr,
            Field(..., description="type of bank account (consumer or business)"),
        ],
        sub_application: Annotated[
            Optional[StrictStr],
            Field(
                description="The sub-application ID to which event type is being subscribed to"
            ),
        ] = None,
        **kwargs,
    ) -> ApiResponse:  # noqa: E501
        """Get the list of all categories for a specific account type  # noqa: E501

        Returns the list of categories that can be returned for a specific account type (consumer or business)  # noqa: E501

        :param account_type: type of bank account (consumer or business) (required)
        :type account_type: str
        :param sub_application: The sub-application ID to which event type is being subscribed to
        :type sub_application: str
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(GetCategorisationAccountType200Response, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = ["account_type", "sub_application"]
        _all_params.extend(
            [
                "_return_http_data_only",
                "_preload_content",
                "_request_timeout",
                "_request_auth",
                "_content_type",
                "_headers",
            ]
        )

        # validate the arguments
        for _key, _val in _params["kwargs"].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_categorisation_account_type" % _key
                )
            _params[_key] = _val
        del _params["kwargs"]

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params["account_type"] is not None:
            _path_params["accountType"] = _params["account_type"]

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get("_headers", {}))
        if _params["sub_application"] is not None:
            _header_params["sub-application"] = _params["sub_application"]

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json", "application/json;charset=UTF-8"]
        )  # noqa: E501

        # authentication setting
        _auth_settings = ["basicAuth"]  # noqa: E501

        _response_types_map = {
            "200": "GetCategorisationAccountType200Response",
            "400": "ApiErrorResponseV2",
            "401": "ApiErrorResponseV2",
            "404": "ApiErrorResponseV2",
            "500": "ApiErrorResponseV2",
        }

        return await self.api_client.call_api(
            "/transactions/categorisation/categories/{accountType}",
            "GET",
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            _return_http_data_only=_params.get("_return_http_data_only"),  # noqa: E501
            _preload_content=_params.get("_preload_content", True),
            _request_timeout=_params.get("_request_timeout"),
            collection_formats=_collection_formats,
            _request_auth=_params.get("_request_auth"),
        )

    @validate_arguments
    async def post_accounts_account_id_transactions_categorisation(
        self,
        consent: Annotated[
            StrictStr,
            Field(
                ...,
                description="__Mandatory__. The `consent-token` containing the user's authorisation to make the request.",
            ),
        ],
        account_id: Annotated[
            StrictStr, Field(..., description="Unique identifier for account")
        ],
        psu_id: Annotated[
            Optional[StrictStr],
            Field(
                description="__Conditional__. Represents the user's login ID for the `Institution` to a personal account. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required."
            ),
        ] = None,
        psu_corporate_id: Annotated[
            Optional[StrictStr],
            Field(
                description="__Conditional__. Represents the user's login ID for the `Institution` to a business account. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required."
            ),
        ] = None,
        psu_ip_address: Annotated[
            Optional[StrictStr],
            Field(
                description="__Conditional__. The IP address of the PSU. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required."
            ),
        ] = None,
        sub_application: Annotated[
            Optional[StrictStr],
            Field(
                description="The sub-application ID to which event type is being subscribed to"
            ),
        ] = None,
        post_accounts_account_id_transactions_categorisation_request: Optional[
            PostAccountsAccountIdTransactionsCategorisationRequest
        ] = None,
        **kwargs,
    ) -> PostAccountsAccountIdTransactionsCategorisation201Response:  # noqa: E501
        """Trigger transaction categorisation  # noqa: E501

        Trigger categorisation for a specified set of transactions  # noqa: E501

        :param consent: __Mandatory__. The `consent-token` containing the user's authorisation to make the request. (required)
        :type consent: str
        :param account_id: Unique identifier for account (required)
        :type account_id: str
        :param psu_id: __Conditional__. Represents the user's login ID for the `Institution` to a personal account. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required.
        :type psu_id: str
        :param psu_corporate_id: __Conditional__. Represents the user's login ID for the `Institution` to a business account. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required.
        :type psu_corporate_id: str
        :param psu_ip_address: __Conditional__. The IP address of the PSU. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required.
        :type psu_ip_address: str
        :param sub_application: The sub-application ID to which event type is being subscribed to
        :type sub_application: str
        :param post_accounts_account_id_transactions_categorisation_request:
        :type post_accounts_account_id_transactions_categorisation_request: PostAccountsAccountIdTransactionsCategorisationRequest
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: PostAccountsAccountIdTransactionsCategorisation201Response
        """
        kwargs["_return_http_data_only"] = True
        if "_preload_content" in kwargs:
            message = "Error! Please call the post_accounts_account_id_transactions_categorisation_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return await self.post_accounts_account_id_transactions_categorisation_with_http_info(
            consent,
            account_id,
            psu_id,
            psu_corporate_id,
            psu_ip_address,
            sub_application,
            post_accounts_account_id_transactions_categorisation_request,
            **kwargs,
        )  # noqa: E501

    @validate_arguments
    async def post_accounts_account_id_transactions_categorisation_with_http_info(
        self,
        consent: Annotated[
            StrictStr,
            Field(
                ...,
                description="__Mandatory__. The `consent-token` containing the user's authorisation to make the request.",
            ),
        ],
        account_id: Annotated[
            StrictStr, Field(..., description="Unique identifier for account")
        ],
        psu_id: Annotated[
            Optional[StrictStr],
            Field(
                description="__Conditional__. Represents the user's login ID for the `Institution` to a personal account. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required."
            ),
        ] = None,
        psu_corporate_id: Annotated[
            Optional[StrictStr],
            Field(
                description="__Conditional__. Represents the user's login ID for the `Institution` to a business account. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required."
            ),
        ] = None,
        psu_ip_address: Annotated[
            Optional[StrictStr],
            Field(
                description="__Conditional__. The IP address of the PSU. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required."
            ),
        ] = None,
        sub_application: Annotated[
            Optional[StrictStr],
            Field(
                description="The sub-application ID to which event type is being subscribed to"
            ),
        ] = None,
        post_accounts_account_id_transactions_categorisation_request: Optional[
            PostAccountsAccountIdTransactionsCategorisationRequest
        ] = None,
        **kwargs,
    ) -> ApiResponse:  # noqa: E501
        """Trigger transaction categorisation  # noqa: E501

        Trigger categorisation for a specified set of transactions  # noqa: E501

        :param consent: __Mandatory__. The `consent-token` containing the user's authorisation to make the request. (required)
        :type consent: str
        :param account_id: Unique identifier for account (required)
        :type account_id: str
        :param psu_id: __Conditional__. Represents the user's login ID for the `Institution` to a personal account. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required.
        :type psu_id: str
        :param psu_corporate_id: __Conditional__. Represents the user's login ID for the `Institution` to a business account. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required.
        :type psu_corporate_id: str
        :param psu_ip_address: __Conditional__. The IP address of the PSU. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required.
        :type psu_ip_address: str
        :param sub_application: The sub-application ID to which event type is being subscribed to
        :type sub_application: str
        :param post_accounts_account_id_transactions_categorisation_request:
        :type post_accounts_account_id_transactions_categorisation_request: PostAccountsAccountIdTransactionsCategorisationRequest
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(PostAccountsAccountIdTransactionsCategorisation201Response, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            "consent",
            "account_id",
            "psu_id",
            "psu_corporate_id",
            "psu_ip_address",
            "sub_application",
            "post_accounts_account_id_transactions_categorisation_request",
        ]
        _all_params.extend(
            [
                "_return_http_data_only",
                "_preload_content",
                "_request_timeout",
                "_request_auth",
                "_content_type",
                "_headers",
            ]
        )

        # validate the arguments
        for _key, _val in _params["kwargs"].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_accounts_account_id_transactions_categorisation"
                    % _key
                )
            _params[_key] = _val
        del _params["kwargs"]

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params["account_id"] is not None:
            _path_params["accountId"] = _params["account_id"]

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get("_headers", {}))
        if _params["consent"] is not None:
            _header_params["consent"] = _params["consent"]

        if _params["psu_id"] is not None:
            _header_params["psu-id"] = _params["psu_id"]

        if _params["psu_corporate_id"] is not None:
            _header_params["psu-corporate-id"] = _params["psu_corporate_id"]

        if _params["psu_ip_address"] is not None:
            _header_params["psu-ip-address"] = _params["psu_ip_address"]

        if _params["sub_application"] is not None:
            _header_params["sub-application"] = _params["sub_application"]

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if (
            _params["post_accounts_account_id_transactions_categorisation_request"]
            is not None
        ):
            _body_params = _params[
                "post_accounts_account_id_transactions_categorisation_request"
            ]

        # set the HTTP header `Accept`
        _header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json", "application/json;charset=UTF-8"]
        )  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get(
            "_content_type",
            self.api_client.select_header_content_type(["application/json"]),
        )
        if _content_types_list:
            _header_params["Content-Type"] = _content_types_list

        # authentication setting
        _auth_settings = ["basicAuth"]  # noqa: E501

        _response_types_map = {
            "201": "PostAccountsAccountIdTransactionsCategorisation201Response",
            "400": "ApiErrorResponseV2",
            "401": "ApiErrorResponseV2",
            "500": "ApiErrorResponseV2",
        }

        return await self.api_client.call_api(
            "/accounts/{accountId}/transactions/categorisation",
            "POST",
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            _return_http_data_only=_params.get("_return_http_data_only"),  # noqa: E501
            _preload_content=_params.get("_preload_content", True),
            _request_timeout=_params.get("_request_timeout"),
            collection_formats=_collection_formats,
            _request_auth=_params.get("_request_auth"),
        )
