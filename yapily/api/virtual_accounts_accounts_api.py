# coding: utf-8

"""
    Yapily API

    The Yapily API enables connections between your application and users' banks. For more information check out our [documentation](https://docs.yapily.com/).<br><br>In particular, make sure to view our [Getting Started](https://docs.yapily.com/pages/home/getting-started/) steps if this is your first time here.<br><br>While testing the API, our list of [sandbox credentials](https://docs.yapily.com/pages/key-concepts/sandbox-credentials/) maybe useful.

    The version of the OpenAPI document: 2.25.0
    Contact: support@yapily.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import re  # noqa: F401
import io
import warnings

from pydantic import validate_arguments, ValidationError
from typing import overload, Optional, Union, Awaitable

from typing_extensions import Annotated
from pydantic import Field, StrictStr, constr, validator

from typing import Optional

from yapily.models.api_list_response_of_virtual_account import ApiListResponseOfVirtualAccount
from yapily.models.api_response_of_virtual_account import ApiResponseOfVirtualAccount
from yapily.models.update_virtual_account_request import UpdateVirtualAccountRequest
from yapily.models.virtual_account_request import VirtualAccountRequest

from yapily.api_client import ApiClient
from yapily.api_response import ApiResponse
from yapily.exceptions import (  # noqa: F401
    ApiTypeError,
    ApiValueError
)


class VirtualAccountsAccountsApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client

    @overload
    async def create_virtual_account(self, client_id : Annotated[StrictStr, Field(..., description="The customer or sub-customer ID. Identifies the customer to perform the request for")], virtual_account_request : VirtualAccountRequest, **kwargs) -> ApiResponseOfVirtualAccount:  # noqa: E501
        ...

    @overload
    def create_virtual_account(self, client_id : Annotated[StrictStr, Field(..., description="The customer or sub-customer ID. Identifies the customer to perform the request for")], virtual_account_request : VirtualAccountRequest, async_req: Optional[bool]=True, **kwargs) -> ApiResponseOfVirtualAccount:  # noqa: E501
        ...

    @validate_arguments
    def create_virtual_account(self, client_id : Annotated[StrictStr, Field(..., description="The customer or sub-customer ID. Identifies the customer to perform the request for")], virtual_account_request : VirtualAccountRequest, async_req: Optional[bool]=None, **kwargs) -> Union[ApiResponseOfVirtualAccount, Awaitable[ApiResponseOfVirtualAccount]]:  # noqa: E501
        """Create Account  # noqa: E501

        Create a new virtual account  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_virtual_account(client_id, virtual_account_request, async_req=True)
        >>> result = thread.get()

        :param client_id: The customer or sub-customer ID. Identifies the customer to perform the request for (required)
        :type client_id: str
        :param virtual_account_request: (required)
        :type virtual_account_request: VirtualAccountRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ApiResponseOfVirtualAccount
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the create_virtual_account_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        if async_req is not None:
            kwargs['async_req'] = async_req
        return self.create_virtual_account_with_http_info(client_id, virtual_account_request, **kwargs)  # noqa: E501

    @validate_arguments
    def create_virtual_account_with_http_info(self, client_id : Annotated[StrictStr, Field(..., description="The customer or sub-customer ID. Identifies the customer to perform the request for")], virtual_account_request : VirtualAccountRequest, **kwargs) -> ApiResponse:  # noqa: E501
        """Create Account  # noqa: E501

        Create a new virtual account  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_virtual_account_with_http_info(client_id, virtual_account_request, async_req=True)
        >>> result = thread.get()

        :param client_id: The customer or sub-customer ID. Identifies the customer to perform the request for (required)
        :type client_id: str
        :param virtual_account_request: (required)
        :type virtual_account_request: VirtualAccountRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(ApiResponseOfVirtualAccount, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'client_id',
            'virtual_account_request'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_virtual_account" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['client_id']:
            _header_params['client-id'] = _params['client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['virtual_account_request'] is not None:
            _body_params = _params['virtual_account_request']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json;charset=UTF-8']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['basicAuth']  # noqa: E501

        _response_types_map = {
            '201': "ApiResponseOfVirtualAccount",
            '400': "ApiErrorResponse",
            '401': "Model401VirtualAccountsApiErrorResponse",
            '403': "Model403VirtualAccountsApiErrorResponse",
            '424': "Model424VirtualAccountsApiErrorResponse",
            '500': "Model500VirtualAccountsApiErrorResponse",
        }

        return self.api_client.call_api(
            '/virtual-accounts/accounts', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @overload
    async def get_virtual_account_by_id(self, account_id : Annotated[StrictStr, Field(..., description="__Mandatory__. The Id of the account.")], client_id : Annotated[StrictStr, Field(..., description="The customer or sub-customer ID. Identifies the customer to perform the request for")], **kwargs) -> ApiResponseOfVirtualAccount:  # noqa: E501
        ...

    @overload
    def get_virtual_account_by_id(self, account_id : Annotated[StrictStr, Field(..., description="__Mandatory__. The Id of the account.")], client_id : Annotated[StrictStr, Field(..., description="The customer or sub-customer ID. Identifies the customer to perform the request for")], async_req: Optional[bool]=True, **kwargs) -> ApiResponseOfVirtualAccount:  # noqa: E501
        ...

    @validate_arguments
    def get_virtual_account_by_id(self, account_id : Annotated[StrictStr, Field(..., description="__Mandatory__. The Id of the account.")], client_id : Annotated[StrictStr, Field(..., description="The customer or sub-customer ID. Identifies the customer to perform the request for")], async_req: Optional[bool]=None, **kwargs) -> Union[ApiResponseOfVirtualAccount, Awaitable[ApiResponseOfVirtualAccount]]:  # noqa: E501
        """Get Account  # noqa: E501

        Get the details of a specific account using its Id  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_virtual_account_by_id(account_id, client_id, async_req=True)
        >>> result = thread.get()

        :param account_id: __Mandatory__. The Id of the account. (required)
        :type account_id: str
        :param client_id: The customer or sub-customer ID. Identifies the customer to perform the request for (required)
        :type client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ApiResponseOfVirtualAccount
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the get_virtual_account_by_id_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        if async_req is not None:
            kwargs['async_req'] = async_req
        return self.get_virtual_account_by_id_with_http_info(account_id, client_id, **kwargs)  # noqa: E501

    @validate_arguments
    def get_virtual_account_by_id_with_http_info(self, account_id : Annotated[StrictStr, Field(..., description="__Mandatory__. The Id of the account.")], client_id : Annotated[StrictStr, Field(..., description="The customer or sub-customer ID. Identifies the customer to perform the request for")], **kwargs) -> ApiResponse:  # noqa: E501
        """Get Account  # noqa: E501

        Get the details of a specific account using its Id  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_virtual_account_by_id_with_http_info(account_id, client_id, async_req=True)
        >>> result = thread.get()

        :param account_id: __Mandatory__. The Id of the account. (required)
        :type account_id: str
        :param client_id: The customer or sub-customer ID. Identifies the customer to perform the request for (required)
        :type client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(ApiResponseOfVirtualAccount, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'account_id',
            'client_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_virtual_account_by_id" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['account_id']:
            _path_params['accountId'] = _params['account_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['client_id']:
            _header_params['client-id'] = _params['client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['basicAuth']  # noqa: E501

        _response_types_map = {
            '200': "ApiResponseOfVirtualAccount",
            '400': "ApiErrorResponse",
            '401': "Model401VirtualAccountsApiErrorResponse",
            '403': "Model403VirtualAccountsApiErrorResponse",
            '404': "Model404VirtualAccountsApiErrorResponse",
            '424': "Model424VirtualAccountsApiErrorResponse",
            '500': "Model500VirtualAccountsApiErrorResponse",
        }

        return self.api_client.call_api(
            '/virtual-accounts/accounts/{accountId}', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @overload
    async def get_virtual_accounts(self, client_id : Annotated[StrictStr, Field(..., description="The customer or sub-customer ID. Identifies the customer to perform the request for")], nickname : Annotated[Optional[StrictStr], Field(description="__Optional__. Filter accounts based on reference provided in order to help with identification of the account")] = None, currency : Annotated[Optional[constr(strict=True)], Field(description="__Optional__. Filter accounts based on three-letter ISO 4217 currency code")] = None, status : Annotated[Optional[StrictStr], Field(description="__Optional__. Filter accounts based on their current state. One of PENDING, ACTIVE, FAILED, SUSPENDED or CLOSED")] = None, cursor : Annotated[Optional[StrictStr], Field(description="__Optional__. Data required to provide pagination")] = None, **kwargs) -> ApiListResponseOfVirtualAccount:  # noqa: E501
        ...

    @overload
    def get_virtual_accounts(self, client_id : Annotated[StrictStr, Field(..., description="The customer or sub-customer ID. Identifies the customer to perform the request for")], nickname : Annotated[Optional[StrictStr], Field(description="__Optional__. Filter accounts based on reference provided in order to help with identification of the account")] = None, currency : Annotated[Optional[constr(strict=True)], Field(description="__Optional__. Filter accounts based on three-letter ISO 4217 currency code")] = None, status : Annotated[Optional[StrictStr], Field(description="__Optional__. Filter accounts based on their current state. One of PENDING, ACTIVE, FAILED, SUSPENDED or CLOSED")] = None, cursor : Annotated[Optional[StrictStr], Field(description="__Optional__. Data required to provide pagination")] = None, async_req: Optional[bool]=True, **kwargs) -> ApiListResponseOfVirtualAccount:  # noqa: E501
        ...

    @validate_arguments
    def get_virtual_accounts(self, client_id : Annotated[StrictStr, Field(..., description="The customer or sub-customer ID. Identifies the customer to perform the request for")], nickname : Annotated[Optional[StrictStr], Field(description="__Optional__. Filter accounts based on reference provided in order to help with identification of the account")] = None, currency : Annotated[Optional[constr(strict=True)], Field(description="__Optional__. Filter accounts based on three-letter ISO 4217 currency code")] = None, status : Annotated[Optional[StrictStr], Field(description="__Optional__. Filter accounts based on their current state. One of PENDING, ACTIVE, FAILED, SUSPENDED or CLOSED")] = None, cursor : Annotated[Optional[StrictStr], Field(description="__Optional__. Data required to provide pagination")] = None, async_req: Optional[bool]=None, **kwargs) -> Union[ApiListResponseOfVirtualAccount, Awaitable[ApiListResponseOfVirtualAccount]]:  # noqa: E501
        """Get Accounts  # noqa: E501

        Retrieve a list of all virtual accounts held  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_virtual_accounts(client_id, nickname, currency, status, cursor, async_req=True)
        >>> result = thread.get()

        :param client_id: The customer or sub-customer ID. Identifies the customer to perform the request for (required)
        :type client_id: str
        :param nickname: __Optional__. Filter accounts based on reference provided in order to help with identification of the account
        :type nickname: str
        :param currency: __Optional__. Filter accounts based on three-letter ISO 4217 currency code
        :type currency: str
        :param status: __Optional__. Filter accounts based on their current state. One of PENDING, ACTIVE, FAILED, SUSPENDED or CLOSED
        :type status: str
        :param cursor: __Optional__. Data required to provide pagination
        :type cursor: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ApiListResponseOfVirtualAccount
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the get_virtual_accounts_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        if async_req is not None:
            kwargs['async_req'] = async_req
        return self.get_virtual_accounts_with_http_info(client_id, nickname, currency, status, cursor, **kwargs)  # noqa: E501

    @validate_arguments
    def get_virtual_accounts_with_http_info(self, client_id : Annotated[StrictStr, Field(..., description="The customer or sub-customer ID. Identifies the customer to perform the request for")], nickname : Annotated[Optional[StrictStr], Field(description="__Optional__. Filter accounts based on reference provided in order to help with identification of the account")] = None, currency : Annotated[Optional[constr(strict=True)], Field(description="__Optional__. Filter accounts based on three-letter ISO 4217 currency code")] = None, status : Annotated[Optional[StrictStr], Field(description="__Optional__. Filter accounts based on their current state. One of PENDING, ACTIVE, FAILED, SUSPENDED or CLOSED")] = None, cursor : Annotated[Optional[StrictStr], Field(description="__Optional__. Data required to provide pagination")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Get Accounts  # noqa: E501

        Retrieve a list of all virtual accounts held  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_virtual_accounts_with_http_info(client_id, nickname, currency, status, cursor, async_req=True)
        >>> result = thread.get()

        :param client_id: The customer or sub-customer ID. Identifies the customer to perform the request for (required)
        :type client_id: str
        :param nickname: __Optional__. Filter accounts based on reference provided in order to help with identification of the account
        :type nickname: str
        :param currency: __Optional__. Filter accounts based on three-letter ISO 4217 currency code
        :type currency: str
        :param status: __Optional__. Filter accounts based on their current state. One of PENDING, ACTIVE, FAILED, SUSPENDED or CLOSED
        :type status: str
        :param cursor: __Optional__. Data required to provide pagination
        :type cursor: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(ApiListResponseOfVirtualAccount, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'client_id',
            'nickname',
            'currency',
            'status',
            'cursor'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_virtual_accounts" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get('nickname') is not None:  # noqa: E501
            _query_params.append(('nickname', _params['nickname']))

        if _params.get('currency') is not None:  # noqa: E501
            _query_params.append(('currency', _params['currency']))

        if _params.get('status') is not None:  # noqa: E501
            _query_params.append(('status', _params['status']))

        if _params.get('cursor') is not None:  # noqa: E501
            _query_params.append(('cursor', _params['cursor']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['client_id']:
            _header_params['client-id'] = _params['client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['basicAuth']  # noqa: E501

        _response_types_map = {
            '200': "ApiListResponseOfVirtualAccount",
            '400': "ApiErrorResponse",
            '401': "Model401VirtualAccountsApiErrorResponse",
            '403': "Model403VirtualAccountsApiErrorResponse",
            '424': "Model424VirtualAccountsApiErrorResponse",
            '500': "Model500VirtualAccountsApiErrorResponse",
        }

        return self.api_client.call_api(
            '/virtual-accounts/accounts', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @overload
    async def update_virtual_account_by_id(self, account_id : Annotated[StrictStr, Field(..., description="__Mandatory__. The Id of the account.")], client_id : Annotated[StrictStr, Field(..., description="The customer or sub-customer ID. Identifies the customer to perform the request for")], update_virtual_account_request : UpdateVirtualAccountRequest, **kwargs) -> ApiResponseOfVirtualAccount:  # noqa: E501
        ...

    @overload
    def update_virtual_account_by_id(self, account_id : Annotated[StrictStr, Field(..., description="__Mandatory__. The Id of the account.")], client_id : Annotated[StrictStr, Field(..., description="The customer or sub-customer ID. Identifies the customer to perform the request for")], update_virtual_account_request : UpdateVirtualAccountRequest, async_req: Optional[bool]=True, **kwargs) -> ApiResponseOfVirtualAccount:  # noqa: E501
        ...

    @validate_arguments
    def update_virtual_account_by_id(self, account_id : Annotated[StrictStr, Field(..., description="__Mandatory__. The Id of the account.")], client_id : Annotated[StrictStr, Field(..., description="The customer or sub-customer ID. Identifies the customer to perform the request for")], update_virtual_account_request : UpdateVirtualAccountRequest, async_req: Optional[bool]=None, **kwargs) -> Union[ApiResponseOfVirtualAccount, Awaitable[ApiResponseOfVirtualAccount]]:  # noqa: E501
        """Update Account  # noqa: E501

        Update the details of a specific account using its Id  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_virtual_account_by_id(account_id, client_id, update_virtual_account_request, async_req=True)
        >>> result = thread.get()

        :param account_id: __Mandatory__. The Id of the account. (required)
        :type account_id: str
        :param client_id: The customer or sub-customer ID. Identifies the customer to perform the request for (required)
        :type client_id: str
        :param update_virtual_account_request: (required)
        :type update_virtual_account_request: UpdateVirtualAccountRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ApiResponseOfVirtualAccount
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the update_virtual_account_by_id_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        if async_req is not None:
            kwargs['async_req'] = async_req
        return self.update_virtual_account_by_id_with_http_info(account_id, client_id, update_virtual_account_request, **kwargs)  # noqa: E501

    @validate_arguments
    def update_virtual_account_by_id_with_http_info(self, account_id : Annotated[StrictStr, Field(..., description="__Mandatory__. The Id of the account.")], client_id : Annotated[StrictStr, Field(..., description="The customer or sub-customer ID. Identifies the customer to perform the request for")], update_virtual_account_request : UpdateVirtualAccountRequest, **kwargs) -> ApiResponse:  # noqa: E501
        """Update Account  # noqa: E501

        Update the details of a specific account using its Id  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_virtual_account_by_id_with_http_info(account_id, client_id, update_virtual_account_request, async_req=True)
        >>> result = thread.get()

        :param account_id: __Mandatory__. The Id of the account. (required)
        :type account_id: str
        :param client_id: The customer or sub-customer ID. Identifies the customer to perform the request for (required)
        :type client_id: str
        :param update_virtual_account_request: (required)
        :type update_virtual_account_request: UpdateVirtualAccountRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(ApiResponseOfVirtualAccount, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'account_id',
            'client_id',
            'update_virtual_account_request'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_virtual_account_by_id" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['account_id']:
            _path_params['accountId'] = _params['account_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['client_id']:
            _header_params['client-id'] = _params['client_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['update_virtual_account_request'] is not None:
            _body_params = _params['update_virtual_account_request']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json;charset=UTF-8']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['basicAuth']  # noqa: E501

        _response_types_map = {
            '200': "ApiResponseOfVirtualAccount",
            '400': "ApiErrorResponse",
            '401': "Model401VirtualAccountsApiErrorResponse",
            '403': "Model403VirtualAccountsApiErrorResponse",
            '404': "Model404VirtualAccountsApiErrorResponse",
            '424': "Model424VirtualAccountsApiErrorResponse",
            '500': "Model500VirtualAccountsApiErrorResponse",
        }

        return self.api_client.call_api(
            '/virtual-accounts/accounts/{accountId}', 'PATCH',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))
