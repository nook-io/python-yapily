# coding: utf-8

"""
    Yapily API

    The Yapily API enables connections between your application and users' banks. For more information check out our [documentation](https://docs.yapily.com/).<br><br>In particular, make sure to view our [Getting Started](https://docs.yapily.com/pages/home/getting-started/) steps if this is your first time here.<br><br>While testing the API, our list of [sandbox credentials](https://docs.yapily.com/pages/key-concepts/sandbox-credentials/) maybe useful.

    The version of the OpenAPI document: 2.13.1
    Contact: support@yapily.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import re  # noqa: F401
import io
import warnings

from pydantic import validate_arguments, ValidationError
from typing import overload, Optional, Union, Awaitable

from typing_extensions import Annotated
from pydantic import Field, StrictStr

from yapily.models.api_response_of_financial_profile import ApiResponseOfFinancialProfile
from yapily.models.api_response_of_financial_profile_authorisation_response import ApiResponseOfFinancialProfileAuthorisationResponse
from yapily.models.api_response_of_financial_profile_balance_prediction import ApiResponseOfFinancialProfileBalancePrediction
from yapily.models.api_response_of_financial_profile_consent import ApiResponseOfFinancialProfileConsent
from yapily.models.api_response_of_financial_profile_consent_remove_response import ApiResponseOfFinancialProfileConsentRemoveResponse

from yapily.api_client import ApiClient
from yapily.api_response import ApiResponse
from yapily.exceptions import (  # noqa: F401
    ApiTypeError,
    ApiValueError
)


class FinancialProfileApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client

    @overload
    async def create_profile_consent(self, user_uuid : Annotated[StrictStr, Field(..., description="__Mandatory__. The Yapily generated UUID for the user.")], consent : Annotated[StrictStr, Field(..., description="__Mandatory__. The `consent-token` obtained from the original authorisation.")], **kwargs) -> ApiResponseOfFinancialProfileAuthorisationResponse:  # noqa: E501
        ...

    @overload
    def create_profile_consent(self, user_uuid : Annotated[StrictStr, Field(..., description="__Mandatory__. The Yapily generated UUID for the user.")], consent : Annotated[StrictStr, Field(..., description="__Mandatory__. The `consent-token` obtained from the original authorisation.")], async_req: Optional[bool]=True, **kwargs) -> ApiResponseOfFinancialProfileAuthorisationResponse:  # noqa: E501
        ...

    @validate_arguments
    def create_profile_consent(self, user_uuid : Annotated[StrictStr, Field(..., description="__Mandatory__. The Yapily generated UUID for the user.")], consent : Annotated[StrictStr, Field(..., description="__Mandatory__. The `consent-token` obtained from the original authorisation.")], async_req: Optional[bool]=None, **kwargs) -> Union[ApiResponseOfFinancialProfileAuthorisationResponse, Awaitable[ApiResponseOfFinancialProfileAuthorisationResponse]]:  # noqa: E501
        """Create Profile Consent  # noqa: E501

        Used to add a consent to a `Financial Profile` for a `User`.  The response is asynchronous, returned with pending status, while retrieval of financial data is commenced.  There is a limit of 10,000 transactions for enrichment.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_profile_consent(user_uuid, consent, async_req=True)
        >>> result = thread.get()

        :param user_uuid: __Mandatory__. The Yapily generated UUID for the user. (required)
        :type user_uuid: str
        :param consent: __Mandatory__. The `consent-token` obtained from the original authorisation. (required)
        :type consent: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ApiResponseOfFinancialProfileAuthorisationResponse
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the create_profile_consent_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        if async_req is not None:
            kwargs['async_req'] = async_req
        return self.create_profile_consent_with_http_info(user_uuid, consent, **kwargs)  # noqa: E501

    @validate_arguments
    def create_profile_consent_with_http_info(self, user_uuid : Annotated[StrictStr, Field(..., description="__Mandatory__. The Yapily generated UUID for the user.")], consent : Annotated[StrictStr, Field(..., description="__Mandatory__. The `consent-token` obtained from the original authorisation.")], **kwargs) -> ApiResponse:  # noqa: E501
        """Create Profile Consent  # noqa: E501

        Used to add a consent to a `Financial Profile` for a `User`.  The response is asynchronous, returned with pending status, while retrieval of financial data is commenced.  There is a limit of 10,000 transactions for enrichment.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_profile_consent_with_http_info(user_uuid, consent, async_req=True)
        >>> result = thread.get()

        :param user_uuid: __Mandatory__. The Yapily generated UUID for the user. (required)
        :type user_uuid: str
        :param consent: __Mandatory__. The `consent-token` obtained from the original authorisation. (required)
        :type consent: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(ApiResponseOfFinancialProfileAuthorisationResponse, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'user_uuid',
            'consent'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_profile_consent" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['user_uuid']:
            _path_params['userUuid'] = _params['user_uuid']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['consent']:
            _header_params['consent'] = _params['consent']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['basicAuth']  # noqa: E501

        _response_types_map = {
            '201': "ApiResponseOfFinancialProfileAuthorisationResponse",
            '400': "ApiResponseError",
            '401': "ApiResponseError",
            '404': "ApiResponseError",
        }

        return self.api_client.call_api(
            '/users/{userUuid}/profile/consents', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @overload
    async def delete_profile_consent(self, user_uuid : Annotated[StrictStr, Field(..., description="__Mandatory__. The Yapily generated UUID for the user.")], profile_consent_id : Annotated[StrictStr, Field(..., description="__Mandatory__. The ID of the ProfileConsent")], **kwargs) -> ApiResponseOfFinancialProfileConsentRemoveResponse:  # noqa: E501
        ...

    @overload
    def delete_profile_consent(self, user_uuid : Annotated[StrictStr, Field(..., description="__Mandatory__. The Yapily generated UUID for the user.")], profile_consent_id : Annotated[StrictStr, Field(..., description="__Mandatory__. The ID of the ProfileConsent")], async_req: Optional[bool]=True, **kwargs) -> ApiResponseOfFinancialProfileConsentRemoveResponse:  # noqa: E501
        ...

    @validate_arguments
    def delete_profile_consent(self, user_uuid : Annotated[StrictStr, Field(..., description="__Mandatory__. The Yapily generated UUID for the user.")], profile_consent_id : Annotated[StrictStr, Field(..., description="__Mandatory__. The ID of the ProfileConsent")], async_req: Optional[bool]=None, **kwargs) -> Union[ApiResponseOfFinancialProfileConsentRemoveResponse, Awaitable[ApiResponseOfFinancialProfileConsentRemoveResponse]]:  # noqa: E501
        """Delete Profile Consent  # noqa: E501

        Used to delete a `ProfileConsent` for a `User`. This will remove the consent and all associated financial data from the 'Financial Profile'.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_profile_consent(user_uuid, profile_consent_id, async_req=True)
        >>> result = thread.get()

        :param user_uuid: __Mandatory__. The Yapily generated UUID for the user. (required)
        :type user_uuid: str
        :param profile_consent_id: __Mandatory__. The ID of the ProfileConsent (required)
        :type profile_consent_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ApiResponseOfFinancialProfileConsentRemoveResponse
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the delete_profile_consent_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        if async_req is not None:
            kwargs['async_req'] = async_req
        return self.delete_profile_consent_with_http_info(user_uuid, profile_consent_id, **kwargs)  # noqa: E501

    @validate_arguments
    def delete_profile_consent_with_http_info(self, user_uuid : Annotated[StrictStr, Field(..., description="__Mandatory__. The Yapily generated UUID for the user.")], profile_consent_id : Annotated[StrictStr, Field(..., description="__Mandatory__. The ID of the ProfileConsent")], **kwargs) -> ApiResponse:  # noqa: E501
        """Delete Profile Consent  # noqa: E501

        Used to delete a `ProfileConsent` for a `User`. This will remove the consent and all associated financial data from the 'Financial Profile'.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_profile_consent_with_http_info(user_uuid, profile_consent_id, async_req=True)
        >>> result = thread.get()

        :param user_uuid: __Mandatory__. The Yapily generated UUID for the user. (required)
        :type user_uuid: str
        :param profile_consent_id: __Mandatory__. The ID of the ProfileConsent (required)
        :type profile_consent_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(ApiResponseOfFinancialProfileConsentRemoveResponse, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'user_uuid',
            'profile_consent_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_profile_consent" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['user_uuid']:
            _path_params['userUuid'] = _params['user_uuid']

        if _params['profile_consent_id']:
            _path_params['profileConsentId'] = _params['profile_consent_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['basicAuth']  # noqa: E501

        _response_types_map = {
            '200': "ApiResponseOfFinancialProfileConsentRemoveResponse",
            '400': "ApiResponseError",
            '401': "ApiResponseError",
            '404': "ApiResponseError",
        }

        return self.api_client.call_api(
            '/users/{userUuid}/profile/consents/{profileConsentId}', 'DELETE',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @overload
    async def get_balance_prediction(self, user_uuid : Annotated[StrictStr, Field(..., description="__Mandatory__. The Yapily generated UUID for the user.")], **kwargs) -> ApiResponseOfFinancialProfileBalancePrediction:  # noqa: E501
        ...

    @overload
    def get_balance_prediction(self, user_uuid : Annotated[StrictStr, Field(..., description="__Mandatory__. The Yapily generated UUID for the user.")], async_req: Optional[bool]=True, **kwargs) -> ApiResponseOfFinancialProfileBalancePrediction:  # noqa: E501
        ...

    @validate_arguments
    def get_balance_prediction(self, user_uuid : Annotated[StrictStr, Field(..., description="__Mandatory__. The Yapily generated UUID for the user.")], async_req: Optional[bool]=None, **kwargs) -> Union[ApiResponseOfFinancialProfileBalancePrediction, Awaitable[ApiResponseOfFinancialProfileBalancePrediction]]:  # noqa: E501
        """Get Predicted Balances  # noqa: E501

        Used to retrieve a `Balance Prediction Profile` for a `User`.  Status will be `PENDING` until all ProfileConsents are `COMPLETED`.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_balance_prediction(user_uuid, async_req=True)
        >>> result = thread.get()

        :param user_uuid: __Mandatory__. The Yapily generated UUID for the user. (required)
        :type user_uuid: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ApiResponseOfFinancialProfileBalancePrediction
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the get_balance_prediction_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        if async_req is not None:
            kwargs['async_req'] = async_req
        return self.get_balance_prediction_with_http_info(user_uuid, **kwargs)  # noqa: E501

    @validate_arguments
    def get_balance_prediction_with_http_info(self, user_uuid : Annotated[StrictStr, Field(..., description="__Mandatory__. The Yapily generated UUID for the user.")], **kwargs) -> ApiResponse:  # noqa: E501
        """Get Predicted Balances  # noqa: E501

        Used to retrieve a `Balance Prediction Profile` for a `User`.  Status will be `PENDING` until all ProfileConsents are `COMPLETED`.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_balance_prediction_with_http_info(user_uuid, async_req=True)
        >>> result = thread.get()

        :param user_uuid: __Mandatory__. The Yapily generated UUID for the user. (required)
        :type user_uuid: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(ApiResponseOfFinancialProfileBalancePrediction, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'user_uuid'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_balance_prediction" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['user_uuid']:
            _path_params['userUuid'] = _params['user_uuid']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['basicAuth']  # noqa: E501

        _response_types_map = {
            '200': "ApiResponseOfFinancialProfileBalancePrediction",
            '400': "ApiResponseError",
            '401': "ApiResponseError",
            '404': "ApiResponseError",
        }

        return self.api_client.call_api(
            '/users/{userUuid}/profile/predicted-balances', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @overload
    async def get_profile_consent(self, user_uuid : Annotated[StrictStr, Field(..., description="__Mandatory__. The Yapily generated UUID for the user.")], profile_consent_id : Annotated[StrictStr, Field(..., description="__Mandatory__. The ID of the ProfileConsent")], **kwargs) -> ApiResponseOfFinancialProfileConsent:  # noqa: E501
        ...

    @overload
    def get_profile_consent(self, user_uuid : Annotated[StrictStr, Field(..., description="__Mandatory__. The Yapily generated UUID for the user.")], profile_consent_id : Annotated[StrictStr, Field(..., description="__Mandatory__. The ID of the ProfileConsent")], async_req: Optional[bool]=True, **kwargs) -> ApiResponseOfFinancialProfileConsent:  # noqa: E501
        ...

    @validate_arguments
    def get_profile_consent(self, user_uuid : Annotated[StrictStr, Field(..., description="__Mandatory__. The Yapily generated UUID for the user.")], profile_consent_id : Annotated[StrictStr, Field(..., description="__Mandatory__. The ID of the ProfileConsent")], async_req: Optional[bool]=None, **kwargs) -> Union[ApiResponseOfFinancialProfileConsent, Awaitable[ApiResponseOfFinancialProfileConsent]]:  # noqa: E501
        """Get Profile Consent  # noqa: E501

        Used to retreive a specific ProfileConsent for a User.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_profile_consent(user_uuid, profile_consent_id, async_req=True)
        >>> result = thread.get()

        :param user_uuid: __Mandatory__. The Yapily generated UUID for the user. (required)
        :type user_uuid: str
        :param profile_consent_id: __Mandatory__. The ID of the ProfileConsent (required)
        :type profile_consent_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ApiResponseOfFinancialProfileConsent
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the get_profile_consent_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        if async_req is not None:
            kwargs['async_req'] = async_req
        return self.get_profile_consent_with_http_info(user_uuid, profile_consent_id, **kwargs)  # noqa: E501

    @validate_arguments
    def get_profile_consent_with_http_info(self, user_uuid : Annotated[StrictStr, Field(..., description="__Mandatory__. The Yapily generated UUID for the user.")], profile_consent_id : Annotated[StrictStr, Field(..., description="__Mandatory__. The ID of the ProfileConsent")], **kwargs) -> ApiResponse:  # noqa: E501
        """Get Profile Consent  # noqa: E501

        Used to retreive a specific ProfileConsent for a User.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_profile_consent_with_http_info(user_uuid, profile_consent_id, async_req=True)
        >>> result = thread.get()

        :param user_uuid: __Mandatory__. The Yapily generated UUID for the user. (required)
        :type user_uuid: str
        :param profile_consent_id: __Mandatory__. The ID of the ProfileConsent (required)
        :type profile_consent_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(ApiResponseOfFinancialProfileConsent, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'user_uuid',
            'profile_consent_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_profile_consent" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['user_uuid']:
            _path_params['userUuid'] = _params['user_uuid']

        if _params['profile_consent_id']:
            _path_params['profileConsentId'] = _params['profile_consent_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['basicAuth']  # noqa: E501

        _response_types_map = {
            '200': "ApiResponseOfFinancialProfileConsent",
            '400': "ApiResponseError",
            '401': "ApiResponseError",
            '404': "ApiResponseError",
        }

        return self.api_client.call_api(
            '/users/{userUuid}/profile/consents/{profileConsentId}', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @overload
    async def get_user_profile(self, user_uuid : Annotated[StrictStr, Field(..., description="__Mandatory__. The Yapily generated UUID for the user.")], **kwargs) -> ApiResponseOfFinancialProfile:  # noqa: E501
        ...

    @overload
    def get_user_profile(self, user_uuid : Annotated[StrictStr, Field(..., description="__Mandatory__. The Yapily generated UUID for the user.")], async_req: Optional[bool]=True, **kwargs) -> ApiResponseOfFinancialProfile:  # noqa: E501
        ...

    @validate_arguments
    def get_user_profile(self, user_uuid : Annotated[StrictStr, Field(..., description="__Mandatory__. The Yapily generated UUID for the user.")], async_req: Optional[bool]=None, **kwargs) -> Union[ApiResponseOfFinancialProfile, Awaitable[ApiResponseOfFinancialProfile]]:  # noqa: E501
        """Get User Profile  # noqa: E501

        Used to retrieve a `FinancialProfile` for a `User`.  Status will be `PENDING` until all ProfileConsents are `COMPLETED`.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_user_profile(user_uuid, async_req=True)
        >>> result = thread.get()

        :param user_uuid: __Mandatory__. The Yapily generated UUID for the user. (required)
        :type user_uuid: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ApiResponseOfFinancialProfile
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the get_user_profile_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        if async_req is not None:
            kwargs['async_req'] = async_req
        return self.get_user_profile_with_http_info(user_uuid, **kwargs)  # noqa: E501

    @validate_arguments
    def get_user_profile_with_http_info(self, user_uuid : Annotated[StrictStr, Field(..., description="__Mandatory__. The Yapily generated UUID for the user.")], **kwargs) -> ApiResponse:  # noqa: E501
        """Get User Profile  # noqa: E501

        Used to retrieve a `FinancialProfile` for a `User`.  Status will be `PENDING` until all ProfileConsents are `COMPLETED`.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_user_profile_with_http_info(user_uuid, async_req=True)
        >>> result = thread.get()

        :param user_uuid: __Mandatory__. The Yapily generated UUID for the user. (required)
        :type user_uuid: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(ApiResponseOfFinancialProfile, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'user_uuid'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_user_profile" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['user_uuid']:
            _path_params['userUuid'] = _params['user_uuid']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['basicAuth']  # noqa: E501

        _response_types_map = {
            '200': "ApiResponseOfFinancialProfile",
            '400': "ApiResponseError",
            '401': "ApiResponseError",
            '404': "ApiResponseError",
        }

        return self.api_client.call_api(
            '/users/{userUuid}/profile', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))
