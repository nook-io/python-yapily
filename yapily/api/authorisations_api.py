# coding: utf-8

"""
    Yapily API

    The Yapily API enables connections between your application and users' banks. For more information check out our [documentation](https://docs.yapily.com/).<br><br>In particular, make sure to view our [Getting Started](https://docs.yapily.com/pages/home/getting-started/) steps if this is your first time here.<br><br>While testing the API, our list of [sandbox credentials](https://docs.yapily.com/pages/key-concepts/sandbox-credentials/) maybe useful.

    The version of the OpenAPI document: 2.13.1
    Contact: support@yapily.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import re  # noqa: F401
import io
import warnings

from pydantic import validate_arguments, ValidationError
from typing import overload, Optional, Union, Awaitable

from typing_extensions import Annotated
from pydantic import Field, StrictBool, StrictStr

from typing import Optional

from yapily.models.account_authorisation_request import AccountAuthorisationRequest
from yapily.models.api_response_of_account_authorisation_response import ApiResponseOfAccountAuthorisationResponse
from yapily.models.api_response_of_embedded_account_authorisation_response import ApiResponseOfEmbeddedAccountAuthorisationResponse
from yapily.models.api_response_of_payment_authorisation_request_response import ApiResponseOfPaymentAuthorisationRequestResponse
from yapily.models.api_response_of_payment_embedded_authorisation_request_response import ApiResponseOfPaymentEmbeddedAuthorisationRequestResponse
from yapily.models.bulk_payment_authorisation_request import BulkPaymentAuthorisationRequest
from yapily.models.bulk_payment_embedded_authorisation_request import BulkPaymentEmbeddedAuthorisationRequest
from yapily.models.embedded_account_authorisation_request import EmbeddedAccountAuthorisationRequest
from yapily.models.payment_authorisation_request import PaymentAuthorisationRequest
from yapily.models.payment_embedded_authorisation_request import PaymentEmbeddedAuthorisationRequest
from yapily.models.payment_pre_authorisation_request import PaymentPreAuthorisationRequest
from yapily.models.pre_authorisation_request import PreAuthorisationRequest

from yapily.api_client import ApiClient
from yapily.api_response import ApiResponse
from yapily.exceptions import (  # noqa: F401
    ApiTypeError,
    ApiValueError
)


class AuthorisationsApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client

    @overload
    async def create_bulk_payment_authorisation(self, bulk_payment_authorisation_request : BulkPaymentAuthorisationRequest, psu_id : Annotated[Optional[StrictStr], Field(description="__Conditional__. Represents the user's login ID for the `Institution` to a personal account. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required.")] = None, psu_corporate_id : Annotated[Optional[StrictStr], Field(description="__Conditional__. Represents the user's login ID for the `Institution` to a business account. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required.")] = None, psu_ip_address : Annotated[Optional[StrictStr], Field(description="__Conditional__. The IP address of the PSU. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required.")] = None, raw : Annotated[Optional[StrictBool], Field(description="__Optional__. Used to obtain the raw request and response to and from the <code>Institution</code>.")] = None, **kwargs) -> ApiResponseOfPaymentAuthorisationRequestResponse:  # noqa: E501
        ...

    @overload
    def create_bulk_payment_authorisation(self, bulk_payment_authorisation_request : BulkPaymentAuthorisationRequest, psu_id : Annotated[Optional[StrictStr], Field(description="__Conditional__. Represents the user's login ID for the `Institution` to a personal account. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required.")] = None, psu_corporate_id : Annotated[Optional[StrictStr], Field(description="__Conditional__. Represents the user's login ID for the `Institution` to a business account. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required.")] = None, psu_ip_address : Annotated[Optional[StrictStr], Field(description="__Conditional__. The IP address of the PSU. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required.")] = None, raw : Annotated[Optional[StrictBool], Field(description="__Optional__. Used to obtain the raw request and response to and from the <code>Institution</code>.")] = None, async_req: Optional[bool]=True, **kwargs) -> ApiResponseOfPaymentAuthorisationRequestResponse:  # noqa: E501
        ...

    @validate_arguments
    def create_bulk_payment_authorisation(self, bulk_payment_authorisation_request : BulkPaymentAuthorisationRequest, psu_id : Annotated[Optional[StrictStr], Field(description="__Conditional__. Represents the user's login ID for the `Institution` to a personal account. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required.")] = None, psu_corporate_id : Annotated[Optional[StrictStr], Field(description="__Conditional__. Represents the user's login ID for the `Institution` to a business account. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required.")] = None, psu_ip_address : Annotated[Optional[StrictStr], Field(description="__Conditional__. The IP address of the PSU. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required.")] = None, raw : Annotated[Optional[StrictBool], Field(description="__Optional__. Used to obtain the raw request and response to and from the <code>Institution</code>.")] = None, async_req: Optional[bool]=None, **kwargs) -> Union[ApiResponseOfPaymentAuthorisationRequestResponse, Awaitable[ApiResponseOfPaymentAuthorisationRequestResponse]]:  # noqa: E501
        """Create Bulk Payment Authorisation  # noqa: E501

        Used to initiate the authorisation process and direct users to the login screen of their financial Institution in order to give their consent for a bulk payment. See [Bulk Payments](https://docs.yapily.com/pages/key-concepts/payments/payment-execution/bulk-payments/) for more information. <br><br>See [Redirect Payment Flows](https://docs.yapily.com/pages/key-concepts/payments/payment-authorisation/redirect-payment-flows/) for more information about this flow.<br><br>Feature: `INITIATE_BULK_PAYMENT`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_bulk_payment_authorisation(bulk_payment_authorisation_request, psu_id, psu_corporate_id, psu_ip_address, raw, async_req=True)
        >>> result = thread.get()

        :param bulk_payment_authorisation_request: (required)
        :type bulk_payment_authorisation_request: BulkPaymentAuthorisationRequest
        :param psu_id: __Conditional__. Represents the user's login ID for the `Institution` to a personal account. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required.
        :type psu_id: str
        :param psu_corporate_id: __Conditional__. Represents the user's login ID for the `Institution` to a business account. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required.
        :type psu_corporate_id: str
        :param psu_ip_address: __Conditional__. The IP address of the PSU. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required.
        :type psu_ip_address: str
        :param raw: __Optional__. Used to obtain the raw request and response to and from the <code>Institution</code>.
        :type raw: bool
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ApiResponseOfPaymentAuthorisationRequestResponse
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the create_bulk_payment_authorisation_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        if async_req is not None:
            kwargs['async_req'] = async_req
        return self.create_bulk_payment_authorisation_with_http_info(bulk_payment_authorisation_request, psu_id, psu_corporate_id, psu_ip_address, raw, **kwargs)  # noqa: E501

    @validate_arguments
    def create_bulk_payment_authorisation_with_http_info(self, bulk_payment_authorisation_request : BulkPaymentAuthorisationRequest, psu_id : Annotated[Optional[StrictStr], Field(description="__Conditional__. Represents the user's login ID for the `Institution` to a personal account. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required.")] = None, psu_corporate_id : Annotated[Optional[StrictStr], Field(description="__Conditional__. Represents the user's login ID for the `Institution` to a business account. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required.")] = None, psu_ip_address : Annotated[Optional[StrictStr], Field(description="__Conditional__. The IP address of the PSU. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required.")] = None, raw : Annotated[Optional[StrictBool], Field(description="__Optional__. Used to obtain the raw request and response to and from the <code>Institution</code>.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Create Bulk Payment Authorisation  # noqa: E501

        Used to initiate the authorisation process and direct users to the login screen of their financial Institution in order to give their consent for a bulk payment. See [Bulk Payments](https://docs.yapily.com/pages/key-concepts/payments/payment-execution/bulk-payments/) for more information. <br><br>See [Redirect Payment Flows](https://docs.yapily.com/pages/key-concepts/payments/payment-authorisation/redirect-payment-flows/) for more information about this flow.<br><br>Feature: `INITIATE_BULK_PAYMENT`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_bulk_payment_authorisation_with_http_info(bulk_payment_authorisation_request, psu_id, psu_corporate_id, psu_ip_address, raw, async_req=True)
        >>> result = thread.get()

        :param bulk_payment_authorisation_request: (required)
        :type bulk_payment_authorisation_request: BulkPaymentAuthorisationRequest
        :param psu_id: __Conditional__. Represents the user's login ID for the `Institution` to a personal account. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required.
        :type psu_id: str
        :param psu_corporate_id: __Conditional__. Represents the user's login ID for the `Institution` to a business account. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required.
        :type psu_corporate_id: str
        :param psu_ip_address: __Conditional__. The IP address of the PSU. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required.
        :type psu_ip_address: str
        :param raw: __Optional__. Used to obtain the raw request and response to and from the <code>Institution</code>.
        :type raw: bool
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(ApiResponseOfPaymentAuthorisationRequestResponse, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'bulk_payment_authorisation_request',
            'psu_id',
            'psu_corporate_id',
            'psu_ip_address',
            'raw'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_bulk_payment_authorisation" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get('raw') is not None:  # noqa: E501
            _query_params.append(('raw', _params['raw']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['psu_id']:
            _header_params['psu-id'] = _params['psu_id']

        if _params['psu_corporate_id']:
            _header_params['psu-corporate-id'] = _params['psu_corporate_id']

        if _params['psu_ip_address']:
            _header_params['psu-ip-address'] = _params['psu_ip_address']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['bulk_payment_authorisation_request'] is not None:
            _body_params = _params['bulk_payment_authorisation_request']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;charset=UTF-8'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json;charset=UTF-8']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['basicAuth']  # noqa: E501

        _response_types_map = {
            '201': "ApiResponseOfPaymentAuthorisationRequestResponse",
        }

        return self.api_client.call_api(
            '/bulk-payment-auth-requests', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @overload
    async def create_embedded_bulk_payment_authorisation(self, bulk_payment_embedded_authorisation_request : BulkPaymentEmbeddedAuthorisationRequest, psu_id : Annotated[Optional[StrictStr], Field(description="__Conditional__. Represents the user's login ID for the `Institution` to a personal account. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required.")] = None, psu_corporate_id : Annotated[Optional[StrictStr], Field(description="__Conditional__. Represents the user's login ID for the `Institution` to a business account. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required.")] = None, psu_ip_address : Annotated[Optional[StrictStr], Field(description="__Conditional__. The IP address of the PSU. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required.")] = None, raw : Annotated[Optional[StrictBool], Field(description="__Optional__. Used to obtain the raw request and response to and from the <code>Institution</code>.")] = None, **kwargs) -> ApiResponseOfPaymentEmbeddedAuthorisationRequestResponse:  # noqa: E501
        ...

    @overload
    def create_embedded_bulk_payment_authorisation(self, bulk_payment_embedded_authorisation_request : BulkPaymentEmbeddedAuthorisationRequest, psu_id : Annotated[Optional[StrictStr], Field(description="__Conditional__. Represents the user's login ID for the `Institution` to a personal account. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required.")] = None, psu_corporate_id : Annotated[Optional[StrictStr], Field(description="__Conditional__. Represents the user's login ID for the `Institution` to a business account. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required.")] = None, psu_ip_address : Annotated[Optional[StrictStr], Field(description="__Conditional__. The IP address of the PSU. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required.")] = None, raw : Annotated[Optional[StrictBool], Field(description="__Optional__. Used to obtain the raw request and response to and from the <code>Institution</code>.")] = None, async_req: Optional[bool]=True, **kwargs) -> ApiResponseOfPaymentEmbeddedAuthorisationRequestResponse:  # noqa: E501
        ...

    @validate_arguments
    def create_embedded_bulk_payment_authorisation(self, bulk_payment_embedded_authorisation_request : BulkPaymentEmbeddedAuthorisationRequest, psu_id : Annotated[Optional[StrictStr], Field(description="__Conditional__. Represents the user's login ID for the `Institution` to a personal account. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required.")] = None, psu_corporate_id : Annotated[Optional[StrictStr], Field(description="__Conditional__. Represents the user's login ID for the `Institution` to a business account. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required.")] = None, psu_ip_address : Annotated[Optional[StrictStr], Field(description="__Conditional__. The IP address of the PSU. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required.")] = None, raw : Annotated[Optional[StrictBool], Field(description="__Optional__. Used to obtain the raw request and response to and from the <code>Institution</code>.")] = None, async_req: Optional[bool]=None, **kwargs) -> Union[ApiResponseOfPaymentEmbeddedAuthorisationRequestResponse, Awaitable[ApiResponseOfPaymentEmbeddedAuthorisationRequestResponse]]:  # noqa: E501
        """Create Embedded Bulk Payment Authorisation  # noqa: E501

        Used to initiate the embedded authorisation process for an `Institution` that contains the `INITIATE_EMBEDDED_BULK_PAYMENT` feature in order to obtain the the user's authorisation for a bulk payment. See [Bulk Payments](https://docs.yapily.com/pages/key-concepts/payments/payment-execution/bulk-payments/) for more information. <br><br> See [Embedded Payment Flows](https://docs.yapily.com/pages/key-concepts/payments/payment-authorisation/embedded-payment-flows/) for more information about this flow.<br><br>Feature: `INITIATE_EMBEDDED_BULK_PAYMENT`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_embedded_bulk_payment_authorisation(bulk_payment_embedded_authorisation_request, psu_id, psu_corporate_id, psu_ip_address, raw, async_req=True)
        >>> result = thread.get()

        :param bulk_payment_embedded_authorisation_request: (required)
        :type bulk_payment_embedded_authorisation_request: BulkPaymentEmbeddedAuthorisationRequest
        :param psu_id: __Conditional__. Represents the user's login ID for the `Institution` to a personal account. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required.
        :type psu_id: str
        :param psu_corporate_id: __Conditional__. Represents the user's login ID for the `Institution` to a business account. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required.
        :type psu_corporate_id: str
        :param psu_ip_address: __Conditional__. The IP address of the PSU. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required.
        :type psu_ip_address: str
        :param raw: __Optional__. Used to obtain the raw request and response to and from the <code>Institution</code>.
        :type raw: bool
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ApiResponseOfPaymentEmbeddedAuthorisationRequestResponse
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the create_embedded_bulk_payment_authorisation_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        if async_req is not None:
            kwargs['async_req'] = async_req
        return self.create_embedded_bulk_payment_authorisation_with_http_info(bulk_payment_embedded_authorisation_request, psu_id, psu_corporate_id, psu_ip_address, raw, **kwargs)  # noqa: E501

    @validate_arguments
    def create_embedded_bulk_payment_authorisation_with_http_info(self, bulk_payment_embedded_authorisation_request : BulkPaymentEmbeddedAuthorisationRequest, psu_id : Annotated[Optional[StrictStr], Field(description="__Conditional__. Represents the user's login ID for the `Institution` to a personal account. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required.")] = None, psu_corporate_id : Annotated[Optional[StrictStr], Field(description="__Conditional__. Represents the user's login ID for the `Institution` to a business account. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required.")] = None, psu_ip_address : Annotated[Optional[StrictStr], Field(description="__Conditional__. The IP address of the PSU. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required.")] = None, raw : Annotated[Optional[StrictBool], Field(description="__Optional__. Used to obtain the raw request and response to and from the <code>Institution</code>.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Create Embedded Bulk Payment Authorisation  # noqa: E501

        Used to initiate the embedded authorisation process for an `Institution` that contains the `INITIATE_EMBEDDED_BULK_PAYMENT` feature in order to obtain the the user's authorisation for a bulk payment. See [Bulk Payments](https://docs.yapily.com/pages/key-concepts/payments/payment-execution/bulk-payments/) for more information. <br><br> See [Embedded Payment Flows](https://docs.yapily.com/pages/key-concepts/payments/payment-authorisation/embedded-payment-flows/) for more information about this flow.<br><br>Feature: `INITIATE_EMBEDDED_BULK_PAYMENT`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_embedded_bulk_payment_authorisation_with_http_info(bulk_payment_embedded_authorisation_request, psu_id, psu_corporate_id, psu_ip_address, raw, async_req=True)
        >>> result = thread.get()

        :param bulk_payment_embedded_authorisation_request: (required)
        :type bulk_payment_embedded_authorisation_request: BulkPaymentEmbeddedAuthorisationRequest
        :param psu_id: __Conditional__. Represents the user's login ID for the `Institution` to a personal account. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required.
        :type psu_id: str
        :param psu_corporate_id: __Conditional__. Represents the user's login ID for the `Institution` to a business account. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required.
        :type psu_corporate_id: str
        :param psu_ip_address: __Conditional__. The IP address of the PSU. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required.
        :type psu_ip_address: str
        :param raw: __Optional__. Used to obtain the raw request and response to and from the <code>Institution</code>.
        :type raw: bool
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(ApiResponseOfPaymentEmbeddedAuthorisationRequestResponse, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'bulk_payment_embedded_authorisation_request',
            'psu_id',
            'psu_corporate_id',
            'psu_ip_address',
            'raw'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_embedded_bulk_payment_authorisation" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get('raw') is not None:  # noqa: E501
            _query_params.append(('raw', _params['raw']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['psu_id']:
            _header_params['psu-id'] = _params['psu_id']

        if _params['psu_corporate_id']:
            _header_params['psu-corporate-id'] = _params['psu_corporate_id']

        if _params['psu_ip_address']:
            _header_params['psu-ip-address'] = _params['psu_ip_address']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['bulk_payment_embedded_authorisation_request'] is not None:
            _body_params = _params['bulk_payment_embedded_authorisation_request']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;charset=UTF-8'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json;charset=UTF-8']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['basicAuth']  # noqa: E501

        _response_types_map = {
            '201': "ApiResponseOfPaymentEmbeddedAuthorisationRequestResponse",
        }

        return self.api_client.call_api(
            '/embedded-bulk-payment-auth-requests', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @overload
    async def create_embedded_payment_authorisation(self, payment_embedded_authorisation_request : PaymentEmbeddedAuthorisationRequest, psu_id : Annotated[Optional[StrictStr], Field(description="__Conditional__. Represents the user's login ID for the `Institution` to a personal account. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required.")] = None, psu_corporate_id : Annotated[Optional[StrictStr], Field(description="__Conditional__. Represents the user's login ID for the `Institution` to a business account. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required.")] = None, psu_ip_address : Annotated[Optional[StrictStr], Field(description="__Conditional__. The IP address of the PSU. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required.")] = None, raw : Annotated[Optional[StrictBool], Field(description="__Optional__. Used to obtain the raw request and response to and from the <code>Institution</code>.")] = None, **kwargs) -> ApiResponseOfPaymentEmbeddedAuthorisationRequestResponse:  # noqa: E501
        ...

    @overload
    def create_embedded_payment_authorisation(self, payment_embedded_authorisation_request : PaymentEmbeddedAuthorisationRequest, psu_id : Annotated[Optional[StrictStr], Field(description="__Conditional__. Represents the user's login ID for the `Institution` to a personal account. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required.")] = None, psu_corporate_id : Annotated[Optional[StrictStr], Field(description="__Conditional__. Represents the user's login ID for the `Institution` to a business account. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required.")] = None, psu_ip_address : Annotated[Optional[StrictStr], Field(description="__Conditional__. The IP address of the PSU. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required.")] = None, raw : Annotated[Optional[StrictBool], Field(description="__Optional__. Used to obtain the raw request and response to and from the <code>Institution</code>.")] = None, async_req: Optional[bool]=True, **kwargs) -> ApiResponseOfPaymentEmbeddedAuthorisationRequestResponse:  # noqa: E501
        ...

    @validate_arguments
    def create_embedded_payment_authorisation(self, payment_embedded_authorisation_request : PaymentEmbeddedAuthorisationRequest, psu_id : Annotated[Optional[StrictStr], Field(description="__Conditional__. Represents the user's login ID for the `Institution` to a personal account. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required.")] = None, psu_corporate_id : Annotated[Optional[StrictStr], Field(description="__Conditional__. Represents the user's login ID for the `Institution` to a business account. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required.")] = None, psu_ip_address : Annotated[Optional[StrictStr], Field(description="__Conditional__. The IP address of the PSU. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required.")] = None, raw : Annotated[Optional[StrictBool], Field(description="__Optional__. Used to obtain the raw request and response to and from the <code>Institution</code>.")] = None, async_req: Optional[bool]=None, **kwargs) -> Union[ApiResponseOfPaymentEmbeddedAuthorisationRequestResponse, Awaitable[ApiResponseOfPaymentEmbeddedAuthorisationRequestResponse]]:  # noqa: E501
        """Create Embedded Payment Authorisation  # noqa: E501

        Used to initiate the embedded authorisation process for an `Institution` that contains the `INITIATE_EMBEDDED_DOMESTIC_SINGLE_PAYMENT` feature in order to obtain the the user's authorisation for a payment.<br><br> See [Embedded Payment Flows](https://docs.yapily.com/pages/key-concepts/payments/payment-authorisation/embedded-payment-flows/) for more information about this flow.<br><br>Feature: `INITIATE_EMBEDDED_DOMESTIC_SINGLE_PAYMENT`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_embedded_payment_authorisation(payment_embedded_authorisation_request, psu_id, psu_corporate_id, psu_ip_address, raw, async_req=True)
        >>> result = thread.get()

        :param payment_embedded_authorisation_request: (required)
        :type payment_embedded_authorisation_request: PaymentEmbeddedAuthorisationRequest
        :param psu_id: __Conditional__. Represents the user's login ID for the `Institution` to a personal account. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required.
        :type psu_id: str
        :param psu_corporate_id: __Conditional__. Represents the user's login ID for the `Institution` to a business account. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required.
        :type psu_corporate_id: str
        :param psu_ip_address: __Conditional__. The IP address of the PSU. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required.
        :type psu_ip_address: str
        :param raw: __Optional__. Used to obtain the raw request and response to and from the <code>Institution</code>.
        :type raw: bool
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ApiResponseOfPaymentEmbeddedAuthorisationRequestResponse
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the create_embedded_payment_authorisation_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        if async_req is not None:
            kwargs['async_req'] = async_req
        return self.create_embedded_payment_authorisation_with_http_info(payment_embedded_authorisation_request, psu_id, psu_corporate_id, psu_ip_address, raw, **kwargs)  # noqa: E501

    @validate_arguments
    def create_embedded_payment_authorisation_with_http_info(self, payment_embedded_authorisation_request : PaymentEmbeddedAuthorisationRequest, psu_id : Annotated[Optional[StrictStr], Field(description="__Conditional__. Represents the user's login ID for the `Institution` to a personal account. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required.")] = None, psu_corporate_id : Annotated[Optional[StrictStr], Field(description="__Conditional__. Represents the user's login ID for the `Institution` to a business account. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required.")] = None, psu_ip_address : Annotated[Optional[StrictStr], Field(description="__Conditional__. The IP address of the PSU. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required.")] = None, raw : Annotated[Optional[StrictBool], Field(description="__Optional__. Used to obtain the raw request and response to and from the <code>Institution</code>.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Create Embedded Payment Authorisation  # noqa: E501

        Used to initiate the embedded authorisation process for an `Institution` that contains the `INITIATE_EMBEDDED_DOMESTIC_SINGLE_PAYMENT` feature in order to obtain the the user's authorisation for a payment.<br><br> See [Embedded Payment Flows](https://docs.yapily.com/pages/key-concepts/payments/payment-authorisation/embedded-payment-flows/) for more information about this flow.<br><br>Feature: `INITIATE_EMBEDDED_DOMESTIC_SINGLE_PAYMENT`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_embedded_payment_authorisation_with_http_info(payment_embedded_authorisation_request, psu_id, psu_corporate_id, psu_ip_address, raw, async_req=True)
        >>> result = thread.get()

        :param payment_embedded_authorisation_request: (required)
        :type payment_embedded_authorisation_request: PaymentEmbeddedAuthorisationRequest
        :param psu_id: __Conditional__. Represents the user's login ID for the `Institution` to a personal account. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required.
        :type psu_id: str
        :param psu_corporate_id: __Conditional__. Represents the user's login ID for the `Institution` to a business account. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required.
        :type psu_corporate_id: str
        :param psu_ip_address: __Conditional__. The IP address of the PSU. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required.
        :type psu_ip_address: str
        :param raw: __Optional__. Used to obtain the raw request and response to and from the <code>Institution</code>.
        :type raw: bool
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(ApiResponseOfPaymentEmbeddedAuthorisationRequestResponse, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'payment_embedded_authorisation_request',
            'psu_id',
            'psu_corporate_id',
            'psu_ip_address',
            'raw'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_embedded_payment_authorisation" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get('raw') is not None:  # noqa: E501
            _query_params.append(('raw', _params['raw']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['psu_id']:
            _header_params['psu-id'] = _params['psu_id']

        if _params['psu_corporate_id']:
            _header_params['psu-corporate-id'] = _params['psu_corporate_id']

        if _params['psu_ip_address']:
            _header_params['psu-ip-address'] = _params['psu_ip_address']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['payment_embedded_authorisation_request'] is not None:
            _body_params = _params['payment_embedded_authorisation_request']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;charset=UTF-8'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json;charset=UTF-8']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['basicAuth']  # noqa: E501

        _response_types_map = {
            '201': "ApiResponseOfPaymentEmbeddedAuthorisationRequestResponse",
        }

        return self.api_client.call_api(
            '/embedded-payment-auth-requests', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @overload
    async def create_payment_authorisation(self, payment_authorisation_request : PaymentAuthorisationRequest, psu_id : Annotated[Optional[StrictStr], Field(description="__Conditional__. Represents the user's login ID for the `Institution` to a personal account. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required.")] = None, psu_corporate_id : Annotated[Optional[StrictStr], Field(description="__Conditional__. Represents the user's login ID for the `Institution` to a business account. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required.")] = None, psu_ip_address : Annotated[Optional[StrictStr], Field(description="__Conditional__. The IP address of the PSU. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required.")] = None, raw : Annotated[Optional[StrictBool], Field(description="__Optional__. Used to obtain the raw request and response to and from the <code>Institution</code>.")] = None, **kwargs) -> ApiResponseOfPaymentAuthorisationRequestResponse:  # noqa: E501
        ...

    @overload
    def create_payment_authorisation(self, payment_authorisation_request : PaymentAuthorisationRequest, psu_id : Annotated[Optional[StrictStr], Field(description="__Conditional__. Represents the user's login ID for the `Institution` to a personal account. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required.")] = None, psu_corporate_id : Annotated[Optional[StrictStr], Field(description="__Conditional__. Represents the user's login ID for the `Institution` to a business account. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required.")] = None, psu_ip_address : Annotated[Optional[StrictStr], Field(description="__Conditional__. The IP address of the PSU. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required.")] = None, raw : Annotated[Optional[StrictBool], Field(description="__Optional__. Used to obtain the raw request and response to and from the <code>Institution</code>.")] = None, async_req: Optional[bool]=True, **kwargs) -> ApiResponseOfPaymentAuthorisationRequestResponse:  # noqa: E501
        ...

    @validate_arguments
    def create_payment_authorisation(self, payment_authorisation_request : PaymentAuthorisationRequest, psu_id : Annotated[Optional[StrictStr], Field(description="__Conditional__. Represents the user's login ID for the `Institution` to a personal account. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required.")] = None, psu_corporate_id : Annotated[Optional[StrictStr], Field(description="__Conditional__. Represents the user's login ID for the `Institution` to a business account. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required.")] = None, psu_ip_address : Annotated[Optional[StrictStr], Field(description="__Conditional__. The IP address of the PSU. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required.")] = None, raw : Annotated[Optional[StrictBool], Field(description="__Optional__. Used to obtain the raw request and response to and from the <code>Institution</code>.")] = None, async_req: Optional[bool]=None, **kwargs) -> Union[ApiResponseOfPaymentAuthorisationRequestResponse, Awaitable[ApiResponseOfPaymentAuthorisationRequestResponse]]:  # noqa: E501
        """Create Payment Authorisation  # noqa: E501

        Used to initiate the authorisation process and direct users to the login screen of their financial Institution in order to give their consent for a payment. This endpoint is used to initiate all the different payment listed below. Based on the type of payment you wish to make, you may be required to provide specific properties in [PaymentRequest](https://docs.yapily.com/api/reference/#operation/createPaymentAuthorisation!path=paymentRequest&t=request). First make sure that the payment feature you wish to execute is supported by the bank by checking the features array in [GET Institution](https://docs.yapily.com/api/reference/#operation/getInstitution). <br><br>See [Redirect Payment Flows](https://docs.yapily.com/pages/key-concepts/payments/payment-authorisation/redirect-payment-flows/) for more information about this flow.<br><br>Features:<ul><li>`INITIATE_DOMESTIC_PERIODIC_PAYMENT`</li><li>`INITIATE_DOMESTIC_SCHEDULED_PAYMENT`</li><li>`INITIATE_DOMESTIC_SINGLE_INSTANT_PAYMENT`</li><li>`INITIATE_DOMESTIC_SINGLE_PAYMENT`</li><li>`INITIATE_INTERNATIONAL_PERIODIC_PAYMENT`</li><li>`INITIATE_INTERNATIONAL_SCHEDULED_PAYMENT`</li><li>`INITIATE_INTERNATIONAL_SINGLE_PAYMENT`</li></ul>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_payment_authorisation(payment_authorisation_request, psu_id, psu_corporate_id, psu_ip_address, raw, async_req=True)
        >>> result = thread.get()

        :param payment_authorisation_request: (required)
        :type payment_authorisation_request: PaymentAuthorisationRequest
        :param psu_id: __Conditional__. Represents the user's login ID for the `Institution` to a personal account. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required.
        :type psu_id: str
        :param psu_corporate_id: __Conditional__. Represents the user's login ID for the `Institution` to a business account. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required.
        :type psu_corporate_id: str
        :param psu_ip_address: __Conditional__. The IP address of the PSU. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required.
        :type psu_ip_address: str
        :param raw: __Optional__. Used to obtain the raw request and response to and from the <code>Institution</code>.
        :type raw: bool
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ApiResponseOfPaymentAuthorisationRequestResponse
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the create_payment_authorisation_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        if async_req is not None:
            kwargs['async_req'] = async_req
        return self.create_payment_authorisation_with_http_info(payment_authorisation_request, psu_id, psu_corporate_id, psu_ip_address, raw, **kwargs)  # noqa: E501

    @validate_arguments
    def create_payment_authorisation_with_http_info(self, payment_authorisation_request : PaymentAuthorisationRequest, psu_id : Annotated[Optional[StrictStr], Field(description="__Conditional__. Represents the user's login ID for the `Institution` to a personal account. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required.")] = None, psu_corporate_id : Annotated[Optional[StrictStr], Field(description="__Conditional__. Represents the user's login ID for the `Institution` to a business account. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required.")] = None, psu_ip_address : Annotated[Optional[StrictStr], Field(description="__Conditional__. The IP address of the PSU. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required.")] = None, raw : Annotated[Optional[StrictBool], Field(description="__Optional__. Used to obtain the raw request and response to and from the <code>Institution</code>.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Create Payment Authorisation  # noqa: E501

        Used to initiate the authorisation process and direct users to the login screen of their financial Institution in order to give their consent for a payment. This endpoint is used to initiate all the different payment listed below. Based on the type of payment you wish to make, you may be required to provide specific properties in [PaymentRequest](https://docs.yapily.com/api/reference/#operation/createPaymentAuthorisation!path=paymentRequest&t=request). First make sure that the payment feature you wish to execute is supported by the bank by checking the features array in [GET Institution](https://docs.yapily.com/api/reference/#operation/getInstitution). <br><br>See [Redirect Payment Flows](https://docs.yapily.com/pages/key-concepts/payments/payment-authorisation/redirect-payment-flows/) for more information about this flow.<br><br>Features:<ul><li>`INITIATE_DOMESTIC_PERIODIC_PAYMENT`</li><li>`INITIATE_DOMESTIC_SCHEDULED_PAYMENT`</li><li>`INITIATE_DOMESTIC_SINGLE_INSTANT_PAYMENT`</li><li>`INITIATE_DOMESTIC_SINGLE_PAYMENT`</li><li>`INITIATE_INTERNATIONAL_PERIODIC_PAYMENT`</li><li>`INITIATE_INTERNATIONAL_SCHEDULED_PAYMENT`</li><li>`INITIATE_INTERNATIONAL_SINGLE_PAYMENT`</li></ul>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_payment_authorisation_with_http_info(payment_authorisation_request, psu_id, psu_corporate_id, psu_ip_address, raw, async_req=True)
        >>> result = thread.get()

        :param payment_authorisation_request: (required)
        :type payment_authorisation_request: PaymentAuthorisationRequest
        :param psu_id: __Conditional__. Represents the user's login ID for the `Institution` to a personal account. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required.
        :type psu_id: str
        :param psu_corporate_id: __Conditional__. Represents the user's login ID for the `Institution` to a business account. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required.
        :type psu_corporate_id: str
        :param psu_ip_address: __Conditional__. The IP address of the PSU. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required.
        :type psu_ip_address: str
        :param raw: __Optional__. Used to obtain the raw request and response to and from the <code>Institution</code>.
        :type raw: bool
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(ApiResponseOfPaymentAuthorisationRequestResponse, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'payment_authorisation_request',
            'psu_id',
            'psu_corporate_id',
            'psu_ip_address',
            'raw'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_payment_authorisation" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get('raw') is not None:  # noqa: E501
            _query_params.append(('raw', _params['raw']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['psu_id']:
            _header_params['psu-id'] = _params['psu_id']

        if _params['psu_corporate_id']:
            _header_params['psu-corporate-id'] = _params['psu_corporate_id']

        if _params['psu_ip_address']:
            _header_params['psu-ip-address'] = _params['psu_ip_address']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['payment_authorisation_request'] is not None:
            _body_params = _params['payment_authorisation_request']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;charset=UTF-8'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json;charset=UTF-8']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['basicAuth']  # noqa: E501

        _response_types_map = {
            '201': "ApiResponseOfPaymentAuthorisationRequestResponse",
        }

        return self.api_client.call_api(
            '/payment-auth-requests', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @overload
    async def create_payment_pre_authorisation_request(self, payment_pre_authorisation_request : PaymentPreAuthorisationRequest, raw : Annotated[Optional[StrictBool], Field(description="__Optional__. Used to obtain the raw request and response to and from the <code>Institution</code>.")] = None, **kwargs) -> ApiResponseOfAccountAuthorisationResponse:  # noqa: E501
        ...

    @overload
    def create_payment_pre_authorisation_request(self, payment_pre_authorisation_request : PaymentPreAuthorisationRequest, raw : Annotated[Optional[StrictBool], Field(description="__Optional__. Used to obtain the raw request and response to and from the <code>Institution</code>.")] = None, async_req: Optional[bool]=True, **kwargs) -> ApiResponseOfAccountAuthorisationResponse:  # noqa: E501
        ...

    @validate_arguments
    def create_payment_pre_authorisation_request(self, payment_pre_authorisation_request : PaymentPreAuthorisationRequest, raw : Annotated[Optional[StrictBool], Field(description="__Optional__. Used to obtain the raw request and response to and from the <code>Institution</code>.")] = None, async_req: Optional[bool]=None, **kwargs) -> Union[ApiResponseOfAccountAuthorisationResponse, Awaitable[ApiResponseOfAccountAuthorisationResponse]]:  # noqa: E501
        """Create Payment Pre-authorisation  # noqa: E501

        Used to initiate the pre-authorisation process for payments for CbiGlobe `Institution` that contains the `INITIATE_ONETIME_PRE_AUTHORISATION_PAYMENTS` feature to authenticate the user. <br><br>Feature: `INITIATE_ONETIME_PRE_AUTHORISATION_PAYMENTS`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_payment_pre_authorisation_request(payment_pre_authorisation_request, raw, async_req=True)
        >>> result = thread.get()

        :param payment_pre_authorisation_request: (required)
        :type payment_pre_authorisation_request: PaymentPreAuthorisationRequest
        :param raw: __Optional__. Used to obtain the raw request and response to and from the <code>Institution</code>.
        :type raw: bool
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ApiResponseOfAccountAuthorisationResponse
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the create_payment_pre_authorisation_request_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        if async_req is not None:
            kwargs['async_req'] = async_req
        return self.create_payment_pre_authorisation_request_with_http_info(payment_pre_authorisation_request, raw, **kwargs)  # noqa: E501

    @validate_arguments
    def create_payment_pre_authorisation_request_with_http_info(self, payment_pre_authorisation_request : PaymentPreAuthorisationRequest, raw : Annotated[Optional[StrictBool], Field(description="__Optional__. Used to obtain the raw request and response to and from the <code>Institution</code>.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Create Payment Pre-authorisation  # noqa: E501

        Used to initiate the pre-authorisation process for payments for CbiGlobe `Institution` that contains the `INITIATE_ONETIME_PRE_AUTHORISATION_PAYMENTS` feature to authenticate the user. <br><br>Feature: `INITIATE_ONETIME_PRE_AUTHORISATION_PAYMENTS`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_payment_pre_authorisation_request_with_http_info(payment_pre_authorisation_request, raw, async_req=True)
        >>> result = thread.get()

        :param payment_pre_authorisation_request: (required)
        :type payment_pre_authorisation_request: PaymentPreAuthorisationRequest
        :param raw: __Optional__. Used to obtain the raw request and response to and from the <code>Institution</code>.
        :type raw: bool
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(ApiResponseOfAccountAuthorisationResponse, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'payment_pre_authorisation_request',
            'raw'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_payment_pre_authorisation_request" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get('raw') is not None:  # noqa: E501
            _query_params.append(('raw', _params['raw']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['payment_pre_authorisation_request'] is not None:
            _body_params = _params['payment_pre_authorisation_request']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;charset=UTF-8'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json;charset=UTF-8']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['basicAuth']  # noqa: E501

        _response_types_map = {
            '201': "ApiResponseOfAccountAuthorisationResponse",
        }

        return self.api_client.call_api(
            '/payment-pre-auth-requests', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @overload
    async def create_pre_authorisation_request(self, pre_authorisation_request : PreAuthorisationRequest, raw : Annotated[Optional[StrictBool], Field(description="__Optional__. Used to obtain the raw request and response to and from the <code>Institution</code>.")] = None, **kwargs) -> ApiResponseOfAccountAuthorisationResponse:  # noqa: E501
        ...

    @overload
    def create_pre_authorisation_request(self, pre_authorisation_request : PreAuthorisationRequest, raw : Annotated[Optional[StrictBool], Field(description="__Optional__. Used to obtain the raw request and response to and from the <code>Institution</code>.")] = None, async_req: Optional[bool]=True, **kwargs) -> ApiResponseOfAccountAuthorisationResponse:  # noqa: E501
        ...

    @validate_arguments
    def create_pre_authorisation_request(self, pre_authorisation_request : PreAuthorisationRequest, raw : Annotated[Optional[StrictBool], Field(description="__Optional__. Used to obtain the raw request and response to and from the <code>Institution</code>.")] = None, async_req: Optional[bool]=None, **kwargs) -> Union[ApiResponseOfAccountAuthorisationResponse, Awaitable[ApiResponseOfAccountAuthorisationResponse]]:  # noqa: E501
        """Create Pre-authorisation  # noqa: E501

        Used to initiate the pre-authorisation process for any `Institution` that contains the `INITIATE_PRE_AUTHORISATION` feature to authenticate the user. <br><br>Feature: `INITIATE_PRE_AUTHORISATION`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_pre_authorisation_request(pre_authorisation_request, raw, async_req=True)
        >>> result = thread.get()

        :param pre_authorisation_request: (required)
        :type pre_authorisation_request: PreAuthorisationRequest
        :param raw: __Optional__. Used to obtain the raw request and response to and from the <code>Institution</code>.
        :type raw: bool
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ApiResponseOfAccountAuthorisationResponse
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the create_pre_authorisation_request_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        if async_req is not None:
            kwargs['async_req'] = async_req
        return self.create_pre_authorisation_request_with_http_info(pre_authorisation_request, raw, **kwargs)  # noqa: E501

    @validate_arguments
    def create_pre_authorisation_request_with_http_info(self, pre_authorisation_request : PreAuthorisationRequest, raw : Annotated[Optional[StrictBool], Field(description="__Optional__. Used to obtain the raw request and response to and from the <code>Institution</code>.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Create Pre-authorisation  # noqa: E501

        Used to initiate the pre-authorisation process for any `Institution` that contains the `INITIATE_PRE_AUTHORISATION` feature to authenticate the user. <br><br>Feature: `INITIATE_PRE_AUTHORISATION`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_pre_authorisation_request_with_http_info(pre_authorisation_request, raw, async_req=True)
        >>> result = thread.get()

        :param pre_authorisation_request: (required)
        :type pre_authorisation_request: PreAuthorisationRequest
        :param raw: __Optional__. Used to obtain the raw request and response to and from the <code>Institution</code>.
        :type raw: bool
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(ApiResponseOfAccountAuthorisationResponse, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'pre_authorisation_request',
            'raw'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_pre_authorisation_request" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get('raw') is not None:  # noqa: E501
            _query_params.append(('raw', _params['raw']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['pre_authorisation_request'] is not None:
            _body_params = _params['pre_authorisation_request']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;charset=UTF-8'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json;charset=UTF-8']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['basicAuth']  # noqa: E501

        _response_types_map = {
            '201': "ApiResponseOfAccountAuthorisationResponse",
        }

        return self.api_client.call_api(
            '/pre-auth-requests', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @overload
    async def initiate_account_request(self, account_authorisation_request : AccountAuthorisationRequest, psu_id : Annotated[Optional[StrictStr], Field(description="__Conditional__. Represents the user's login ID for the `Institution` to a personal account. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required.")] = None, psu_corporate_id : Annotated[Optional[StrictStr], Field(description="__Conditional__. Represents the user's login ID for the `Institution` to a business account. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required.")] = None, psu_ip_address : Annotated[Optional[StrictStr], Field(description="__Conditional__. The IP address of the PSU. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required.")] = None, raw : Annotated[Optional[StrictBool], Field(description="__Optional__. Used to obtain the raw request and response to and from the <code>Institution</code>.")] = None, **kwargs) -> ApiResponseOfAccountAuthorisationResponse:  # noqa: E501
        ...

    @overload
    def initiate_account_request(self, account_authorisation_request : AccountAuthorisationRequest, psu_id : Annotated[Optional[StrictStr], Field(description="__Conditional__. Represents the user's login ID for the `Institution` to a personal account. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required.")] = None, psu_corporate_id : Annotated[Optional[StrictStr], Field(description="__Conditional__. Represents the user's login ID for the `Institution` to a business account. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required.")] = None, psu_ip_address : Annotated[Optional[StrictStr], Field(description="__Conditional__. The IP address of the PSU. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required.")] = None, raw : Annotated[Optional[StrictBool], Field(description="__Optional__. Used to obtain the raw request and response to and from the <code>Institution</code>.")] = None, async_req: Optional[bool]=True, **kwargs) -> ApiResponseOfAccountAuthorisationResponse:  # noqa: E501
        ...

    @validate_arguments
    def initiate_account_request(self, account_authorisation_request : AccountAuthorisationRequest, psu_id : Annotated[Optional[StrictStr], Field(description="__Conditional__. Represents the user's login ID for the `Institution` to a personal account. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required.")] = None, psu_corporate_id : Annotated[Optional[StrictStr], Field(description="__Conditional__. Represents the user's login ID for the `Institution` to a business account. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required.")] = None, psu_ip_address : Annotated[Optional[StrictStr], Field(description="__Conditional__. The IP address of the PSU. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required.")] = None, raw : Annotated[Optional[StrictBool], Field(description="__Optional__. Used to obtain the raw request and response to and from the <code>Institution</code>.")] = None, async_req: Optional[bool]=None, **kwargs) -> Union[ApiResponseOfAccountAuthorisationResponse, Awaitable[ApiResponseOfAccountAuthorisationResponse]]:  # noqa: E501
        """Create Account Authorisation  # noqa: E501

        Used to initiate the authorisation process and direct users to the login screen of their financial institution in order to give consent to access account data.<br><br>See [Redirect Account Flows](https://docs.yapily.com/pages/key-concepts/account-data/account-authorisation/redirect-account-flows/) for more information about this flow.<br><br>Feature: `INITIATE_ACCOUNT_REQUEST`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.initiate_account_request(account_authorisation_request, psu_id, psu_corporate_id, psu_ip_address, raw, async_req=True)
        >>> result = thread.get()

        :param account_authorisation_request: (required)
        :type account_authorisation_request: AccountAuthorisationRequest
        :param psu_id: __Conditional__. Represents the user's login ID for the `Institution` to a personal account. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required.
        :type psu_id: str
        :param psu_corporate_id: __Conditional__. Represents the user's login ID for the `Institution` to a business account. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required.
        :type psu_corporate_id: str
        :param psu_ip_address: __Conditional__. The IP address of the PSU. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required.
        :type psu_ip_address: str
        :param raw: __Optional__. Used to obtain the raw request and response to and from the <code>Institution</code>.
        :type raw: bool
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ApiResponseOfAccountAuthorisationResponse
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the initiate_account_request_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        if async_req is not None:
            kwargs['async_req'] = async_req
        return self.initiate_account_request_with_http_info(account_authorisation_request, psu_id, psu_corporate_id, psu_ip_address, raw, **kwargs)  # noqa: E501

    @validate_arguments
    def initiate_account_request_with_http_info(self, account_authorisation_request : AccountAuthorisationRequest, psu_id : Annotated[Optional[StrictStr], Field(description="__Conditional__. Represents the user's login ID for the `Institution` to a personal account. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required.")] = None, psu_corporate_id : Annotated[Optional[StrictStr], Field(description="__Conditional__. Represents the user's login ID for the `Institution` to a business account. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required.")] = None, psu_ip_address : Annotated[Optional[StrictStr], Field(description="__Conditional__. The IP address of the PSU. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required.")] = None, raw : Annotated[Optional[StrictBool], Field(description="__Optional__. Used to obtain the raw request and response to and from the <code>Institution</code>.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Create Account Authorisation  # noqa: E501

        Used to initiate the authorisation process and direct users to the login screen of their financial institution in order to give consent to access account data.<br><br>See [Redirect Account Flows](https://docs.yapily.com/pages/key-concepts/account-data/account-authorisation/redirect-account-flows/) for more information about this flow.<br><br>Feature: `INITIATE_ACCOUNT_REQUEST`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.initiate_account_request_with_http_info(account_authorisation_request, psu_id, psu_corporate_id, psu_ip_address, raw, async_req=True)
        >>> result = thread.get()

        :param account_authorisation_request: (required)
        :type account_authorisation_request: AccountAuthorisationRequest
        :param psu_id: __Conditional__. Represents the user's login ID for the `Institution` to a personal account. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required.
        :type psu_id: str
        :param psu_corporate_id: __Conditional__. Represents the user's login ID for the `Institution` to a business account. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required.
        :type psu_corporate_id: str
        :param psu_ip_address: __Conditional__. The IP address of the PSU. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required.
        :type psu_ip_address: str
        :param raw: __Optional__. Used to obtain the raw request and response to and from the <code>Institution</code>.
        :type raw: bool
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(ApiResponseOfAccountAuthorisationResponse, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'account_authorisation_request',
            'psu_id',
            'psu_corporate_id',
            'psu_ip_address',
            'raw'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method initiate_account_request" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get('raw') is not None:  # noqa: E501
            _query_params.append(('raw', _params['raw']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['psu_id']:
            _header_params['psu-id'] = _params['psu_id']

        if _params['psu_corporate_id']:
            _header_params['psu-corporate-id'] = _params['psu_corporate_id']

        if _params['psu_ip_address']:
            _header_params['psu-ip-address'] = _params['psu_ip_address']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['account_authorisation_request'] is not None:
            _body_params = _params['account_authorisation_request']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;charset=UTF-8'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json;charset=UTF-8']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['basicAuth']  # noqa: E501

        _response_types_map = {
            '201': "ApiResponseOfAccountAuthorisationResponse",
        }

        return self.api_client.call_api(
            '/account-auth-requests', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @overload
    async def initiate_embedded_account_request(self, embedded_account_authorisation_request : EmbeddedAccountAuthorisationRequest, psu_id : Annotated[Optional[StrictStr], Field(description="__Conditional__. Represents the user's login ID for the `Institution` to a personal account. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required.")] = None, psu_corporate_id : Annotated[Optional[StrictStr], Field(description="__Conditional__. Represents the user's login ID for the `Institution` to a business account. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required.")] = None, psu_ip_address : Annotated[Optional[StrictStr], Field(description="__Conditional__. The IP address of the PSU. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required.")] = None, raw : Annotated[Optional[StrictBool], Field(description="__Optional__. Used to obtain the raw request and response to and from the <code>Institution</code>.")] = None, **kwargs) -> ApiResponseOfEmbeddedAccountAuthorisationResponse:  # noqa: E501
        ...

    @overload
    def initiate_embedded_account_request(self, embedded_account_authorisation_request : EmbeddedAccountAuthorisationRequest, psu_id : Annotated[Optional[StrictStr], Field(description="__Conditional__. Represents the user's login ID for the `Institution` to a personal account. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required.")] = None, psu_corporate_id : Annotated[Optional[StrictStr], Field(description="__Conditional__. Represents the user's login ID for the `Institution` to a business account. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required.")] = None, psu_ip_address : Annotated[Optional[StrictStr], Field(description="__Conditional__. The IP address of the PSU. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required.")] = None, raw : Annotated[Optional[StrictBool], Field(description="__Optional__. Used to obtain the raw request and response to and from the <code>Institution</code>.")] = None, async_req: Optional[bool]=True, **kwargs) -> ApiResponseOfEmbeddedAccountAuthorisationResponse:  # noqa: E501
        ...

    @validate_arguments
    def initiate_embedded_account_request(self, embedded_account_authorisation_request : EmbeddedAccountAuthorisationRequest, psu_id : Annotated[Optional[StrictStr], Field(description="__Conditional__. Represents the user's login ID for the `Institution` to a personal account. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required.")] = None, psu_corporate_id : Annotated[Optional[StrictStr], Field(description="__Conditional__. Represents the user's login ID for the `Institution` to a business account. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required.")] = None, psu_ip_address : Annotated[Optional[StrictStr], Field(description="__Conditional__. The IP address of the PSU. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required.")] = None, raw : Annotated[Optional[StrictBool], Field(description="__Optional__. Used to obtain the raw request and response to and from the <code>Institution</code>.")] = None, async_req: Optional[bool]=None, **kwargs) -> Union[ApiResponseOfEmbeddedAccountAuthorisationResponse, Awaitable[ApiResponseOfEmbeddedAccountAuthorisationResponse]]:  # noqa: E501
        """Create Embedded Account Authorisation  # noqa: E501

        Used to initiate the embedded authorisation process for an `Institution` that contains the `INITIATE_EMBEDDED_ACCOUNT_REQUEST` feature in order to obtain the the user's authorisation to access their account information. <br><br>See [Embedded Account Flows](https://docs.yapily.com/pages/key-concepts/account-data/account-authorisation/embedded-account-flows/) for more information about this flow.<br><br>Feature: `INITIATE_EMBEDDED_ACCOUNT_REQUEST`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.initiate_embedded_account_request(embedded_account_authorisation_request, psu_id, psu_corporate_id, psu_ip_address, raw, async_req=True)
        >>> result = thread.get()

        :param embedded_account_authorisation_request: (required)
        :type embedded_account_authorisation_request: EmbeddedAccountAuthorisationRequest
        :param psu_id: __Conditional__. Represents the user's login ID for the `Institution` to a personal account. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required.
        :type psu_id: str
        :param psu_corporate_id: __Conditional__. Represents the user's login ID for the `Institution` to a business account. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required.
        :type psu_corporate_id: str
        :param psu_ip_address: __Conditional__. The IP address of the PSU. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required.
        :type psu_ip_address: str
        :param raw: __Optional__. Used to obtain the raw request and response to and from the <code>Institution</code>.
        :type raw: bool
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ApiResponseOfEmbeddedAccountAuthorisationResponse
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the initiate_embedded_account_request_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        if async_req is not None:
            kwargs['async_req'] = async_req
        return self.initiate_embedded_account_request_with_http_info(embedded_account_authorisation_request, psu_id, psu_corporate_id, psu_ip_address, raw, **kwargs)  # noqa: E501

    @validate_arguments
    def initiate_embedded_account_request_with_http_info(self, embedded_account_authorisation_request : EmbeddedAccountAuthorisationRequest, psu_id : Annotated[Optional[StrictStr], Field(description="__Conditional__. Represents the user's login ID for the `Institution` to a personal account. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required.")] = None, psu_corporate_id : Annotated[Optional[StrictStr], Field(description="__Conditional__. Represents the user's login ID for the `Institution` to a business account. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required.")] = None, psu_ip_address : Annotated[Optional[StrictStr], Field(description="__Conditional__. The IP address of the PSU. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required.")] = None, raw : Annotated[Optional[StrictBool], Field(description="__Optional__. Used to obtain the raw request and response to and from the <code>Institution</code>.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Create Embedded Account Authorisation  # noqa: E501

        Used to initiate the embedded authorisation process for an `Institution` that contains the `INITIATE_EMBEDDED_ACCOUNT_REQUEST` feature in order to obtain the the user's authorisation to access their account information. <br><br>See [Embedded Account Flows](https://docs.yapily.com/pages/key-concepts/account-data/account-authorisation/embedded-account-flows/) for more information about this flow.<br><br>Feature: `INITIATE_EMBEDDED_ACCOUNT_REQUEST`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.initiate_embedded_account_request_with_http_info(embedded_account_authorisation_request, psu_id, psu_corporate_id, psu_ip_address, raw, async_req=True)
        >>> result = thread.get()

        :param embedded_account_authorisation_request: (required)
        :type embedded_account_authorisation_request: EmbeddedAccountAuthorisationRequest
        :param psu_id: __Conditional__. Represents the user's login ID for the `Institution` to a personal account. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required.
        :type psu_id: str
        :param psu_corporate_id: __Conditional__. Represents the user's login ID for the `Institution` to a business account. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required.
        :type psu_corporate_id: str
        :param psu_ip_address: __Conditional__. The IP address of the PSU. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required.
        :type psu_ip_address: str
        :param raw: __Optional__. Used to obtain the raw request and response to and from the <code>Institution</code>.
        :type raw: bool
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(ApiResponseOfEmbeddedAccountAuthorisationResponse, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'embedded_account_authorisation_request',
            'psu_id',
            'psu_corporate_id',
            'psu_ip_address',
            'raw'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method initiate_embedded_account_request" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get('raw') is not None:  # noqa: E501
            _query_params.append(('raw', _params['raw']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['psu_id']:
            _header_params['psu-id'] = _params['psu_id']

        if _params['psu_corporate_id']:
            _header_params['psu-corporate-id'] = _params['psu_corporate_id']

        if _params['psu_ip_address']:
            _header_params['psu-ip-address'] = _params['psu_ip_address']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['embedded_account_authorisation_request'] is not None:
            _body_params = _params['embedded_account_authorisation_request']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;charset=UTF-8'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json;charset=UTF-8']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['basicAuth']  # noqa: E501

        _response_types_map = {
            '201': "ApiResponseOfEmbeddedAccountAuthorisationResponse",
        }

        return self.api_client.call_api(
            '/embedded-account-auth-requests', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @overload
    async def re_authorise_account(self, consent : Annotated[StrictStr, Field(..., description="__Mandatory__. The `consent-token` containing the user's authorisation to make the request.")], psu_id : Annotated[Optional[StrictStr], Field(description="__Conditional__. Represents the user's login ID for the `Institution` to a personal account. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required.")] = None, psu_corporate_id : Annotated[Optional[StrictStr], Field(description="__Conditional__. Represents the user's login ID for the `Institution` to a business account. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required.")] = None, psu_ip_address : Annotated[Optional[StrictStr], Field(description="__Conditional__. The IP address of the PSU. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required.")] = None, raw : Annotated[Optional[StrictBool], Field(description="__Optional__. Used to obtain the raw request and response to and from the <code>Institution</code>.")] = None, **kwargs) -> ApiResponseOfAccountAuthorisationResponse:  # noqa: E501
        ...

    @overload
    def re_authorise_account(self, consent : Annotated[StrictStr, Field(..., description="__Mandatory__. The `consent-token` containing the user's authorisation to make the request.")], psu_id : Annotated[Optional[StrictStr], Field(description="__Conditional__. Represents the user's login ID for the `Institution` to a personal account. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required.")] = None, psu_corporate_id : Annotated[Optional[StrictStr], Field(description="__Conditional__. Represents the user's login ID for the `Institution` to a business account. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required.")] = None, psu_ip_address : Annotated[Optional[StrictStr], Field(description="__Conditional__. The IP address of the PSU. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required.")] = None, raw : Annotated[Optional[StrictBool], Field(description="__Optional__. Used to obtain the raw request and response to and from the <code>Institution</code>.")] = None, async_req: Optional[bool]=True, **kwargs) -> ApiResponseOfAccountAuthorisationResponse:  # noqa: E501
        ...

    @validate_arguments
    def re_authorise_account(self, consent : Annotated[StrictStr, Field(..., description="__Mandatory__. The `consent-token` containing the user's authorisation to make the request.")], psu_id : Annotated[Optional[StrictStr], Field(description="__Conditional__. Represents the user's login ID for the `Institution` to a personal account. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required.")] = None, psu_corporate_id : Annotated[Optional[StrictStr], Field(description="__Conditional__. Represents the user's login ID for the `Institution` to a business account. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required.")] = None, psu_ip_address : Annotated[Optional[StrictStr], Field(description="__Conditional__. The IP address of the PSU. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required.")] = None, raw : Annotated[Optional[StrictBool], Field(description="__Optional__. Used to obtain the raw request and response to and from the <code>Institution</code>.")] = None, async_req: Optional[bool]=None, **kwargs) -> Union[ApiResponseOfAccountAuthorisationResponse, Awaitable[ApiResponseOfAccountAuthorisationResponse]]:  # noqa: E501
        """Re-authorise Account Consent  # noqa: E501

        Used to prompt the account holder for continued access to their financial data. This endpoint should be used when a `Consent` that was previously `AUTHORIZED` can no longer be used to retrieve data.<br><br>See [Re-Authorisation](https://docs.yapily.com/pages/key-concepts/account-data/account-consents/#re-authorisation) for more information.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.re_authorise_account(consent, psu_id, psu_corporate_id, psu_ip_address, raw, async_req=True)
        >>> result = thread.get()

        :param consent: __Mandatory__. The `consent-token` containing the user's authorisation to make the request. (required)
        :type consent: str
        :param psu_id: __Conditional__. Represents the user's login ID for the `Institution` to a personal account. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required.
        :type psu_id: str
        :param psu_corporate_id: __Conditional__. Represents the user's login ID for the `Institution` to a business account. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required.
        :type psu_corporate_id: str
        :param psu_ip_address: __Conditional__. The IP address of the PSU. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required.
        :type psu_ip_address: str
        :param raw: __Optional__. Used to obtain the raw request and response to and from the <code>Institution</code>.
        :type raw: bool
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ApiResponseOfAccountAuthorisationResponse
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the re_authorise_account_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        if async_req is not None:
            kwargs['async_req'] = async_req
        return self.re_authorise_account_with_http_info(consent, psu_id, psu_corporate_id, psu_ip_address, raw, **kwargs)  # noqa: E501

    @validate_arguments
    def re_authorise_account_with_http_info(self, consent : Annotated[StrictStr, Field(..., description="__Mandatory__. The `consent-token` containing the user's authorisation to make the request.")], psu_id : Annotated[Optional[StrictStr], Field(description="__Conditional__. Represents the user's login ID for the `Institution` to a personal account. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required.")] = None, psu_corporate_id : Annotated[Optional[StrictStr], Field(description="__Conditional__. Represents the user's login ID for the `Institution` to a business account. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required.")] = None, psu_ip_address : Annotated[Optional[StrictStr], Field(description="__Conditional__. The IP address of the PSU. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required.")] = None, raw : Annotated[Optional[StrictBool], Field(description="__Optional__. Used to obtain the raw request and response to and from the <code>Institution</code>.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Re-authorise Account Consent  # noqa: E501

        Used to prompt the account holder for continued access to their financial data. This endpoint should be used when a `Consent` that was previously `AUTHORIZED` can no longer be used to retrieve data.<br><br>See [Re-Authorisation](https://docs.yapily.com/pages/key-concepts/account-data/account-consents/#re-authorisation) for more information.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.re_authorise_account_with_http_info(consent, psu_id, psu_corporate_id, psu_ip_address, raw, async_req=True)
        >>> result = thread.get()

        :param consent: __Mandatory__. The `consent-token` containing the user's authorisation to make the request. (required)
        :type consent: str
        :param psu_id: __Conditional__. Represents the user's login ID for the `Institution` to a personal account. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required.
        :type psu_id: str
        :param psu_corporate_id: __Conditional__. Represents the user's login ID for the `Institution` to a business account. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required.
        :type psu_corporate_id: str
        :param psu_ip_address: __Conditional__. The IP address of the PSU. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required.
        :type psu_ip_address: str
        :param raw: __Optional__. Used to obtain the raw request and response to and from the <code>Institution</code>.
        :type raw: bool
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(ApiResponseOfAccountAuthorisationResponse, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'consent',
            'psu_id',
            'psu_corporate_id',
            'psu_ip_address',
            'raw'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method re_authorise_account" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get('raw') is not None:  # noqa: E501
            _query_params.append(('raw', _params['raw']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['consent']:
            _header_params['consent'] = _params['consent']

        if _params['psu_id']:
            _header_params['psu-id'] = _params['psu_id']

        if _params['psu_corporate_id']:
            _header_params['psu-corporate-id'] = _params['psu_corporate_id']

        if _params['psu_ip_address']:
            _header_params['psu-ip-address'] = _params['psu_ip_address']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;charset=UTF-8'])  # noqa: E501

        # authentication setting
        _auth_settings = ['basicAuth']  # noqa: E501

        _response_types_map = {
            '201': "ApiResponseOfAccountAuthorisationResponse",
        }

        return self.api_client.call_api(
            '/account-auth-requests', 'PATCH',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @overload
    async def update_embedded_account_request(self, consent_id : Annotated[StrictStr, Field(..., description="__Mandatory__. The consent Id of the `Consent` to update.")], embedded_account_authorisation_request : EmbeddedAccountAuthorisationRequest, psu_id : Annotated[Optional[StrictStr], Field(description="__Conditional__. Represents the user's login ID for the `Institution` to a personal account. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required.")] = None, psu_corporate_id : Annotated[Optional[StrictStr], Field(description="__Conditional__. Represents the user's login ID for the `Institution` to a business account. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required.")] = None, psu_ip_address : Annotated[Optional[StrictStr], Field(description="__Conditional__. The IP address of the PSU. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required.")] = None, raw : Annotated[Optional[StrictBool], Field(description="__Optional__. Used to obtain the raw request and response to and from the <code>Institution</code>.")] = None, **kwargs) -> ApiResponseOfEmbeddedAccountAuthorisationResponse:  # noqa: E501
        ...

    @overload
    def update_embedded_account_request(self, consent_id : Annotated[StrictStr, Field(..., description="__Mandatory__. The consent Id of the `Consent` to update.")], embedded_account_authorisation_request : EmbeddedAccountAuthorisationRequest, psu_id : Annotated[Optional[StrictStr], Field(description="__Conditional__. Represents the user's login ID for the `Institution` to a personal account. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required.")] = None, psu_corporate_id : Annotated[Optional[StrictStr], Field(description="__Conditional__. Represents the user's login ID for the `Institution` to a business account. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required.")] = None, psu_ip_address : Annotated[Optional[StrictStr], Field(description="__Conditional__. The IP address of the PSU. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required.")] = None, raw : Annotated[Optional[StrictBool], Field(description="__Optional__. Used to obtain the raw request and response to and from the <code>Institution</code>.")] = None, async_req: Optional[bool]=True, **kwargs) -> ApiResponseOfEmbeddedAccountAuthorisationResponse:  # noqa: E501
        ...

    @validate_arguments
    def update_embedded_account_request(self, consent_id : Annotated[StrictStr, Field(..., description="__Mandatory__. The consent Id of the `Consent` to update.")], embedded_account_authorisation_request : EmbeddedAccountAuthorisationRequest, psu_id : Annotated[Optional[StrictStr], Field(description="__Conditional__. Represents the user's login ID for the `Institution` to a personal account. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required.")] = None, psu_corporate_id : Annotated[Optional[StrictStr], Field(description="__Conditional__. Represents the user's login ID for the `Institution` to a business account. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required.")] = None, psu_ip_address : Annotated[Optional[StrictStr], Field(description="__Conditional__. The IP address of the PSU. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required.")] = None, raw : Annotated[Optional[StrictBool], Field(description="__Optional__. Used to obtain the raw request and response to and from the <code>Institution</code>.")] = None, async_req: Optional[bool]=None, **kwargs) -> Union[ApiResponseOfEmbeddedAccountAuthorisationResponse, Awaitable[ApiResponseOfEmbeddedAccountAuthorisationResponse]]:  # noqa: E501
        """Update Embedded Account Authorisation  # noqa: E501

        Used to pass the SCA Code received from the `Institution` (and the SCA method selected by the user where multiple SCA methods are supported by the `Institution`) in order to complete the embedded authorisation to access the user's financial data. <br><br>See [Embedded Account Flows](https://docs.yapily.com/pages/key-concepts/account-data/account-authorisation/embedded-account-flows/) for more information about this flow.<br><br>Feature: `INITIATE_EMBEDDED_ACCOUNT_REQUEST`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_embedded_account_request(consent_id, embedded_account_authorisation_request, psu_id, psu_corporate_id, psu_ip_address, raw, async_req=True)
        >>> result = thread.get()

        :param consent_id: __Mandatory__. The consent Id of the `Consent` to update. (required)
        :type consent_id: str
        :param embedded_account_authorisation_request: (required)
        :type embedded_account_authorisation_request: EmbeddedAccountAuthorisationRequest
        :param psu_id: __Conditional__. Represents the user's login ID for the `Institution` to a personal account. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required.
        :type psu_id: str
        :param psu_corporate_id: __Conditional__. Represents the user's login ID for the `Institution` to a business account. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required.
        :type psu_corporate_id: str
        :param psu_ip_address: __Conditional__. The IP address of the PSU. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required.
        :type psu_ip_address: str
        :param raw: __Optional__. Used to obtain the raw request and response to and from the <code>Institution</code>.
        :type raw: bool
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ApiResponseOfEmbeddedAccountAuthorisationResponse
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the update_embedded_account_request_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        if async_req is not None:
            kwargs['async_req'] = async_req
        return self.update_embedded_account_request_with_http_info(consent_id, embedded_account_authorisation_request, psu_id, psu_corporate_id, psu_ip_address, raw, **kwargs)  # noqa: E501

    @validate_arguments
    def update_embedded_account_request_with_http_info(self, consent_id : Annotated[StrictStr, Field(..., description="__Mandatory__. The consent Id of the `Consent` to update.")], embedded_account_authorisation_request : EmbeddedAccountAuthorisationRequest, psu_id : Annotated[Optional[StrictStr], Field(description="__Conditional__. Represents the user's login ID for the `Institution` to a personal account. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required.")] = None, psu_corporate_id : Annotated[Optional[StrictStr], Field(description="__Conditional__. Represents the user's login ID for the `Institution` to a business account. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required.")] = None, psu_ip_address : Annotated[Optional[StrictStr], Field(description="__Conditional__. The IP address of the PSU. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required.")] = None, raw : Annotated[Optional[StrictBool], Field(description="__Optional__. Used to obtain the raw request and response to and from the <code>Institution</code>.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Update Embedded Account Authorisation  # noqa: E501

        Used to pass the SCA Code received from the `Institution` (and the SCA method selected by the user where multiple SCA methods are supported by the `Institution`) in order to complete the embedded authorisation to access the user's financial data. <br><br>See [Embedded Account Flows](https://docs.yapily.com/pages/key-concepts/account-data/account-authorisation/embedded-account-flows/) for more information about this flow.<br><br>Feature: `INITIATE_EMBEDDED_ACCOUNT_REQUEST`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_embedded_account_request_with_http_info(consent_id, embedded_account_authorisation_request, psu_id, psu_corporate_id, psu_ip_address, raw, async_req=True)
        >>> result = thread.get()

        :param consent_id: __Mandatory__. The consent Id of the `Consent` to update. (required)
        :type consent_id: str
        :param embedded_account_authorisation_request: (required)
        :type embedded_account_authorisation_request: EmbeddedAccountAuthorisationRequest
        :param psu_id: __Conditional__. Represents the user's login ID for the `Institution` to a personal account. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required.
        :type psu_id: str
        :param psu_corporate_id: __Conditional__. Represents the user's login ID for the `Institution` to a business account. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required.
        :type psu_corporate_id: str
        :param psu_ip_address: __Conditional__. The IP address of the PSU. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required.
        :type psu_ip_address: str
        :param raw: __Optional__. Used to obtain the raw request and response to and from the <code>Institution</code>.
        :type raw: bool
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(ApiResponseOfEmbeddedAccountAuthorisationResponse, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'consent_id',
            'embedded_account_authorisation_request',
            'psu_id',
            'psu_corporate_id',
            'psu_ip_address',
            'raw'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_embedded_account_request" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['consent_id']:
            _path_params['consentId'] = _params['consent_id']


        # process the query parameters
        _query_params = []
        if _params.get('raw') is not None:  # noqa: E501
            _query_params.append(('raw', _params['raw']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['psu_id']:
            _header_params['psu-id'] = _params['psu_id']

        if _params['psu_corporate_id']:
            _header_params['psu-corporate-id'] = _params['psu_corporate_id']

        if _params['psu_ip_address']:
            _header_params['psu-ip-address'] = _params['psu_ip_address']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['embedded_account_authorisation_request'] is not None:
            _body_params = _params['embedded_account_authorisation_request']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;charset=UTF-8'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json;charset=UTF-8']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['basicAuth']  # noqa: E501

        _response_types_map = {
            '201': "ApiResponseOfEmbeddedAccountAuthorisationResponse",
        }

        return self.api_client.call_api(
            '/embedded-account-auth-requests/{consentId}', 'PUT',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @overload
    async def update_embedded_bulk_payment_authorisation(self, consent_id : Annotated[StrictStr, Field(..., description="__Mandatory__. The consent Id of the `Consent` to update.")], bulk_payment_embedded_authorisation_request : BulkPaymentEmbeddedAuthorisationRequest, psu_id : Annotated[Optional[StrictStr], Field(description="__Conditional__. Represents the user's login ID for the `Institution` to a personal account. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required.")] = None, psu_corporate_id : Annotated[Optional[StrictStr], Field(description="__Conditional__. Represents the user's login ID for the `Institution` to a business account. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required.")] = None, psu_ip_address : Annotated[Optional[StrictStr], Field(description="__Conditional__. The IP address of the PSU. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required.")] = None, raw : Annotated[Optional[StrictBool], Field(description="__Optional__. Used to obtain the raw request and response to and from the <code>Institution</code>.")] = None, **kwargs) -> ApiResponseOfPaymentEmbeddedAuthorisationRequestResponse:  # noqa: E501
        ...

    @overload
    def update_embedded_bulk_payment_authorisation(self, consent_id : Annotated[StrictStr, Field(..., description="__Mandatory__. The consent Id of the `Consent` to update.")], bulk_payment_embedded_authorisation_request : BulkPaymentEmbeddedAuthorisationRequest, psu_id : Annotated[Optional[StrictStr], Field(description="__Conditional__. Represents the user's login ID for the `Institution` to a personal account. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required.")] = None, psu_corporate_id : Annotated[Optional[StrictStr], Field(description="__Conditional__. Represents the user's login ID for the `Institution` to a business account. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required.")] = None, psu_ip_address : Annotated[Optional[StrictStr], Field(description="__Conditional__. The IP address of the PSU. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required.")] = None, raw : Annotated[Optional[StrictBool], Field(description="__Optional__. Used to obtain the raw request and response to and from the <code>Institution</code>.")] = None, async_req: Optional[bool]=True, **kwargs) -> ApiResponseOfPaymentEmbeddedAuthorisationRequestResponse:  # noqa: E501
        ...

    @validate_arguments
    def update_embedded_bulk_payment_authorisation(self, consent_id : Annotated[StrictStr, Field(..., description="__Mandatory__. The consent Id of the `Consent` to update.")], bulk_payment_embedded_authorisation_request : BulkPaymentEmbeddedAuthorisationRequest, psu_id : Annotated[Optional[StrictStr], Field(description="__Conditional__. Represents the user's login ID for the `Institution` to a personal account. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required.")] = None, psu_corporate_id : Annotated[Optional[StrictStr], Field(description="__Conditional__. Represents the user's login ID for the `Institution` to a business account. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required.")] = None, psu_ip_address : Annotated[Optional[StrictStr], Field(description="__Conditional__. The IP address of the PSU. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required.")] = None, raw : Annotated[Optional[StrictBool], Field(description="__Optional__. Used to obtain the raw request and response to and from the <code>Institution</code>.")] = None, async_req: Optional[bool]=None, **kwargs) -> Union[ApiResponseOfPaymentEmbeddedAuthorisationRequestResponse, Awaitable[ApiResponseOfPaymentEmbeddedAuthorisationRequestResponse]]:  # noqa: E501
        """Update Embedded Bulk Payment Authorisation  # noqa: E501

        Used to pass the SCA Code received from the `Institution` (and the SCA method selected by the user where multiple SCA methods are supported by the `Institution`) in order to complete the embedded authorisation to initiate a bulk payment. See [Bulk Payments](https://docs.yapily.com/pages/key-concepts/payments/payment-execution/bulk-payments/) for more information. <br><br>See [Embedded Payment Flows](https://docs.yapily.com/pages/key-concepts/payments/payment-authorisation/embedded-payment-flows/) for more information about this flow.<br><br>Feature: `INITIATE_EMBEDDED_BULK_PAYMENT`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_embedded_bulk_payment_authorisation(consent_id, bulk_payment_embedded_authorisation_request, psu_id, psu_corporate_id, psu_ip_address, raw, async_req=True)
        >>> result = thread.get()

        :param consent_id: __Mandatory__. The consent Id of the `Consent` to update. (required)
        :type consent_id: str
        :param bulk_payment_embedded_authorisation_request: (required)
        :type bulk_payment_embedded_authorisation_request: BulkPaymentEmbeddedAuthorisationRequest
        :param psu_id: __Conditional__. Represents the user's login ID for the `Institution` to a personal account. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required.
        :type psu_id: str
        :param psu_corporate_id: __Conditional__. Represents the user's login ID for the `Institution` to a business account. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required.
        :type psu_corporate_id: str
        :param psu_ip_address: __Conditional__. The IP address of the PSU. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required.
        :type psu_ip_address: str
        :param raw: __Optional__. Used to obtain the raw request and response to and from the <code>Institution</code>.
        :type raw: bool
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ApiResponseOfPaymentEmbeddedAuthorisationRequestResponse
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the update_embedded_bulk_payment_authorisation_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        if async_req is not None:
            kwargs['async_req'] = async_req
        return self.update_embedded_bulk_payment_authorisation_with_http_info(consent_id, bulk_payment_embedded_authorisation_request, psu_id, psu_corporate_id, psu_ip_address, raw, **kwargs)  # noqa: E501

    @validate_arguments
    def update_embedded_bulk_payment_authorisation_with_http_info(self, consent_id : Annotated[StrictStr, Field(..., description="__Mandatory__. The consent Id of the `Consent` to update.")], bulk_payment_embedded_authorisation_request : BulkPaymentEmbeddedAuthorisationRequest, psu_id : Annotated[Optional[StrictStr], Field(description="__Conditional__. Represents the user's login ID for the `Institution` to a personal account. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required.")] = None, psu_corporate_id : Annotated[Optional[StrictStr], Field(description="__Conditional__. Represents the user's login ID for the `Institution` to a business account. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required.")] = None, psu_ip_address : Annotated[Optional[StrictStr], Field(description="__Conditional__. The IP address of the PSU. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required.")] = None, raw : Annotated[Optional[StrictBool], Field(description="__Optional__. Used to obtain the raw request and response to and from the <code>Institution</code>.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Update Embedded Bulk Payment Authorisation  # noqa: E501

        Used to pass the SCA Code received from the `Institution` (and the SCA method selected by the user where multiple SCA methods are supported by the `Institution`) in order to complete the embedded authorisation to initiate a bulk payment. See [Bulk Payments](https://docs.yapily.com/pages/key-concepts/payments/payment-execution/bulk-payments/) for more information. <br><br>See [Embedded Payment Flows](https://docs.yapily.com/pages/key-concepts/payments/payment-authorisation/embedded-payment-flows/) for more information about this flow.<br><br>Feature: `INITIATE_EMBEDDED_BULK_PAYMENT`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_embedded_bulk_payment_authorisation_with_http_info(consent_id, bulk_payment_embedded_authorisation_request, psu_id, psu_corporate_id, psu_ip_address, raw, async_req=True)
        >>> result = thread.get()

        :param consent_id: __Mandatory__. The consent Id of the `Consent` to update. (required)
        :type consent_id: str
        :param bulk_payment_embedded_authorisation_request: (required)
        :type bulk_payment_embedded_authorisation_request: BulkPaymentEmbeddedAuthorisationRequest
        :param psu_id: __Conditional__. Represents the user's login ID for the `Institution` to a personal account. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required.
        :type psu_id: str
        :param psu_corporate_id: __Conditional__. Represents the user's login ID for the `Institution` to a business account. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required.
        :type psu_corporate_id: str
        :param psu_ip_address: __Conditional__. The IP address of the PSU. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required.
        :type psu_ip_address: str
        :param raw: __Optional__. Used to obtain the raw request and response to and from the <code>Institution</code>.
        :type raw: bool
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(ApiResponseOfPaymentEmbeddedAuthorisationRequestResponse, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'consent_id',
            'bulk_payment_embedded_authorisation_request',
            'psu_id',
            'psu_corporate_id',
            'psu_ip_address',
            'raw'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_embedded_bulk_payment_authorisation" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['consent_id']:
            _path_params['consentId'] = _params['consent_id']


        # process the query parameters
        _query_params = []
        if _params.get('raw') is not None:  # noqa: E501
            _query_params.append(('raw', _params['raw']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['psu_id']:
            _header_params['psu-id'] = _params['psu_id']

        if _params['psu_corporate_id']:
            _header_params['psu-corporate-id'] = _params['psu_corporate_id']

        if _params['psu_ip_address']:
            _header_params['psu-ip-address'] = _params['psu_ip_address']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['bulk_payment_embedded_authorisation_request'] is not None:
            _body_params = _params['bulk_payment_embedded_authorisation_request']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;charset=UTF-8'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json;charset=UTF-8']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['basicAuth']  # noqa: E501

        _response_types_map = {
            '200': "ApiResponseOfPaymentEmbeddedAuthorisationRequestResponse",
        }

        return self.api_client.call_api(
            '/embedded-bulk-payment-auth-requests/{consentId}', 'PUT',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @overload
    async def update_embedded_payment_authorisation(self, consent_id : Annotated[StrictStr, Field(..., description="__Mandatory__. The consent Id of the `Consent` to update.")], payment_embedded_authorisation_request : PaymentEmbeddedAuthorisationRequest, psu_id : Annotated[Optional[StrictStr], Field(description="__Conditional__. Represents the user's login ID for the `Institution` to a personal account. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required.")] = None, psu_corporate_id : Annotated[Optional[StrictStr], Field(description="__Conditional__. Represents the user's login ID for the `Institution` to a business account. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required.")] = None, psu_ip_address : Annotated[Optional[StrictStr], Field(description="__Conditional__. The IP address of the PSU. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required.")] = None, raw : Annotated[Optional[StrictBool], Field(description="__Optional__. Used to obtain the raw request and response to and from the <code>Institution</code>.")] = None, **kwargs) -> ApiResponseOfPaymentEmbeddedAuthorisationRequestResponse:  # noqa: E501
        ...

    @overload
    def update_embedded_payment_authorisation(self, consent_id : Annotated[StrictStr, Field(..., description="__Mandatory__. The consent Id of the `Consent` to update.")], payment_embedded_authorisation_request : PaymentEmbeddedAuthorisationRequest, psu_id : Annotated[Optional[StrictStr], Field(description="__Conditional__. Represents the user's login ID for the `Institution` to a personal account. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required.")] = None, psu_corporate_id : Annotated[Optional[StrictStr], Field(description="__Conditional__. Represents the user's login ID for the `Institution` to a business account. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required.")] = None, psu_ip_address : Annotated[Optional[StrictStr], Field(description="__Conditional__. The IP address of the PSU. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required.")] = None, raw : Annotated[Optional[StrictBool], Field(description="__Optional__. Used to obtain the raw request and response to and from the <code>Institution</code>.")] = None, async_req: Optional[bool]=True, **kwargs) -> ApiResponseOfPaymentEmbeddedAuthorisationRequestResponse:  # noqa: E501
        ...

    @validate_arguments
    def update_embedded_payment_authorisation(self, consent_id : Annotated[StrictStr, Field(..., description="__Mandatory__. The consent Id of the `Consent` to update.")], payment_embedded_authorisation_request : PaymentEmbeddedAuthorisationRequest, psu_id : Annotated[Optional[StrictStr], Field(description="__Conditional__. Represents the user's login ID for the `Institution` to a personal account. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required.")] = None, psu_corporate_id : Annotated[Optional[StrictStr], Field(description="__Conditional__. Represents the user's login ID for the `Institution` to a business account. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required.")] = None, psu_ip_address : Annotated[Optional[StrictStr], Field(description="__Conditional__. The IP address of the PSU. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required.")] = None, raw : Annotated[Optional[StrictBool], Field(description="__Optional__. Used to obtain the raw request and response to and from the <code>Institution</code>.")] = None, async_req: Optional[bool]=None, **kwargs) -> Union[ApiResponseOfPaymentEmbeddedAuthorisationRequestResponse, Awaitable[ApiResponseOfPaymentEmbeddedAuthorisationRequestResponse]]:  # noqa: E501
        """Update Embedded Payment Authorisation  # noqa: E501

        Used to pass the SCA Code received from the `Institution` (and the SCA method selected by the user where multiple SCA methods are supported by the `Institution`) in order to complete the embedded authorisation to initiate a payment. <br><br> See [Embedded Payment Flows](https://docs.yapily.com/guides/payments/payment-authorisation-flows/embedded/) for more information about this flow.<br><br>Feature: `INITIATE_EMBEDDED_DOMESTIC_SINGLE_PAYMENT`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_embedded_payment_authorisation(consent_id, payment_embedded_authorisation_request, psu_id, psu_corporate_id, psu_ip_address, raw, async_req=True)
        >>> result = thread.get()

        :param consent_id: __Mandatory__. The consent Id of the `Consent` to update. (required)
        :type consent_id: str
        :param payment_embedded_authorisation_request: (required)
        :type payment_embedded_authorisation_request: PaymentEmbeddedAuthorisationRequest
        :param psu_id: __Conditional__. Represents the user's login ID for the `Institution` to a personal account. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required.
        :type psu_id: str
        :param psu_corporate_id: __Conditional__. Represents the user's login ID for the `Institution` to a business account. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required.
        :type psu_corporate_id: str
        :param psu_ip_address: __Conditional__. The IP address of the PSU. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required.
        :type psu_ip_address: str
        :param raw: __Optional__. Used to obtain the raw request and response to and from the <code>Institution</code>.
        :type raw: bool
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ApiResponseOfPaymentEmbeddedAuthorisationRequestResponse
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the update_embedded_payment_authorisation_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        if async_req is not None:
            kwargs['async_req'] = async_req
        return self.update_embedded_payment_authorisation_with_http_info(consent_id, payment_embedded_authorisation_request, psu_id, psu_corporate_id, psu_ip_address, raw, **kwargs)  # noqa: E501

    @validate_arguments
    def update_embedded_payment_authorisation_with_http_info(self, consent_id : Annotated[StrictStr, Field(..., description="__Mandatory__. The consent Id of the `Consent` to update.")], payment_embedded_authorisation_request : PaymentEmbeddedAuthorisationRequest, psu_id : Annotated[Optional[StrictStr], Field(description="__Conditional__. Represents the user's login ID for the `Institution` to a personal account. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required.")] = None, psu_corporate_id : Annotated[Optional[StrictStr], Field(description="__Conditional__. Represents the user's login ID for the `Institution` to a business account. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required.")] = None, psu_ip_address : Annotated[Optional[StrictStr], Field(description="__Conditional__. The IP address of the PSU. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required.")] = None, raw : Annotated[Optional[StrictBool], Field(description="__Optional__. Used to obtain the raw request and response to and from the <code>Institution</code>.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Update Embedded Payment Authorisation  # noqa: E501

        Used to pass the SCA Code received from the `Institution` (and the SCA method selected by the user where multiple SCA methods are supported by the `Institution`) in order to complete the embedded authorisation to initiate a payment. <br><br> See [Embedded Payment Flows](https://docs.yapily.com/guides/payments/payment-authorisation-flows/embedded/) for more information about this flow.<br><br>Feature: `INITIATE_EMBEDDED_DOMESTIC_SINGLE_PAYMENT`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_embedded_payment_authorisation_with_http_info(consent_id, payment_embedded_authorisation_request, psu_id, psu_corporate_id, psu_ip_address, raw, async_req=True)
        >>> result = thread.get()

        :param consent_id: __Mandatory__. The consent Id of the `Consent` to update. (required)
        :type consent_id: str
        :param payment_embedded_authorisation_request: (required)
        :type payment_embedded_authorisation_request: PaymentEmbeddedAuthorisationRequest
        :param psu_id: __Conditional__. Represents the user's login ID for the `Institution` to a personal account. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required.
        :type psu_id: str
        :param psu_corporate_id: __Conditional__. Represents the user's login ID for the `Institution` to a business account. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required.
        :type psu_corporate_id: str
        :param psu_ip_address: __Conditional__. The IP address of the PSU. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required.
        :type psu_ip_address: str
        :param raw: __Optional__. Used to obtain the raw request and response to and from the <code>Institution</code>.
        :type raw: bool
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(ApiResponseOfPaymentEmbeddedAuthorisationRequestResponse, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'consent_id',
            'payment_embedded_authorisation_request',
            'psu_id',
            'psu_corporate_id',
            'psu_ip_address',
            'raw'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_embedded_payment_authorisation" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['consent_id']:
            _path_params['consentId'] = _params['consent_id']


        # process the query parameters
        _query_params = []
        if _params.get('raw') is not None:  # noqa: E501
            _query_params.append(('raw', _params['raw']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['psu_id']:
            _header_params['psu-id'] = _params['psu_id']

        if _params['psu_corporate_id']:
            _header_params['psu-corporate-id'] = _params['psu_corporate_id']

        if _params['psu_ip_address']:
            _header_params['psu-ip-address'] = _params['psu_ip_address']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['payment_embedded_authorisation_request'] is not None:
            _body_params = _params['payment_embedded_authorisation_request']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;charset=UTF-8'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json;charset=UTF-8']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['basicAuth']  # noqa: E501

        _response_types_map = {
            '200': "ApiResponseOfPaymentEmbeddedAuthorisationRequestResponse",
        }

        return self.api_client.call_api(
            '/embedded-payment-auth-requests/{consentId}', 'PUT',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @overload
    async def update_payment_authorisation(self, consent : Annotated[StrictStr, Field(..., description="__Mandatory__. The `consent-token` containing the user's authorisation to make the request.")], payment_authorisation_request : PaymentAuthorisationRequest, psu_id : Annotated[Optional[StrictStr], Field(description="__Conditional__. Represents the user's login ID for the `Institution` to a personal account. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required.")] = None, psu_corporate_id : Annotated[Optional[StrictStr], Field(description="__Conditional__. Represents the user's login ID for the `Institution` to a business account. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required.")] = None, psu_ip_address : Annotated[Optional[StrictStr], Field(description="__Conditional__. The IP address of the PSU. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required.")] = None, raw : Annotated[Optional[StrictBool], Field(description="__Optional__. Used to obtain the raw request and response to and from the <code>Institution</code>.")] = None, **kwargs) -> ApiResponseOfPaymentAuthorisationRequestResponse:  # noqa: E501
        ...

    @overload
    def update_payment_authorisation(self, consent : Annotated[StrictStr, Field(..., description="__Mandatory__. The `consent-token` containing the user's authorisation to make the request.")], payment_authorisation_request : PaymentAuthorisationRequest, psu_id : Annotated[Optional[StrictStr], Field(description="__Conditional__. Represents the user's login ID for the `Institution` to a personal account. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required.")] = None, psu_corporate_id : Annotated[Optional[StrictStr], Field(description="__Conditional__. Represents the user's login ID for the `Institution` to a business account. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required.")] = None, psu_ip_address : Annotated[Optional[StrictStr], Field(description="__Conditional__. The IP address of the PSU. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required.")] = None, raw : Annotated[Optional[StrictBool], Field(description="__Optional__. Used to obtain the raw request and response to and from the <code>Institution</code>.")] = None, async_req: Optional[bool]=True, **kwargs) -> ApiResponseOfPaymentAuthorisationRequestResponse:  # noqa: E501
        ...

    @validate_arguments
    def update_payment_authorisation(self, consent : Annotated[StrictStr, Field(..., description="__Mandatory__. The `consent-token` containing the user's authorisation to make the request.")], payment_authorisation_request : PaymentAuthorisationRequest, psu_id : Annotated[Optional[StrictStr], Field(description="__Conditional__. Represents the user's login ID for the `Institution` to a personal account. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required.")] = None, psu_corporate_id : Annotated[Optional[StrictStr], Field(description="__Conditional__. Represents the user's login ID for the `Institution` to a business account. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required.")] = None, psu_ip_address : Annotated[Optional[StrictStr], Field(description="__Conditional__. The IP address of the PSU. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required.")] = None, raw : Annotated[Optional[StrictBool], Field(description="__Optional__. Used to obtain the raw request and response to and from the <code>Institution</code>.")] = None, async_req: Optional[bool]=None, **kwargs) -> Union[ApiResponseOfPaymentAuthorisationRequestResponse, Awaitable[ApiResponseOfPaymentAuthorisationRequestResponse]]:  # noqa: E501
        """Update Payment Pre-authorisation  # noqa: E501

        Used to continue the authorisation process and for any `Institution` that contains the `INITIATE_PRE_AUTHORISATION` feature and direct user to the login screen of their financial institution in order to give consent to initiate a payment. <br><br>See [Redirect Payment Flows](https://docs.yapily.com/pages/key-concepts/payments/payment-authorisation/redirect-payment-flows/) for more information about this flow. <br><br>Feature: `INITIATE_PRE_AUTHORISATION`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_payment_authorisation(consent, payment_authorisation_request, psu_id, psu_corporate_id, psu_ip_address, raw, async_req=True)
        >>> result = thread.get()

        :param consent: __Mandatory__. The `consent-token` containing the user's authorisation to make the request. (required)
        :type consent: str
        :param payment_authorisation_request: (required)
        :type payment_authorisation_request: PaymentAuthorisationRequest
        :param psu_id: __Conditional__. Represents the user's login ID for the `Institution` to a personal account. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required.
        :type psu_id: str
        :param psu_corporate_id: __Conditional__. Represents the user's login ID for the `Institution` to a business account. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required.
        :type psu_corporate_id: str
        :param psu_ip_address: __Conditional__. The IP address of the PSU. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required.
        :type psu_ip_address: str
        :param raw: __Optional__. Used to obtain the raw request and response to and from the <code>Institution</code>.
        :type raw: bool
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ApiResponseOfPaymentAuthorisationRequestResponse
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the update_payment_authorisation_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        if async_req is not None:
            kwargs['async_req'] = async_req
        return self.update_payment_authorisation_with_http_info(consent, payment_authorisation_request, psu_id, psu_corporate_id, psu_ip_address, raw, **kwargs)  # noqa: E501

    @validate_arguments
    def update_payment_authorisation_with_http_info(self, consent : Annotated[StrictStr, Field(..., description="__Mandatory__. The `consent-token` containing the user's authorisation to make the request.")], payment_authorisation_request : PaymentAuthorisationRequest, psu_id : Annotated[Optional[StrictStr], Field(description="__Conditional__. Represents the user's login ID for the `Institution` to a personal account. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required.")] = None, psu_corporate_id : Annotated[Optional[StrictStr], Field(description="__Conditional__. Represents the user's login ID for the `Institution` to a business account. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required.")] = None, psu_ip_address : Annotated[Optional[StrictStr], Field(description="__Conditional__. The IP address of the PSU. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required.")] = None, raw : Annotated[Optional[StrictBool], Field(description="__Optional__. Used to obtain the raw request and response to and from the <code>Institution</code>.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Update Payment Pre-authorisation  # noqa: E501

        Used to continue the authorisation process and for any `Institution` that contains the `INITIATE_PRE_AUTHORISATION` feature and direct user to the login screen of their financial institution in order to give consent to initiate a payment. <br><br>See [Redirect Payment Flows](https://docs.yapily.com/pages/key-concepts/payments/payment-authorisation/redirect-payment-flows/) for more information about this flow. <br><br>Feature: `INITIATE_PRE_AUTHORISATION`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_payment_authorisation_with_http_info(consent, payment_authorisation_request, psu_id, psu_corporate_id, psu_ip_address, raw, async_req=True)
        >>> result = thread.get()

        :param consent: __Mandatory__. The `consent-token` containing the user's authorisation to make the request. (required)
        :type consent: str
        :param payment_authorisation_request: (required)
        :type payment_authorisation_request: PaymentAuthorisationRequest
        :param psu_id: __Conditional__. Represents the user's login ID for the `Institution` to a personal account. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required.
        :type psu_id: str
        :param psu_corporate_id: __Conditional__. Represents the user's login ID for the `Institution` to a business account. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required.
        :type psu_corporate_id: str
        :param psu_ip_address: __Conditional__. The IP address of the PSU. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required.
        :type psu_ip_address: str
        :param raw: __Optional__. Used to obtain the raw request and response to and from the <code>Institution</code>.
        :type raw: bool
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(ApiResponseOfPaymentAuthorisationRequestResponse, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'consent',
            'payment_authorisation_request',
            'psu_id',
            'psu_corporate_id',
            'psu_ip_address',
            'raw'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_payment_authorisation" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get('raw') is not None:  # noqa: E501
            _query_params.append(('raw', _params['raw']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['psu_id']:
            _header_params['psu-id'] = _params['psu_id']

        if _params['psu_corporate_id']:
            _header_params['psu-corporate-id'] = _params['psu_corporate_id']

        if _params['psu_ip_address']:
            _header_params['psu-ip-address'] = _params['psu_ip_address']

        if _params['consent']:
            _header_params['consent'] = _params['consent']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['payment_authorisation_request'] is not None:
            _body_params = _params['payment_authorisation_request']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;charset=UTF-8'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json;charset=UTF-8']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['basicAuth']  # noqa: E501

        _response_types_map = {
            '200': "ApiResponseOfPaymentAuthorisationRequestResponse",
        }

        return self.api_client.call_api(
            '/payment-auth-requests', 'PUT',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @overload
    async def update_pre_authorise_account_consent(self, consent : Annotated[StrictStr, Field(..., description="__Mandatory__. The `consent-token` containing the user's authorisation to make the request.")], account_authorisation_request : AccountAuthorisationRequest, psu_id : Annotated[Optional[StrictStr], Field(description="__Conditional__. Represents the user's login ID for the `Institution` to a personal account. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required.")] = None, psu_corporate_id : Annotated[Optional[StrictStr], Field(description="__Conditional__. Represents the user's login ID for the `Institution` to a business account. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required.")] = None, psu_ip_address : Annotated[Optional[StrictStr], Field(description="__Conditional__. The IP address of the PSU. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required.")] = None, raw : Annotated[Optional[StrictBool], Field(description="__Optional__. Used to obtain the raw request and response to and from the <code>Institution</code>.")] = None, **kwargs) -> ApiResponseOfAccountAuthorisationResponse:  # noqa: E501
        ...

    @overload
    def update_pre_authorise_account_consent(self, consent : Annotated[StrictStr, Field(..., description="__Mandatory__. The `consent-token` containing the user's authorisation to make the request.")], account_authorisation_request : AccountAuthorisationRequest, psu_id : Annotated[Optional[StrictStr], Field(description="__Conditional__. Represents the user's login ID for the `Institution` to a personal account. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required.")] = None, psu_corporate_id : Annotated[Optional[StrictStr], Field(description="__Conditional__. Represents the user's login ID for the `Institution` to a business account. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required.")] = None, psu_ip_address : Annotated[Optional[StrictStr], Field(description="__Conditional__. The IP address of the PSU. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required.")] = None, raw : Annotated[Optional[StrictBool], Field(description="__Optional__. Used to obtain the raw request and response to and from the <code>Institution</code>.")] = None, async_req: Optional[bool]=True, **kwargs) -> ApiResponseOfAccountAuthorisationResponse:  # noqa: E501
        ...

    @validate_arguments
    def update_pre_authorise_account_consent(self, consent : Annotated[StrictStr, Field(..., description="__Mandatory__. The `consent-token` containing the user's authorisation to make the request.")], account_authorisation_request : AccountAuthorisationRequest, psu_id : Annotated[Optional[StrictStr], Field(description="__Conditional__. Represents the user's login ID for the `Institution` to a personal account. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required.")] = None, psu_corporate_id : Annotated[Optional[StrictStr], Field(description="__Conditional__. Represents the user's login ID for the `Institution` to a business account. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required.")] = None, psu_ip_address : Annotated[Optional[StrictStr], Field(description="__Conditional__. The IP address of the PSU. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required.")] = None, raw : Annotated[Optional[StrictBool], Field(description="__Optional__. Used to obtain the raw request and response to and from the <code>Institution</code>.")] = None, async_req: Optional[bool]=None, **kwargs) -> Union[ApiResponseOfAccountAuthorisationResponse, Awaitable[ApiResponseOfAccountAuthorisationResponse]]:  # noqa: E501
        """Update Account Pre-authorisation  # noqa: E501

        Used to continue the authorisation process and for any `Institution` that contains the `INITIATE_PRE_AUTHORISATION` feature and direct user to the login screen of their financial institution in order to give consent to access account data. <br><br>See [Redirect Account Flows](https://docs.yapily.com/pages/key-concepts/account-data/account-authorisation/redirect-account-flows/) for more information about this flow. <br><br>Features: <ul><li>`INITIATE_ACCOUNT_REQUEST`</li><li>`INITIATE_PRE_AUTHORISATION`</li></ul>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_pre_authorise_account_consent(consent, account_authorisation_request, psu_id, psu_corporate_id, psu_ip_address, raw, async_req=True)
        >>> result = thread.get()

        :param consent: __Mandatory__. The `consent-token` containing the user's authorisation to make the request. (required)
        :type consent: str
        :param account_authorisation_request: (required)
        :type account_authorisation_request: AccountAuthorisationRequest
        :param psu_id: __Conditional__. Represents the user's login ID for the `Institution` to a personal account. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required.
        :type psu_id: str
        :param psu_corporate_id: __Conditional__. Represents the user's login ID for the `Institution` to a business account. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required.
        :type psu_corporate_id: str
        :param psu_ip_address: __Conditional__. The IP address of the PSU. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required.
        :type psu_ip_address: str
        :param raw: __Optional__. Used to obtain the raw request and response to and from the <code>Institution</code>.
        :type raw: bool
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ApiResponseOfAccountAuthorisationResponse
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the update_pre_authorise_account_consent_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        if async_req is not None:
            kwargs['async_req'] = async_req
        return self.update_pre_authorise_account_consent_with_http_info(consent, account_authorisation_request, psu_id, psu_corporate_id, psu_ip_address, raw, **kwargs)  # noqa: E501

    @validate_arguments
    def update_pre_authorise_account_consent_with_http_info(self, consent : Annotated[StrictStr, Field(..., description="__Mandatory__. The `consent-token` containing the user's authorisation to make the request.")], account_authorisation_request : AccountAuthorisationRequest, psu_id : Annotated[Optional[StrictStr], Field(description="__Conditional__. Represents the user's login ID for the `Institution` to a personal account. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required.")] = None, psu_corporate_id : Annotated[Optional[StrictStr], Field(description="__Conditional__. Represents the user's login ID for the `Institution` to a business account. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required.")] = None, psu_ip_address : Annotated[Optional[StrictStr], Field(description="__Conditional__. The IP address of the PSU. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required.")] = None, raw : Annotated[Optional[StrictBool], Field(description="__Optional__. Used to obtain the raw request and response to and from the <code>Institution</code>.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Update Account Pre-authorisation  # noqa: E501

        Used to continue the authorisation process and for any `Institution` that contains the `INITIATE_PRE_AUTHORISATION` feature and direct user to the login screen of their financial institution in order to give consent to access account data. <br><br>See [Redirect Account Flows](https://docs.yapily.com/pages/key-concepts/account-data/account-authorisation/redirect-account-flows/) for more information about this flow. <br><br>Features: <ul><li>`INITIATE_ACCOUNT_REQUEST`</li><li>`INITIATE_PRE_AUTHORISATION`</li></ul>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_pre_authorise_account_consent_with_http_info(consent, account_authorisation_request, psu_id, psu_corporate_id, psu_ip_address, raw, async_req=True)
        >>> result = thread.get()

        :param consent: __Mandatory__. The `consent-token` containing the user's authorisation to make the request. (required)
        :type consent: str
        :param account_authorisation_request: (required)
        :type account_authorisation_request: AccountAuthorisationRequest
        :param psu_id: __Conditional__. Represents the user's login ID for the `Institution` to a personal account. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required.
        :type psu_id: str
        :param psu_corporate_id: __Conditional__. Represents the user's login ID for the `Institution` to a business account. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required.
        :type psu_corporate_id: str
        :param psu_ip_address: __Conditional__. The IP address of the PSU. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required.
        :type psu_ip_address: str
        :param raw: __Optional__. Used to obtain the raw request and response to and from the <code>Institution</code>.
        :type raw: bool
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(ApiResponseOfAccountAuthorisationResponse, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'consent',
            'account_authorisation_request',
            'psu_id',
            'psu_corporate_id',
            'psu_ip_address',
            'raw'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_pre_authorise_account_consent" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get('raw') is not None:  # noqa: E501
            _query_params.append(('raw', _params['raw']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['consent']:
            _header_params['consent'] = _params['consent']

        if _params['psu_id']:
            _header_params['psu-id'] = _params['psu_id']

        if _params['psu_corporate_id']:
            _header_params['psu-corporate-id'] = _params['psu_corporate_id']

        if _params['psu_ip_address']:
            _header_params['psu-ip-address'] = _params['psu_ip_address']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['account_authorisation_request'] is not None:
            _body_params = _params['account_authorisation_request']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;charset=UTF-8'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json;charset=UTF-8']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['basicAuth']  # noqa: E501

        _response_types_map = {
            '200': "ApiResponseOfAccountAuthorisationResponse",
        }

        return self.api_client.call_api(
            '/account-auth-requests', 'PUT',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))
