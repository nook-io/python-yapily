# coding: utf-8

"""
Yapily API

The Yapily API enables connections between your application and users' banks. For more information check out our [documentation](https://docs.yapily.com/).<br><br>In particular, make sure to view our [Getting Started](https://docs.yapily.com/pages/home/getting-started/) steps if this is your first time here.<br><br>While testing the API, our list of [sandbox credentials](https://docs.yapily.com/pages/key-concepts/sandbox-credentials/) maybe useful.

The version of the OpenAPI document: 7.2.0
Contact: support@yapily.com
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

import re  # noqa: F401

from pydantic import validate_arguments
from typing import Optional

from typing_extensions import Annotated
from pydantic import Field, StrictStr


from yapily.models.api_list_of_application_response import ApiListOfApplicationResponse
from yapily.models.api_response_of_application_response import (
    ApiResponseOfApplicationResponse,
)
from yapily.models.application_request import ApplicationRequest
from yapily.models.search_applications_public_filter_values_parameter import (
    SearchApplicationsPublicFilterValuesParameter,
)
from yapily.models.vrp_configuration import VrpConfiguration

from yapily.api_client import ApiClient
from yapily.api_response import ApiResponse
from yapily.exceptions import (  # noqa: F401
    ApiTypeError,
    ApiValueError,
)


class ApplicationManagementApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client

    @validate_arguments
    async def create_application_vrp_configuration_by_application_id(
        self,
        application_id: Annotated[
            StrictStr,
            Field(
                ...,
                description="The id of the application that vrp configuration being created for",
            ),
        ],
        vrp_configuration: Annotated[
            VrpConfiguration, Field(..., description="The vrp configuration to create")
        ],
        **kwargs,
    ) -> None:  # noqa: E501
        """Create application VRP configuration by Application Id  # noqa: E501

        Create application vrp configuration  # noqa: E501

        :param application_id: The id of the application that vrp configuration being created for (required)
        :type application_id: str
        :param vrp_configuration: The vrp configuration to create (required)
        :type vrp_configuration: VrpConfiguration
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs["_return_http_data_only"] = True
        if "_preload_content" in kwargs:
            message = "Error! Please call the create_application_vrp_configuration_by_application_id_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return await self.create_application_vrp_configuration_by_application_id_with_http_info(
            application_id, vrp_configuration, **kwargs
        )  # noqa: E501

    @validate_arguments
    async def create_application_vrp_configuration_by_application_id_with_http_info(
        self,
        application_id: Annotated[
            StrictStr,
            Field(
                ...,
                description="The id of the application that vrp configuration being created for",
            ),
        ],
        vrp_configuration: Annotated[
            VrpConfiguration, Field(..., description="The vrp configuration to create")
        ],
        **kwargs,
    ) -> ApiResponse:  # noqa: E501
        """Create application VRP configuration by Application Id  # noqa: E501

        Create application vrp configuration  # noqa: E501

        :param application_id: The id of the application that vrp configuration being created for (required)
        :type application_id: str
        :param vrp_configuration: The vrp configuration to create (required)
        :type vrp_configuration: VrpConfiguration
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = ["application_id", "vrp_configuration"]
        _all_params.extend(
            [
                "_return_http_data_only",
                "_preload_content",
                "_request_timeout",
                "_request_auth",
                "_content_type",
                "_headers",
            ]
        )

        # validate the arguments
        for _key, _val in _params["kwargs"].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_application_vrp_configuration_by_application_id"
                    % _key
                )
            _params[_key] = _val
        del _params["kwargs"]

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params["application_id"] is not None:
            _path_params["applicationId"] = _params["application_id"]

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get("_headers", {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params["vrp_configuration"] is not None:
            _body_params = _params["vrp_configuration"]

        # set the HTTP header `Accept`
        _header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json;charset=UTF-8"]
        )  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get(
            "_content_type",
            self.api_client.select_header_content_type(["application/json"]),
        )
        if _content_types_list:
            _header_params["Content-Type"] = _content_types_list

        # authentication setting
        _auth_settings = ["basicAuth"]  # noqa: E501

        _response_types_map = {}

        return await self.api_client.call_api(
            "/applications/{applicationId}/vrp",
            "POST",
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            _return_http_data_only=_params.get("_return_http_data_only"),  # noqa: E501
            _preload_content=_params.get("_preload_content", True),
            _request_timeout=_params.get("_request_timeout"),
            collection_formats=_collection_formats,
            _request_auth=_params.get("_request_auth"),
        )

    @validate_arguments
    async def create_sub_application(
        self,
        application_request: Annotated[
            ApplicationRequest, Field(..., description="The sub-application to create")
        ],
        **kwargs,
    ) -> ApiResponseOfApplicationResponse:  # noqa: E501
        """Creates a sub-application for the root application id provided in the authentication token  # noqa: E501

        Creates a sub-application under the given root application id provided in the authentication token. The sub-application can use the root's credentials to call the API  # noqa: E501

        :param application_request: The sub-application to create (required)
        :type application_request: ApplicationRequest
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ApiResponseOfApplicationResponse
        """
        kwargs["_return_http_data_only"] = True
        if "_preload_content" in kwargs:
            message = "Error! Please call the create_sub_application_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return await self.create_sub_application_with_http_info(
            application_request, **kwargs
        )  # noqa: E501

    @validate_arguments
    async def create_sub_application_with_http_info(
        self,
        application_request: Annotated[
            ApplicationRequest, Field(..., description="The sub-application to create")
        ],
        **kwargs,
    ) -> ApiResponse:  # noqa: E501
        """Creates a sub-application for the root application id provided in the authentication token  # noqa: E501

        Creates a sub-application under the given root application id provided in the authentication token. The sub-application can use the root's credentials to call the API  # noqa: E501

        :param application_request: The sub-application to create (required)
        :type application_request: ApplicationRequest
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(ApiResponseOfApplicationResponse, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = ["application_request"]
        _all_params.extend(
            [
                "_return_http_data_only",
                "_preload_content",
                "_request_timeout",
                "_request_auth",
                "_content_type",
                "_headers",
            ]
        )

        # validate the arguments
        for _key, _val in _params["kwargs"].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_sub_application" % _key
                )
            _params[_key] = _val
        del _params["kwargs"]

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get("_headers", {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params["application_request"] is not None:
            _body_params = _params["application_request"]

        # set the HTTP header `Accept`
        _header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json;charset=UTF-8"]
        )  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get(
            "_content_type",
            self.api_client.select_header_content_type(["application/json"]),
        )
        if _content_types_list:
            _header_params["Content-Type"] = _content_types_list

        # authentication setting
        _auth_settings = ["basicAuth"]  # noqa: E501

        _response_types_map = {
            "201": "ApiResponseOfApplicationResponse",
            "400": "ValidationErrorResponse",
            "401": "ApiErrorResponse",
            "403": "ApiErrorResponse",
            "404": "ApiErrorResponse",
            "500": "ApiErrorResponse",
        }

        return await self.api_client.call_api(
            "/applications",
            "POST",
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            _return_http_data_only=_params.get("_return_http_data_only"),  # noqa: E501
            _preload_content=_params.get("_preload_content", True),
            _request_timeout=_params.get("_request_timeout"),
            collection_formats=_collection_formats,
            _request_auth=_params.get("_request_auth"),
        )

    @validate_arguments
    async def delete_application(
        self,
        application_id: Annotated[
            StrictStr, Field(..., description="The id of the application being deleted")
        ],
        **kwargs,
    ) -> None:  # noqa: E501
        """Delete an application  # noqa: E501

        Deletes the application with the given ID in the path  # noqa: E501

        :param application_id: The id of the application being deleted (required)
        :type application_id: str
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs["_return_http_data_only"] = True
        if "_preload_content" in kwargs:
            message = "Error! Please call the delete_application_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return await self.delete_application_with_http_info(application_id, **kwargs)  # noqa: E501

    @validate_arguments
    async def delete_application_with_http_info(
        self,
        application_id: Annotated[
            StrictStr, Field(..., description="The id of the application being deleted")
        ],
        **kwargs,
    ) -> ApiResponse:  # noqa: E501
        """Delete an application  # noqa: E501

        Deletes the application with the given ID in the path  # noqa: E501

        :param application_id: The id of the application being deleted (required)
        :type application_id: str
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = ["application_id"]
        _all_params.extend(
            [
                "_return_http_data_only",
                "_preload_content",
                "_request_timeout",
                "_request_auth",
                "_content_type",
                "_headers",
            ]
        )

        # validate the arguments
        for _key, _val in _params["kwargs"].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_application" % _key
                )
            _params[_key] = _val
        del _params["kwargs"]

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params["application_id"] is not None:
            _path_params["applicationId"] = _params["application_id"]

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get("_headers", {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json;charset=UTF-8"]
        )  # noqa: E501

        # authentication setting
        _auth_settings = ["basicAuth"]  # noqa: E501

        _response_types_map = {}

        return await self.api_client.call_api(
            "/applications/{applicationId}",
            "DELETE",
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            _return_http_data_only=_params.get("_return_http_data_only"),  # noqa: E501
            _preload_content=_params.get("_preload_content", True),
            _request_timeout=_params.get("_request_timeout"),
            collection_formats=_collection_formats,
            _request_auth=_params.get("_request_auth"),
        )

    @validate_arguments
    async def get_application_by_id(
        self,
        application_id: Annotated[
            StrictStr, Field(..., description="The id of the application being fetched")
        ],
        **kwargs,
    ) -> ApiResponseOfApplicationResponse:  # noqa: E501
        """Get application details  # noqa: E501

        Retrieves an application by the id provided in the path  # noqa: E501

        :param application_id: The id of the application being fetched (required)
        :type application_id: str
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ApiResponseOfApplicationResponse
        """
        kwargs["_return_http_data_only"] = True
        if "_preload_content" in kwargs:
            message = "Error! Please call the get_application_by_id_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return await self.get_application_by_id_with_http_info(application_id, **kwargs)  # noqa: E501

    @validate_arguments
    async def get_application_by_id_with_http_info(
        self,
        application_id: Annotated[
            StrictStr, Field(..., description="The id of the application being fetched")
        ],
        **kwargs,
    ) -> ApiResponse:  # noqa: E501
        """Get application details  # noqa: E501

        Retrieves an application by the id provided in the path  # noqa: E501

        :param application_id: The id of the application being fetched (required)
        :type application_id: str
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(ApiResponseOfApplicationResponse, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = ["application_id"]
        _all_params.extend(
            [
                "_return_http_data_only",
                "_preload_content",
                "_request_timeout",
                "_request_auth",
                "_content_type",
                "_headers",
            ]
        )

        # validate the arguments
        for _key, _val in _params["kwargs"].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_application_by_id" % _key
                )
            _params[_key] = _val
        del _params["kwargs"]

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params["application_id"] is not None:
            _path_params["applicationId"] = _params["application_id"]

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get("_headers", {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json;charset=UTF-8"]
        )  # noqa: E501

        # authentication setting
        _auth_settings = ["basicAuth"]  # noqa: E501

        _response_types_map = {
            "200": "ApiResponseOfApplicationResponse",
            "401": "ApiErrorResponse",
            "403": "ApiErrorResponse",
            "404": "ApiErrorResponse",
            "500": "ApiErrorResponse",
        }

        return await self.api_client.call_api(
            "/applications/{applicationId}",
            "GET",
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            _return_http_data_only=_params.get("_return_http_data_only"),  # noqa: E501
            _preload_content=_params.get("_preload_content", True),
            _request_timeout=_params.get("_request_timeout"),
            collection_formats=_collection_formats,
            _request_auth=_params.get("_request_auth"),
        )

    @validate_arguments
    async def get_application_vrp_configuration_by_application_id(
        self,
        application_id: Annotated[
            StrictStr,
            Field(
                ...,
                description="The id of the application that vrp configuration being created for",
            ),
        ],
        **kwargs,
    ) -> VrpConfiguration:  # noqa: E501
        """Get application VRP configuration by Application Id  # noqa: E501

        Get application vrp configuration  # noqa: E501

        :param application_id: The id of the application that vrp configuration being created for (required)
        :type application_id: str
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: VrpConfiguration
        """
        kwargs["_return_http_data_only"] = True
        if "_preload_content" in kwargs:
            message = "Error! Please call the get_application_vrp_configuration_by_application_id_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return await self.get_application_vrp_configuration_by_application_id_with_http_info(
            application_id, **kwargs
        )  # noqa: E501

    @validate_arguments
    async def get_application_vrp_configuration_by_application_id_with_http_info(
        self,
        application_id: Annotated[
            StrictStr,
            Field(
                ...,
                description="The id of the application that vrp configuration being created for",
            ),
        ],
        **kwargs,
    ) -> ApiResponse:  # noqa: E501
        """Get application VRP configuration by Application Id  # noqa: E501

        Get application vrp configuration  # noqa: E501

        :param application_id: The id of the application that vrp configuration being created for (required)
        :type application_id: str
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(VrpConfiguration, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = ["application_id"]
        _all_params.extend(
            [
                "_return_http_data_only",
                "_preload_content",
                "_request_timeout",
                "_request_auth",
                "_content_type",
                "_headers",
            ]
        )

        # validate the arguments
        for _key, _val in _params["kwargs"].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_application_vrp_configuration_by_application_id"
                    % _key
                )
            _params[_key] = _val
        del _params["kwargs"]

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params["application_id"] is not None:
            _path_params["applicationId"] = _params["application_id"]

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get("_headers", {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json;charset=UTF-8"]
        )  # noqa: E501

        # authentication setting
        _auth_settings = ["basicAuth"]  # noqa: E501

        _response_types_map = {
            "200": "VrpConfiguration",
            "400": "ValidationErrorResponse",
            "401": "ApiErrorResponse",
            "403": "ApiErrorResponse",
            "404": "ApiErrorResponse",
            "500": "ApiErrorResponse",
        }

        return await self.api_client.call_api(
            "/applications/{applicationId}/vrp",
            "GET",
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            _return_http_data_only=_params.get("_return_http_data_only"),  # noqa: E501
            _preload_content=_params.get("_preload_content", True),
            _request_timeout=_params.get("_request_timeout"),
            collection_formats=_collection_formats,
            _request_auth=_params.get("_request_auth"),
        )

    @validate_arguments
    async def search_applications(
        self,
        public_filter_values: Optional[
            SearchApplicationsPublicFilterValuesParameter
        ] = None,
        **kwargs,
    ) -> ApiListOfApplicationResponse:  # noqa: E501
        """Retrieve sub-applications for the root application provided in the authentication token.  # noqa: E501

        Retrieves sub-applications for the root application provided in the authentication token. If a sub-application is provided in the authentication token, it will return an empty list.  # noqa: E501

        :param public_filter_values:
        :type public_filter_values: SearchApplicationsPublicFilterValuesParameter
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ApiListOfApplicationResponse
        """
        kwargs["_return_http_data_only"] = True
        if "_preload_content" in kwargs:
            message = "Error! Please call the search_applications_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return await self.search_applications_with_http_info(
            public_filter_values, **kwargs
        )  # noqa: E501

    @validate_arguments
    async def search_applications_with_http_info(
        self,
        public_filter_values: Optional[
            SearchApplicationsPublicFilterValuesParameter
        ] = None,
        **kwargs,
    ) -> ApiResponse:  # noqa: E501
        """Retrieve sub-applications for the root application provided in the authentication token.  # noqa: E501

        Retrieves sub-applications for the root application provided in the authentication token. If a sub-application is provided in the authentication token, it will return an empty list.  # noqa: E501

        :param public_filter_values:
        :type public_filter_values: SearchApplicationsPublicFilterValuesParameter
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(ApiListOfApplicationResponse, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = ["public_filter_values"]
        _all_params.extend(
            [
                "_return_http_data_only",
                "_preload_content",
                "_request_timeout",
                "_request_auth",
                "_content_type",
                "_headers",
            ]
        )

        # validate the arguments
        for _key, _val in _params["kwargs"].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method search_applications" % _key
                )
            _params[_key] = _val
        del _params["kwargs"]

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get("public_filter_values") is not None:  # noqa: E501
            _query_params.append(
                ("publicFilterValues", _params["public_filter_values"])
            )

        # process the header parameters
        _header_params = dict(_params.get("_headers", {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json", "application/json;charset=UTF-8"]
        )  # noqa: E501

        # authentication setting
        _auth_settings = ["basicAuth"]  # noqa: E501

        _response_types_map = {
            "200": "ApiListOfApplicationResponse",
            "400": "ValidationErrorResponse",
            "401": "ApiErrorResponse",
            "403": "ApiErrorResponse",
            "500": "ApiErrorResponse",
        }

        return await self.api_client.call_api(
            "/applications",
            "GET",
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            _return_http_data_only=_params.get("_return_http_data_only"),  # noqa: E501
            _preload_content=_params.get("_preload_content", True),
            _request_timeout=_params.get("_request_timeout"),
            collection_formats=_collection_formats,
            _request_auth=_params.get("_request_auth"),
        )

    @validate_arguments
    async def update_application(
        self,
        application_id: Annotated[
            StrictStr, Field(..., description="The id of the application being updated")
        ],
        application_request: Annotated[
            ApplicationRequest, Field(..., description="The application to update")
        ],
        **kwargs,
    ) -> ApiResponseOfApplicationResponse:  # noqa: E501
        """Update an Application  # noqa: E501

        Updates the application properties for the application with the given ID in the path  # noqa: E501

        :param application_id: The id of the application being updated (required)
        :type application_id: str
        :param application_request: The application to update (required)
        :type application_request: ApplicationRequest
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ApiResponseOfApplicationResponse
        """
        kwargs["_return_http_data_only"] = True
        if "_preload_content" in kwargs:
            message = "Error! Please call the update_application_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return await self.update_application_with_http_info(
            application_id, application_request, **kwargs
        )  # noqa: E501

    @validate_arguments
    async def update_application_with_http_info(
        self,
        application_id: Annotated[
            StrictStr, Field(..., description="The id of the application being updated")
        ],
        application_request: Annotated[
            ApplicationRequest, Field(..., description="The application to update")
        ],
        **kwargs,
    ) -> ApiResponse:  # noqa: E501
        """Update an Application  # noqa: E501

        Updates the application properties for the application with the given ID in the path  # noqa: E501

        :param application_id: The id of the application being updated (required)
        :type application_id: str
        :param application_request: The application to update (required)
        :type application_request: ApplicationRequest
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(ApiResponseOfApplicationResponse, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = ["application_id", "application_request"]
        _all_params.extend(
            [
                "_return_http_data_only",
                "_preload_content",
                "_request_timeout",
                "_request_auth",
                "_content_type",
                "_headers",
            ]
        )

        # validate the arguments
        for _key, _val in _params["kwargs"].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_application" % _key
                )
            _params[_key] = _val
        del _params["kwargs"]

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params["application_id"] is not None:
            _path_params["applicationId"] = _params["application_id"]

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get("_headers", {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params["application_request"] is not None:
            _body_params = _params["application_request"]

        # set the HTTP header `Accept`
        _header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json;charset=UTF-8"]
        )  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get(
            "_content_type",
            self.api_client.select_header_content_type(["application/json"]),
        )
        if _content_types_list:
            _header_params["Content-Type"] = _content_types_list

        # authentication setting
        _auth_settings = ["basicAuth"]  # noqa: E501

        _response_types_map = {
            "200": "ApiResponseOfApplicationResponse",
            "400": "ValidationErrorResponse",
            "401": "ApiErrorResponse",
            "403": "ApiErrorResponse",
            "500": "ApiErrorResponse",
        }

        return await self.api_client.call_api(
            "/applications/{applicationId}",
            "PUT",
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            _return_http_data_only=_params.get("_return_http_data_only"),  # noqa: E501
            _preload_content=_params.get("_preload_content", True),
            _request_timeout=_params.get("_request_timeout"),
            collection_formats=_collection_formats,
            _request_auth=_params.get("_request_auth"),
        )

    @validate_arguments
    async def update_application_vrp_configuration_by_application_id(
        self,
        application_id: Annotated[
            StrictStr,
            Field(
                ...,
                description="The id of the application that vrp configuration being created for",
            ),
        ],
        vrp_configuration: Annotated[
            VrpConfiguration, Field(..., description="The vrp configuration to create")
        ],
        **kwargs,
    ) -> None:  # noqa: E501
        """Update application VRP configuration by Application Id  # noqa: E501

        Update application vrp configuration  # noqa: E501

        :param application_id: The id of the application that vrp configuration being created for (required)
        :type application_id: str
        :param vrp_configuration: The vrp configuration to create (required)
        :type vrp_configuration: VrpConfiguration
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs["_return_http_data_only"] = True
        if "_preload_content" in kwargs:
            message = "Error! Please call the update_application_vrp_configuration_by_application_id_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return await self.update_application_vrp_configuration_by_application_id_with_http_info(
            application_id, vrp_configuration, **kwargs
        )  # noqa: E501

    @validate_arguments
    async def update_application_vrp_configuration_by_application_id_with_http_info(
        self,
        application_id: Annotated[
            StrictStr,
            Field(
                ...,
                description="The id of the application that vrp configuration being created for",
            ),
        ],
        vrp_configuration: Annotated[
            VrpConfiguration, Field(..., description="The vrp configuration to create")
        ],
        **kwargs,
    ) -> ApiResponse:  # noqa: E501
        """Update application VRP configuration by Application Id  # noqa: E501

        Update application vrp configuration  # noqa: E501

        :param application_id: The id of the application that vrp configuration being created for (required)
        :type application_id: str
        :param vrp_configuration: The vrp configuration to create (required)
        :type vrp_configuration: VrpConfiguration
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = ["application_id", "vrp_configuration"]
        _all_params.extend(
            [
                "_return_http_data_only",
                "_preload_content",
                "_request_timeout",
                "_request_auth",
                "_content_type",
                "_headers",
            ]
        )

        # validate the arguments
        for _key, _val in _params["kwargs"].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_application_vrp_configuration_by_application_id"
                    % _key
                )
            _params[_key] = _val
        del _params["kwargs"]

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params["application_id"] is not None:
            _path_params["applicationId"] = _params["application_id"]

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get("_headers", {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params["vrp_configuration"] is not None:
            _body_params = _params["vrp_configuration"]

        # set the HTTP header `Accept`
        _header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json;charset=UTF-8"]
        )  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get(
            "_content_type",
            self.api_client.select_header_content_type(["application/json"]),
        )
        if _content_types_list:
            _header_params["Content-Type"] = _content_types_list

        # authentication setting
        _auth_settings = ["basicAuth"]  # noqa: E501

        _response_types_map = {}

        return await self.api_client.call_api(
            "/applications/{applicationId}/vrp",
            "PUT",
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            _return_http_data_only=_params.get("_return_http_data_only"),  # noqa: E501
            _preload_content=_params.get("_preload_content", True),
            _request_timeout=_params.get("_request_timeout"),
            collection_formats=_collection_formats,
            _request_auth=_params.get("_request_auth"),
        )
