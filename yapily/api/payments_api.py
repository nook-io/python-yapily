# coding: utf-8

"""
    Yapily API

    The Yapily API enables connections between your application and users' banks. For more information check out our [documentation](https://docs.yapily.com/).<br><br>In particular, make sure to view our [Getting Started](https://docs.yapily.com/pages/home/getting-started/) steps if this is your first time here.<br><br>While testing the API, our list of [sandbox credentials](https://docs.yapily.com/pages/key-concepts/sandbox-credentials/) maybe useful.

    The version of the OpenAPI document: 4.2.0
    Contact: support@yapily.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import re  # noqa: F401

from pydantic import validate_arguments

from typing_extensions import Annotated
from pydantic import Field, StrictBool, StrictStr

from typing import Optional

from yapily.models.api_response_of_payment_response import ApiResponseOfPaymentResponse
from yapily.models.api_response_of_payment_responses import ApiResponseOfPaymentResponses
from yapily.models.bulk_payment_request import BulkPaymentRequest
from yapily.models.payment_request import PaymentRequest

from yapily.api_client import ApiClient
from yapily.api_response import ApiResponse
from yapily.exceptions import (  # noqa: F401
    ApiTypeError,
    ApiValueError
)


class PaymentsApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client

    @validate_arguments
    def create_bulk_payment(self, consent : Annotated[StrictStr, Field(..., description="__Mandatory__. The `consent-token` containing the user's authorisation to make the request.")], bulk_payment_request : BulkPaymentRequest, psu_id : Annotated[Optional[StrictStr], Field(description="__Conditional__. Represents the user's login ID for the `Institution` to a personal account. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required.")] = None, psu_corporate_id : Annotated[Optional[StrictStr], Field(description="__Conditional__. Represents the user's login ID for the `Institution` to a business account. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required.")] = None, psu_ip_address : Annotated[Optional[StrictStr], Field(description="__Conditional__. The IP address of the PSU. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required.")] = None, raw : Annotated[Optional[StrictBool], Field(description="__Optional__. Used to obtain the raw request and response to and from the <code>Institution</code>.")] = None, **kwargs) -> ApiResponseOfPaymentResponse:  # noqa: E501
        """Create Bulk Payment  # noqa: E501

        Creates a bulk payment after obtaining the user's authorisation. <br><br>Feature: `CREATE_BULK_PAYMENT`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_bulk_payment(consent, bulk_payment_request, psu_id, psu_corporate_id, psu_ip_address, raw, async_req=True)
        >>> result = thread.get()

        :param consent: __Mandatory__. The `consent-token` containing the user's authorisation to make the request. (required)
        :type consent: str
        :param bulk_payment_request: (required)
        :type bulk_payment_request: BulkPaymentRequest
        :param psu_id: __Conditional__. Represents the user's login ID for the `Institution` to a personal account. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required.
        :type psu_id: str
        :param psu_corporate_id: __Conditional__. Represents the user's login ID for the `Institution` to a business account. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required.
        :type psu_corporate_id: str
        :param psu_ip_address: __Conditional__. The IP address of the PSU. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required.
        :type psu_ip_address: str
        :param raw: __Optional__. Used to obtain the raw request and response to and from the <code>Institution</code>.
        :type raw: bool
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ApiResponseOfPaymentResponse
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the create_bulk_payment_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.create_bulk_payment_with_http_info(consent, bulk_payment_request, psu_id, psu_corporate_id, psu_ip_address, raw, **kwargs)  # noqa: E501

    @validate_arguments
    def create_bulk_payment_with_http_info(self, consent : Annotated[StrictStr, Field(..., description="__Mandatory__. The `consent-token` containing the user's authorisation to make the request.")], bulk_payment_request : BulkPaymentRequest, psu_id : Annotated[Optional[StrictStr], Field(description="__Conditional__. Represents the user's login ID for the `Institution` to a personal account. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required.")] = None, psu_corporate_id : Annotated[Optional[StrictStr], Field(description="__Conditional__. Represents the user's login ID for the `Institution` to a business account. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required.")] = None, psu_ip_address : Annotated[Optional[StrictStr], Field(description="__Conditional__. The IP address of the PSU. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required.")] = None, raw : Annotated[Optional[StrictBool], Field(description="__Optional__. Used to obtain the raw request and response to and from the <code>Institution</code>.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Create Bulk Payment  # noqa: E501

        Creates a bulk payment after obtaining the user's authorisation. <br><br>Feature: `CREATE_BULK_PAYMENT`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_bulk_payment_with_http_info(consent, bulk_payment_request, psu_id, psu_corporate_id, psu_ip_address, raw, async_req=True)
        >>> result = thread.get()

        :param consent: __Mandatory__. The `consent-token` containing the user's authorisation to make the request. (required)
        :type consent: str
        :param bulk_payment_request: (required)
        :type bulk_payment_request: BulkPaymentRequest
        :param psu_id: __Conditional__. Represents the user's login ID for the `Institution` to a personal account. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required.
        :type psu_id: str
        :param psu_corporate_id: __Conditional__. Represents the user's login ID for the `Institution` to a business account. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required.
        :type psu_corporate_id: str
        :param psu_ip_address: __Conditional__. The IP address of the PSU. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required.
        :type psu_ip_address: str
        :param raw: __Optional__. Used to obtain the raw request and response to and from the <code>Institution</code>.
        :type raw: bool
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(ApiResponseOfPaymentResponse, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'consent',
            'bulk_payment_request',
            'psu_id',
            'psu_corporate_id',
            'psu_ip_address',
            'raw'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_bulk_payment" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get('raw') is not None:  # noqa: E501
            _query_params.append(('raw', _params['raw']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['consent'] is not None:
            _header_params['consent'] = _params['consent']

        if _params['psu_id'] is not None:
            _header_params['psu-id'] = _params['psu_id']

        if _params['psu_corporate_id'] is not None:
            _header_params['psu-corporate-id'] = _params['psu_corporate_id']

        if _params['psu_ip_address'] is not None:
            _header_params['psu-ip-address'] = _params['psu_ip_address']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['bulk_payment_request'] is not None:
            _body_params = _params['bulk_payment_request']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;charset=UTF-8'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json;charset=UTF-8']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['basicAuth']  # noqa: E501

        _response_types_map = {
            '201': "ApiResponseOfPaymentResponse",
        }

        return self.api_client.call_api(
            '/bulk-payments', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def create_payment(self, consent : Annotated[StrictStr, Field(..., description="__Mandatory__. The `consent-token` containing the user's authorisation to make the request.")], payment_request : PaymentRequest, psu_id : Annotated[Optional[StrictStr], Field(description="__Conditional__. Represents the user's login ID for the `Institution` to a personal account. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required.")] = None, psu_corporate_id : Annotated[Optional[StrictStr], Field(description="__Conditional__. Represents the user's login ID for the `Institution` to a business account. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required.")] = None, psu_ip_address : Annotated[Optional[StrictStr], Field(description="__Conditional__. The IP address of the PSU. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required.")] = None, raw : Annotated[Optional[StrictBool], Field(description="__Optional__. Used to obtain the raw request and response to and from the <code>Institution</code>.")] = None, **kwargs) -> ApiResponseOfPaymentResponse:  # noqa: E501
        """Create Payment  # noqa: E501

        Creates a payment after obtaining the user's authorisation. <br><br>Features:<ul><li>`CREATE_DOMESTIC_PERIODIC_PAYMENT`</li><li>`CREATE_DOMESTIC_SCHEDULED_PAYMENT`</li><li>`CREATE_DOMESTIC_SINGLE_INSTANT_PAYMENT`</li><li>`CREATE_DOMESTIC_SINGLE_PAYMENT`</li><li>`CREATE_INTERNATIONAL_PERIODIC_PAYMENT`</li><li>`CREATE_INTERNATIONAL_SCHEDULED_PAYMENT`</li><li>`CREATE_INTERNATIONAL_SINGLE_PAYMENT`</li></ul>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_payment(consent, payment_request, psu_id, psu_corporate_id, psu_ip_address, raw, async_req=True)
        >>> result = thread.get()

        :param consent: __Mandatory__. The `consent-token` containing the user's authorisation to make the request. (required)
        :type consent: str
        :param payment_request: (required)
        :type payment_request: PaymentRequest
        :param psu_id: __Conditional__. Represents the user's login ID for the `Institution` to a personal account. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required.
        :type psu_id: str
        :param psu_corporate_id: __Conditional__. Represents the user's login ID for the `Institution` to a business account. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required.
        :type psu_corporate_id: str
        :param psu_ip_address: __Conditional__. The IP address of the PSU. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required.
        :type psu_ip_address: str
        :param raw: __Optional__. Used to obtain the raw request and response to and from the <code>Institution</code>.
        :type raw: bool
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ApiResponseOfPaymentResponse
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the create_payment_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.create_payment_with_http_info(consent, payment_request, psu_id, psu_corporate_id, psu_ip_address, raw, **kwargs)  # noqa: E501

    @validate_arguments
    def create_payment_with_http_info(self, consent : Annotated[StrictStr, Field(..., description="__Mandatory__. The `consent-token` containing the user's authorisation to make the request.")], payment_request : PaymentRequest, psu_id : Annotated[Optional[StrictStr], Field(description="__Conditional__. Represents the user's login ID for the `Institution` to a personal account. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required.")] = None, psu_corporate_id : Annotated[Optional[StrictStr], Field(description="__Conditional__. Represents the user's login ID for the `Institution` to a business account. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required.")] = None, psu_ip_address : Annotated[Optional[StrictStr], Field(description="__Conditional__. The IP address of the PSU. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required.")] = None, raw : Annotated[Optional[StrictBool], Field(description="__Optional__. Used to obtain the raw request and response to and from the <code>Institution</code>.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Create Payment  # noqa: E501

        Creates a payment after obtaining the user's authorisation. <br><br>Features:<ul><li>`CREATE_DOMESTIC_PERIODIC_PAYMENT`</li><li>`CREATE_DOMESTIC_SCHEDULED_PAYMENT`</li><li>`CREATE_DOMESTIC_SINGLE_INSTANT_PAYMENT`</li><li>`CREATE_DOMESTIC_SINGLE_PAYMENT`</li><li>`CREATE_INTERNATIONAL_PERIODIC_PAYMENT`</li><li>`CREATE_INTERNATIONAL_SCHEDULED_PAYMENT`</li><li>`CREATE_INTERNATIONAL_SINGLE_PAYMENT`</li></ul>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_payment_with_http_info(consent, payment_request, psu_id, psu_corporate_id, psu_ip_address, raw, async_req=True)
        >>> result = thread.get()

        :param consent: __Mandatory__. The `consent-token` containing the user's authorisation to make the request. (required)
        :type consent: str
        :param payment_request: (required)
        :type payment_request: PaymentRequest
        :param psu_id: __Conditional__. Represents the user's login ID for the `Institution` to a personal account. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required.
        :type psu_id: str
        :param psu_corporate_id: __Conditional__. Represents the user's login ID for the `Institution` to a business account. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required.
        :type psu_corporate_id: str
        :param psu_ip_address: __Conditional__. The IP address of the PSU. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required.
        :type psu_ip_address: str
        :param raw: __Optional__. Used to obtain the raw request and response to and from the <code>Institution</code>.
        :type raw: bool
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(ApiResponseOfPaymentResponse, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'consent',
            'payment_request',
            'psu_id',
            'psu_corporate_id',
            'psu_ip_address',
            'raw'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_payment" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get('raw') is not None:  # noqa: E501
            _query_params.append(('raw', _params['raw']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['consent'] is not None:
            _header_params['consent'] = _params['consent']

        if _params['psu_id'] is not None:
            _header_params['psu-id'] = _params['psu_id']

        if _params['psu_corporate_id'] is not None:
            _header_params['psu-corporate-id'] = _params['psu_corporate_id']

        if _params['psu_ip_address'] is not None:
            _header_params['psu-ip-address'] = _params['psu_ip_address']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['payment_request'] is not None:
            _body_params = _params['payment_request']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;charset=UTF-8'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json;charset=UTF-8']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['basicAuth']  # noqa: E501

        _response_types_map = {
            '201': "ApiResponseOfPaymentResponse",
        }

        return self.api_client.call_api(
            '/payments', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def get_payments(self, payment_id : Annotated[StrictStr, Field(..., description="__Mandatory__. The payment Id of the payment.")], consent : Annotated[StrictStr, Field(..., description="__Mandatory__. The `consent-token` containing the user's authorisation to make the request.")], psu_id : Annotated[Optional[StrictStr], Field(description="__Conditional__. Represents the user's login ID for the `Institution` to a personal account. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required.")] = None, psu_corporate_id : Annotated[Optional[StrictStr], Field(description="__Conditional__. Represents the user's login ID for the `Institution` to a business account. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required.")] = None, psu_ip_address : Annotated[Optional[StrictStr], Field(description="__Conditional__. The IP address of the PSU. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required.")] = None, raw : Annotated[Optional[StrictBool], Field(description="__Optional__. Used to obtain the raw request and response to and from the <code>Institution</code>.")] = None, **kwargs) -> ApiResponseOfPaymentResponses:  # noqa: E501
        """Get Payment Details  # noqa: E501

        Returns the details of a payment. <br><br>Most commonly used to check for payment status updates. <br><br>Feature: `EXISTING_PAYMENTS_DETAILS`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_payments(payment_id, consent, psu_id, psu_corporate_id, psu_ip_address, raw, async_req=True)
        >>> result = thread.get()

        :param payment_id: __Mandatory__. The payment Id of the payment. (required)
        :type payment_id: str
        :param consent: __Mandatory__. The `consent-token` containing the user's authorisation to make the request. (required)
        :type consent: str
        :param psu_id: __Conditional__. Represents the user's login ID for the `Institution` to a personal account. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required.
        :type psu_id: str
        :param psu_corporate_id: __Conditional__. Represents the user's login ID for the `Institution` to a business account. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required.
        :type psu_corporate_id: str
        :param psu_ip_address: __Conditional__. The IP address of the PSU. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required.
        :type psu_ip_address: str
        :param raw: __Optional__. Used to obtain the raw request and response to and from the <code>Institution</code>.
        :type raw: bool
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ApiResponseOfPaymentResponses
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the get_payments_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.get_payments_with_http_info(payment_id, consent, psu_id, psu_corporate_id, psu_ip_address, raw, **kwargs)  # noqa: E501

    @validate_arguments
    def get_payments_with_http_info(self, payment_id : Annotated[StrictStr, Field(..., description="__Mandatory__. The payment Id of the payment.")], consent : Annotated[StrictStr, Field(..., description="__Mandatory__. The `consent-token` containing the user's authorisation to make the request.")], psu_id : Annotated[Optional[StrictStr], Field(description="__Conditional__. Represents the user's login ID for the `Institution` to a personal account. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required.")] = None, psu_corporate_id : Annotated[Optional[StrictStr], Field(description="__Conditional__. Represents the user's login ID for the `Institution` to a business account. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required.")] = None, psu_ip_address : Annotated[Optional[StrictStr], Field(description="__Conditional__. The IP address of the PSU. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required.")] = None, raw : Annotated[Optional[StrictBool], Field(description="__Optional__. Used to obtain the raw request and response to and from the <code>Institution</code>.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Get Payment Details  # noqa: E501

        Returns the details of a payment. <br><br>Most commonly used to check for payment status updates. <br><br>Feature: `EXISTING_PAYMENTS_DETAILS`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_payments_with_http_info(payment_id, consent, psu_id, psu_corporate_id, psu_ip_address, raw, async_req=True)
        >>> result = thread.get()

        :param payment_id: __Mandatory__. The payment Id of the payment. (required)
        :type payment_id: str
        :param consent: __Mandatory__. The `consent-token` containing the user's authorisation to make the request. (required)
        :type consent: str
        :param psu_id: __Conditional__. Represents the user's login ID for the `Institution` to a personal account. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required.
        :type psu_id: str
        :param psu_corporate_id: __Conditional__. Represents the user's login ID for the `Institution` to a business account. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required.
        :type psu_corporate_id: str
        :param psu_ip_address: __Conditional__. The IP address of the PSU. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required.
        :type psu_ip_address: str
        :param raw: __Optional__. Used to obtain the raw request and response to and from the <code>Institution</code>.
        :type raw: bool
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(ApiResponseOfPaymentResponses, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'payment_id',
            'consent',
            'psu_id',
            'psu_corporate_id',
            'psu_ip_address',
            'raw'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_payments" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['payment_id'] is not None:
            _path_params['paymentId'] = _params['payment_id']


        # process the query parameters
        _query_params = []
        if _params.get('raw') is not None:  # noqa: E501
            _query_params.append(('raw', _params['raw']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['consent'] is not None:
            _header_params['consent'] = _params['consent']

        if _params['psu_id'] is not None:
            _header_params['psu-id'] = _params['psu_id']

        if _params['psu_corporate_id'] is not None:
            _header_params['psu-corporate-id'] = _params['psu_corporate_id']

        if _params['psu_ip_address'] is not None:
            _header_params['psu-ip-address'] = _params['psu_ip_address']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;charset=UTF-8'])  # noqa: E501

        # authentication setting
        _auth_settings = ['basicAuth']  # noqa: E501

        _response_types_map = {
            '200': "ApiResponseOfPaymentResponses",
        }

        return self.api_client.call_api(
            '/payments/{paymentId}/details', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))
