# coding: utf-8

"""
    Yapily API

    The Yapily API enables connections between your application and users' banks. For more information check out our [documentation](https://docs.yapily.com/).<br><br>In particular, make sure to view our [Getting Started](https://docs.yapily.com/pages/home/getting-started/) steps if this is your first time here.<br><br>While testing the API, our list of [sandbox credentials](https://docs.yapily.com/pages/key-concepts/sandbox-credentials/) maybe useful.

    The version of the OpenAPI document: 2.13.1
    Contact: support@yapily.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import re  # noqa: F401
import io
import warnings

from pydantic import validate_arguments, ValidationError
from typing import overload, Optional, Union, Awaitable

from typing_extensions import Annotated
from pydantic import Field, StrictBool, StrictInt, StrictStr, conlist

from typing import Optional

from yapily.models.api_list_response_of_consent import ApiListResponseOfConsent
from yapily.models.api_response_of_consent import ApiResponseOfConsent
from yapily.models.api_response_of_consent_delete_response import ApiResponseOfConsentDeleteResponse
from yapily.models.consent import Consent
from yapily.models.consent_auth_code_request import ConsentAuthCodeRequest
from yapily.models.extend_consent_request import ExtendConsentRequest
from yapily.models.one_time_token_request import OneTimeTokenRequest

from yapily.api_client import ApiClient
from yapily.api_response import ApiResponse
from yapily.exceptions import (  # noqa: F401
    ApiTypeError,
    ApiValueError
)


class ConsentsApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client

    @overload
    async def create_consent_with_code(self, consent_auth_code_request : ConsentAuthCodeRequest, **kwargs) -> Consent:  # noqa: E501
        ...

    @overload
    def create_consent_with_code(self, consent_auth_code_request : ConsentAuthCodeRequest, async_req: Optional[bool]=True, **kwargs) -> Consent:  # noqa: E501
        ...

    @validate_arguments
    def create_consent_with_code(self, consent_auth_code_request : ConsentAuthCodeRequest, async_req: Optional[bool]=None, **kwargs) -> Union[Consent, Awaitable[Consent]]:  # noqa: E501
        """Exchange OAuth2 Code  # noqa: E501

        Used to obtain a Yapily Consent object containing the `consentToken` once the user has authenticated and you have an OAuth2 authorisation code `auth-code` and state `auth-state`.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_consent_with_code(consent_auth_code_request, async_req=True)
        >>> result = thread.get()

        :param consent_auth_code_request: (required)
        :type consent_auth_code_request: ConsentAuthCodeRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: Consent
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the create_consent_with_code_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        if async_req is not None:
            kwargs['async_req'] = async_req
        return self.create_consent_with_code_with_http_info(consent_auth_code_request, **kwargs)  # noqa: E501

    @validate_arguments
    def create_consent_with_code_with_http_info(self, consent_auth_code_request : ConsentAuthCodeRequest, **kwargs) -> ApiResponse:  # noqa: E501
        """Exchange OAuth2 Code  # noqa: E501

        Used to obtain a Yapily Consent object containing the `consentToken` once the user has authenticated and you have an OAuth2 authorisation code `auth-code` and state `auth-state`.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_consent_with_code_with_http_info(consent_auth_code_request, async_req=True)
        >>> result = thread.get()

        :param consent_auth_code_request: (required)
        :type consent_auth_code_request: ConsentAuthCodeRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(Consent, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'consent_auth_code_request'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_consent_with_code" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['consent_auth_code_request'] is not None:
            _body_params = _params['consent_auth_code_request']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;charset=UTF-8'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['basicAuth']  # noqa: E501

        _response_types_map = {
            '201': "Consent",
        }

        return self.api_client.call_api(
            '/consent-auth-code', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @overload
    async def delete(self, consent_id : Annotated[StrictStr, Field(..., description="__Mandatory__. The consent Id of the `Consent` to update.")], force_delete : Annotated[Optional[StrictBool], Field(description="__Optional__. Whether to force the deletion.")] = None, **kwargs) -> ApiResponseOfConsentDeleteResponse:  # noqa: E501
        ...

    @overload
    def delete(self, consent_id : Annotated[StrictStr, Field(..., description="__Mandatory__. The consent Id of the `Consent` to update.")], force_delete : Annotated[Optional[StrictBool], Field(description="__Optional__. Whether to force the deletion.")] = None, async_req: Optional[bool]=True, **kwargs) -> ApiResponseOfConsentDeleteResponse:  # noqa: E501
        ...

    @validate_arguments
    def delete(self, consent_id : Annotated[StrictStr, Field(..., description="__Mandatory__. The consent Id of the `Consent` to update.")], force_delete : Annotated[Optional[StrictBool], Field(description="__Optional__. Whether to force the deletion.")] = None, async_req: Optional[bool]=None, **kwargs) -> Union[ApiResponseOfConsentDeleteResponse, Awaitable[ApiResponseOfConsentDeleteResponse]]:  # noqa: E501
        """Delete Consent  # noqa: E501

        Delete a consent using the consent Id  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete(consent_id, force_delete, async_req=True)
        >>> result = thread.get()

        :param consent_id: __Mandatory__. The consent Id of the `Consent` to update. (required)
        :type consent_id: str
        :param force_delete: __Optional__. Whether to force the deletion.
        :type force_delete: bool
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ApiResponseOfConsentDeleteResponse
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the delete_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        if async_req is not None:
            kwargs['async_req'] = async_req
        return self.delete_with_http_info(consent_id, force_delete, **kwargs)  # noqa: E501

    @validate_arguments
    def delete_with_http_info(self, consent_id : Annotated[StrictStr, Field(..., description="__Mandatory__. The consent Id of the `Consent` to update.")], force_delete : Annotated[Optional[StrictBool], Field(description="__Optional__. Whether to force the deletion.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Delete Consent  # noqa: E501

        Delete a consent using the consent Id  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_with_http_info(consent_id, force_delete, async_req=True)
        >>> result = thread.get()

        :param consent_id: __Mandatory__. The consent Id of the `Consent` to update. (required)
        :type consent_id: str
        :param force_delete: __Optional__. Whether to force the deletion.
        :type force_delete: bool
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(ApiResponseOfConsentDeleteResponse, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'consent_id',
            'force_delete'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['consent_id']:
            _path_params['consentId'] = _params['consent_id']


        # process the query parameters
        _query_params = []
        if _params.get('force_delete') is not None:  # noqa: E501
            _query_params.append(('forceDelete', _params['force_delete']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;charset=UTF-8'])  # noqa: E501

        # authentication setting
        _auth_settings = ['basicAuth']  # noqa: E501

        _response_types_map = {
            '200': "ApiResponseOfConsentDeleteResponse",
        }

        return self.api_client.call_api(
            '/consents/{consentId}', 'DELETE',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @overload
    async def extend_consent(self, consent_id : Annotated[StrictStr, Field(..., description="__Mandatory__. The consent Id of the `Consent` to update.")], extend_consent_request : ExtendConsentRequest, **kwargs) -> ApiResponseOfConsent:  # noqa: E501
        ...

    @overload
    def extend_consent(self, consent_id : Annotated[StrictStr, Field(..., description="__Mandatory__. The consent Id of the `Consent` to update.")], extend_consent_request : ExtendConsentRequest, async_req: Optional[bool]=True, **kwargs) -> ApiResponseOfConsent:  # noqa: E501
        ...

    @validate_arguments
    def extend_consent(self, consent_id : Annotated[StrictStr, Field(..., description="__Mandatory__. The consent Id of the `Consent` to update.")], extend_consent_request : ExtendConsentRequest, async_req: Optional[bool]=None, **kwargs) -> Union[ApiResponseOfConsent, Awaitable[ApiResponseOfConsent]]:  # noqa: E501
        """Extend Consent  # noqa: E501

        Used to indicate to Yapily that reconfirmation has occurred for a given Consent, and to update lastUpdatedAt and reconfirmBy for that Consent. Returns the Consent.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.extend_consent(consent_id, extend_consent_request, async_req=True)
        >>> result = thread.get()

        :param consent_id: __Mandatory__. The consent Id of the `Consent` to update. (required)
        :type consent_id: str
        :param extend_consent_request: (required)
        :type extend_consent_request: ExtendConsentRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ApiResponseOfConsent
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the extend_consent_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        if async_req is not None:
            kwargs['async_req'] = async_req
        return self.extend_consent_with_http_info(consent_id, extend_consent_request, **kwargs)  # noqa: E501

    @validate_arguments
    def extend_consent_with_http_info(self, consent_id : Annotated[StrictStr, Field(..., description="__Mandatory__. The consent Id of the `Consent` to update.")], extend_consent_request : ExtendConsentRequest, **kwargs) -> ApiResponse:  # noqa: E501
        """Extend Consent  # noqa: E501

        Used to indicate to Yapily that reconfirmation has occurred for a given Consent, and to update lastUpdatedAt and reconfirmBy for that Consent. Returns the Consent.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.extend_consent_with_http_info(consent_id, extend_consent_request, async_req=True)
        >>> result = thread.get()

        :param consent_id: __Mandatory__. The consent Id of the `Consent` to update. (required)
        :type consent_id: str
        :param extend_consent_request: (required)
        :type extend_consent_request: ExtendConsentRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(ApiResponseOfConsent, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'consent_id',
            'extend_consent_request'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method extend_consent" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['consent_id']:
            _path_params['consentId'] = _params['consent_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['extend_consent_request'] is not None:
            _body_params = _params['extend_consent_request']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;charset=UTF-8'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json;charset=UTF-8']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['basicAuth']  # noqa: E501

        _response_types_map = {
            '200': "ApiResponseOfConsent",
            '400': "ApiErrorResponse",
        }

        return self.api_client.call_api(
            '/consents/{consentId}/extend', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @overload
    async def get_consent_by_id(self, consent_id : Annotated[StrictStr, Field(..., description="__Mandatory__. The consent Id of the `Consent` to update.")], **kwargs) -> ApiResponseOfConsent:  # noqa: E501
        ...

    @overload
    def get_consent_by_id(self, consent_id : Annotated[StrictStr, Field(..., description="__Mandatory__. The consent Id of the `Consent` to update.")], async_req: Optional[bool]=True, **kwargs) -> ApiResponseOfConsent:  # noqa: E501
        ...

    @validate_arguments
    def get_consent_by_id(self, consent_id : Annotated[StrictStr, Field(..., description="__Mandatory__. The consent Id of the `Consent` to update.")], async_req: Optional[bool]=None, **kwargs) -> Union[ApiResponseOfConsent, Awaitable[ApiResponseOfConsent]]:  # noqa: E501
        """Get Consent  # noqa: E501

        Get consent using the consent Id  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_consent_by_id(consent_id, async_req=True)
        >>> result = thread.get()

        :param consent_id: __Mandatory__. The consent Id of the `Consent` to update. (required)
        :type consent_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ApiResponseOfConsent
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the get_consent_by_id_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        if async_req is not None:
            kwargs['async_req'] = async_req
        return self.get_consent_by_id_with_http_info(consent_id, **kwargs)  # noqa: E501

    @validate_arguments
    def get_consent_by_id_with_http_info(self, consent_id : Annotated[StrictStr, Field(..., description="__Mandatory__. The consent Id of the `Consent` to update.")], **kwargs) -> ApiResponse:  # noqa: E501
        """Get Consent  # noqa: E501

        Get consent using the consent Id  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_consent_by_id_with_http_info(consent_id, async_req=True)
        >>> result = thread.get()

        :param consent_id: __Mandatory__. The consent Id of the `Consent` to update. (required)
        :type consent_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(ApiResponseOfConsent, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'consent_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_consent_by_id" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['consent_id']:
            _path_params['consentId'] = _params['consent_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;charset=UTF-8'])  # noqa: E501

        # authentication setting
        _auth_settings = ['basicAuth']  # noqa: E501

        _response_types_map = {
            '200': "ApiResponseOfConsent",
        }

        return self.api_client.call_api(
            '/consents/{consentId}', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @overload
    async def get_consent_by_single_access_consent(self, one_time_token_request : OneTimeTokenRequest, **kwargs) -> Consent:  # noqa: E501
        ...

    @overload
    def get_consent_by_single_access_consent(self, one_time_token_request : OneTimeTokenRequest, async_req: Optional[bool]=True, **kwargs) -> Consent:  # noqa: E501
        ...

    @validate_arguments
    def get_consent_by_single_access_consent(self, one_time_token_request : OneTimeTokenRequest, async_req: Optional[bool]=None, **kwargs) -> Union[Consent, Awaitable[Consent]]:  # noqa: E501
        """Exchange One Time Token  # noqa: E501

        Exchange a One-time-token for the consent token  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_consent_by_single_access_consent(one_time_token_request, async_req=True)
        >>> result = thread.get()

        :param one_time_token_request: (required)
        :type one_time_token_request: OneTimeTokenRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: Consent
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the get_consent_by_single_access_consent_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        if async_req is not None:
            kwargs['async_req'] = async_req
        return self.get_consent_by_single_access_consent_with_http_info(one_time_token_request, **kwargs)  # noqa: E501

    @validate_arguments
    def get_consent_by_single_access_consent_with_http_info(self, one_time_token_request : OneTimeTokenRequest, **kwargs) -> ApiResponse:  # noqa: E501
        """Exchange One Time Token  # noqa: E501

        Exchange a One-time-token for the consent token  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_consent_by_single_access_consent_with_http_info(one_time_token_request, async_req=True)
        >>> result = thread.get()

        :param one_time_token_request: (required)
        :type one_time_token_request: OneTimeTokenRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(Consent, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'one_time_token_request'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_consent_by_single_access_consent" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['one_time_token_request'] is not None:
            _body_params = _params['one_time_token_request']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;charset=UTF-8'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['basicAuth']  # noqa: E501

        _response_types_map = {
            '201': "Consent",
        }

        return self.api_client.call_api(
            '/consent-one-time-token', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @overload
    async def get_consents(self, filter_application_user_id : Annotated[Optional[conlist(StrictStr, unique_items=True)], Field(description="__Optional__. Filter records based on the list of `applicationUserId` users provided.")] = None, filter_user_uuid : Annotated[Optional[conlist(StrictStr, unique_items=True)], Field(description="__Optional__. Filter records based on the list of `userUuid` users provided.")] = None, filter_institution : Annotated[Optional[conlist(StrictStr, unique_items=True)], Field(description="__Optional__. Filter records based on the list of `Institution` provided.")] = None, filter_status : Annotated[Optional[conlist(StrictStr, unique_items=True)], Field(description="__Optional__. Filter records based on the list of `Consent` [statuses](https://docs.yapily.com/api/reference/#operation/getConsents!c=200&path=data/status&t=response).")] = None, var_from : Annotated[Optional[StrictStr], Field(description="__Optional__. Returned transactions will be on or after this date (yyyy-MM-dd'T'HH:mm:ss.SSSZ). ")] = None, before : Annotated[Optional[StrictStr], Field(description="__Optional__. Returned transactions will be on or before this date (yyyy-MM-dd'T'HH:mm:ss.SSSZ).")] = None, limit : Annotated[Optional[StrictInt], Field(description="__Optional__. The maximum number of transaction records to be returned. Must be between 0 and 1000.")] = None, offset : Annotated[Optional[StrictInt], Field(description="__Optional__. The number of transaction records to be skipped. Used primarily with paginated results.")] = None, **kwargs) -> ApiListResponseOfConsent:  # noqa: E501
        ...

    @overload
    def get_consents(self, filter_application_user_id : Annotated[Optional[conlist(StrictStr, unique_items=True)], Field(description="__Optional__. Filter records based on the list of `applicationUserId` users provided.")] = None, filter_user_uuid : Annotated[Optional[conlist(StrictStr, unique_items=True)], Field(description="__Optional__. Filter records based on the list of `userUuid` users provided.")] = None, filter_institution : Annotated[Optional[conlist(StrictStr, unique_items=True)], Field(description="__Optional__. Filter records based on the list of `Institution` provided.")] = None, filter_status : Annotated[Optional[conlist(StrictStr, unique_items=True)], Field(description="__Optional__. Filter records based on the list of `Consent` [statuses](https://docs.yapily.com/api/reference/#operation/getConsents!c=200&path=data/status&t=response).")] = None, var_from : Annotated[Optional[StrictStr], Field(description="__Optional__. Returned transactions will be on or after this date (yyyy-MM-dd'T'HH:mm:ss.SSSZ). ")] = None, before : Annotated[Optional[StrictStr], Field(description="__Optional__. Returned transactions will be on or before this date (yyyy-MM-dd'T'HH:mm:ss.SSSZ).")] = None, limit : Annotated[Optional[StrictInt], Field(description="__Optional__. The maximum number of transaction records to be returned. Must be between 0 and 1000.")] = None, offset : Annotated[Optional[StrictInt], Field(description="__Optional__. The number of transaction records to be skipped. Used primarily with paginated results.")] = None, async_req: Optional[bool]=True, **kwargs) -> ApiListResponseOfConsent:  # noqa: E501
        ...

    @validate_arguments
    def get_consents(self, filter_application_user_id : Annotated[Optional[conlist(StrictStr, unique_items=True)], Field(description="__Optional__. Filter records based on the list of `applicationUserId` users provided.")] = None, filter_user_uuid : Annotated[Optional[conlist(StrictStr, unique_items=True)], Field(description="__Optional__. Filter records based on the list of `userUuid` users provided.")] = None, filter_institution : Annotated[Optional[conlist(StrictStr, unique_items=True)], Field(description="__Optional__. Filter records based on the list of `Institution` provided.")] = None, filter_status : Annotated[Optional[conlist(StrictStr, unique_items=True)], Field(description="__Optional__. Filter records based on the list of `Consent` [statuses](https://docs.yapily.com/api/reference/#operation/getConsents!c=200&path=data/status&t=response).")] = None, var_from : Annotated[Optional[StrictStr], Field(description="__Optional__. Returned transactions will be on or after this date (yyyy-MM-dd'T'HH:mm:ss.SSSZ). ")] = None, before : Annotated[Optional[StrictStr], Field(description="__Optional__. Returned transactions will be on or before this date (yyyy-MM-dd'T'HH:mm:ss.SSSZ).")] = None, limit : Annotated[Optional[StrictInt], Field(description="__Optional__. The maximum number of transaction records to be returned. Must be between 0 and 1000.")] = None, offset : Annotated[Optional[StrictInt], Field(description="__Optional__. The number of transaction records to be skipped. Used primarily with paginated results.")] = None, async_req: Optional[bool]=None, **kwargs) -> Union[ApiListResponseOfConsent, Awaitable[ApiListResponseOfConsent]]:  # noqa: E501
        """Get Consents  # noqa: E501

        Used to retrieve all the consents created for each user within an application  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_consents(filter_application_user_id, filter_user_uuid, filter_institution, filter_status, var_from, before, limit, offset, async_req=True)
        >>> result = thread.get()

        :param filter_application_user_id: __Optional__. Filter records based on the list of `applicationUserId` users provided.
        :type filter_application_user_id: List[str]
        :param filter_user_uuid: __Optional__. Filter records based on the list of `userUuid` users provided.
        :type filter_user_uuid: List[str]
        :param filter_institution: __Optional__. Filter records based on the list of `Institution` provided.
        :type filter_institution: List[str]
        :param filter_status: __Optional__. Filter records based on the list of `Consent` [statuses](https://docs.yapily.com/api/reference/#operation/getConsents!c=200&path=data/status&t=response).
        :type filter_status: List[str]
        :param var_from: __Optional__. Returned transactions will be on or after this date (yyyy-MM-dd'T'HH:mm:ss.SSSZ). 
        :type var_from: str
        :param before: __Optional__. Returned transactions will be on or before this date (yyyy-MM-dd'T'HH:mm:ss.SSSZ).
        :type before: str
        :param limit: __Optional__. The maximum number of transaction records to be returned. Must be between 0 and 1000.
        :type limit: int
        :param offset: __Optional__. The number of transaction records to be skipped. Used primarily with paginated results.
        :type offset: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ApiListResponseOfConsent
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the get_consents_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        if async_req is not None:
            kwargs['async_req'] = async_req
        return self.get_consents_with_http_info(filter_application_user_id, filter_user_uuid, filter_institution, filter_status, var_from, before, limit, offset, **kwargs)  # noqa: E501

    @validate_arguments
    def get_consents_with_http_info(self, filter_application_user_id : Annotated[Optional[conlist(StrictStr, unique_items=True)], Field(description="__Optional__. Filter records based on the list of `applicationUserId` users provided.")] = None, filter_user_uuid : Annotated[Optional[conlist(StrictStr, unique_items=True)], Field(description="__Optional__. Filter records based on the list of `userUuid` users provided.")] = None, filter_institution : Annotated[Optional[conlist(StrictStr, unique_items=True)], Field(description="__Optional__. Filter records based on the list of `Institution` provided.")] = None, filter_status : Annotated[Optional[conlist(StrictStr, unique_items=True)], Field(description="__Optional__. Filter records based on the list of `Consent` [statuses](https://docs.yapily.com/api/reference/#operation/getConsents!c=200&path=data/status&t=response).")] = None, var_from : Annotated[Optional[StrictStr], Field(description="__Optional__. Returned transactions will be on or after this date (yyyy-MM-dd'T'HH:mm:ss.SSSZ). ")] = None, before : Annotated[Optional[StrictStr], Field(description="__Optional__. Returned transactions will be on or before this date (yyyy-MM-dd'T'HH:mm:ss.SSSZ).")] = None, limit : Annotated[Optional[StrictInt], Field(description="__Optional__. The maximum number of transaction records to be returned. Must be between 0 and 1000.")] = None, offset : Annotated[Optional[StrictInt], Field(description="__Optional__. The number of transaction records to be skipped. Used primarily with paginated results.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Get Consents  # noqa: E501

        Used to retrieve all the consents created for each user within an application  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_consents_with_http_info(filter_application_user_id, filter_user_uuid, filter_institution, filter_status, var_from, before, limit, offset, async_req=True)
        >>> result = thread.get()

        :param filter_application_user_id: __Optional__. Filter records based on the list of `applicationUserId` users provided.
        :type filter_application_user_id: List[str]
        :param filter_user_uuid: __Optional__. Filter records based on the list of `userUuid` users provided.
        :type filter_user_uuid: List[str]
        :param filter_institution: __Optional__. Filter records based on the list of `Institution` provided.
        :type filter_institution: List[str]
        :param filter_status: __Optional__. Filter records based on the list of `Consent` [statuses](https://docs.yapily.com/api/reference/#operation/getConsents!c=200&path=data/status&t=response).
        :type filter_status: List[str]
        :param var_from: __Optional__. Returned transactions will be on or after this date (yyyy-MM-dd'T'HH:mm:ss.SSSZ). 
        :type var_from: str
        :param before: __Optional__. Returned transactions will be on or before this date (yyyy-MM-dd'T'HH:mm:ss.SSSZ).
        :type before: str
        :param limit: __Optional__. The maximum number of transaction records to be returned. Must be between 0 and 1000.
        :type limit: int
        :param offset: __Optional__. The number of transaction records to be skipped. Used primarily with paginated results.
        :type offset: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(ApiListResponseOfConsent, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'filter_application_user_id',
            'filter_user_uuid',
            'filter_institution',
            'filter_status',
            'var_from',
            'before',
            'limit',
            'offset'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_consents" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get('filter_application_user_id') is not None:  # noqa: E501
            _query_params.append(('filter[applicationUserId]', _params['filter_application_user_id']))
            _collection_formats['filter[applicationUserId]'] = 'multi'

        if _params.get('filter_user_uuid') is not None:  # noqa: E501
            _query_params.append(('filter[userUuid]', _params['filter_user_uuid']))
            _collection_formats['filter[userUuid]'] = 'multi'

        if _params.get('filter_institution') is not None:  # noqa: E501
            _query_params.append(('filter[institution]', _params['filter_institution']))
            _collection_formats['filter[institution]'] = 'multi'

        if _params.get('filter_status') is not None:  # noqa: E501
            _query_params.append(('filter[status]', _params['filter_status']))
            _collection_formats['filter[status]'] = 'multi'

        if _params.get('var_from') is not None:  # noqa: E501
            _query_params.append(('from', _params['var_from']))

        if _params.get('before') is not None:  # noqa: E501
            _query_params.append(('before', _params['before']))

        if _params.get('limit') is not None:  # noqa: E501
            _query_params.append(('limit', _params['limit']))

        if _params.get('offset') is not None:  # noqa: E501
            _query_params.append(('offset', _params['offset']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;charset=UTF-8'])  # noqa: E501

        # authentication setting
        _auth_settings = ['basicAuth']  # noqa: E501

        _response_types_map = {
            '200': "ApiListResponseOfConsent",
        }

        return self.api_client.call_api(
            '/consents', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))
