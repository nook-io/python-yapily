# coding: utf-8

"""
    Yapily API

    The Yapily API enables connections between your application and users' banks. For more information check out our [documentation](https://docs.yapily.com/).<br><br>In particular, make sure to view our [Getting Started](https://docs.yapily.com/pages/home/getting-started/) steps if this is your first time here.<br><br>While testing the API, our list of [sandbox credentials](https://docs.yapily.com/pages/key-concepts/sandbox-credentials/) maybe useful.  # noqa: E501

    The version of the OpenAPI document: 2.13.1
    Contact: support@yapily.com
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from yapily.api_client import ApiClient
from yapily.exceptions import (  # noqa: F401
    ApiTypeError,
    ApiValueError
)


class VirtualAccountsApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def create_virtual_account(self, client_id, virtual_account_request, **kwargs):  # noqa: E501
        """Create Account  # noqa: E501

        Create a new virtual account  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_virtual_account(client_id, virtual_account_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str client_id: __Mandatory__. The customer or sub-customer id for which the request will be done (required)
        :param VirtualAccountRequest virtual_account_request: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ApiResponseOfVirtualAccount
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.create_virtual_account_with_http_info(client_id, virtual_account_request, **kwargs)  # noqa: E501

    def create_virtual_account_with_http_info(self, client_id, virtual_account_request, **kwargs):  # noqa: E501
        """Create Account  # noqa: E501

        Create a new virtual account  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_virtual_account_with_http_info(client_id, virtual_account_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str client_id: __Mandatory__. The customer or sub-customer id for which the request will be done (required)
        :param VirtualAccountRequest virtual_account_request: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ApiResponseOfVirtualAccount, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'client_id',
            'virtual_account_request'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_virtual_account" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'client_id' is set
        if self.api_client.client_side_validation and ('client_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['client_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `client_id` when calling `create_virtual_account`")  # noqa: E501
        # verify the required parameter 'virtual_account_request' is set
        if self.api_client.client_side_validation and ('virtual_account_request' not in local_var_params or  # noqa: E501
                                                        local_var_params['virtual_account_request'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `virtual_account_request` when calling `create_virtual_account`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'client_id' in local_var_params:
            header_params['client-id'] = local_var_params['client_id']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'virtual_account_request' in local_var_params:
            body_params = local_var_params['virtual_account_request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json;charset=UTF-8'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/virtual-accounts/accounts', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ApiResponseOfVirtualAccount',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_virtual_account_beneficiary(self, client_id, virtual_account_beneficiary_request, **kwargs):  # noqa: E501
        """Create Beneficiary  # noqa: E501

        Create a new beneficiary (individual or business account) to which a Pay Out can be made. The beneficiary can be used from any virtual account that is held  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_virtual_account_beneficiary(client_id, virtual_account_beneficiary_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str client_id: __Mandatory__. The customer or sub-customer id for which the request will be done (required)
        :param VirtualAccountBeneficiaryRequest virtual_account_beneficiary_request: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ApiResponseOfVirtualAccountBeneficiary
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.create_virtual_account_beneficiary_with_http_info(client_id, virtual_account_beneficiary_request, **kwargs)  # noqa: E501

    def create_virtual_account_beneficiary_with_http_info(self, client_id, virtual_account_beneficiary_request, **kwargs):  # noqa: E501
        """Create Beneficiary  # noqa: E501

        Create a new beneficiary (individual or business account) to which a Pay Out can be made. The beneficiary can be used from any virtual account that is held  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_virtual_account_beneficiary_with_http_info(client_id, virtual_account_beneficiary_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str client_id: __Mandatory__. The customer or sub-customer id for which the request will be done (required)
        :param VirtualAccountBeneficiaryRequest virtual_account_beneficiary_request: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ApiResponseOfVirtualAccountBeneficiary, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'client_id',
            'virtual_account_beneficiary_request'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_virtual_account_beneficiary" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'client_id' is set
        if self.api_client.client_side_validation and ('client_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['client_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `client_id` when calling `create_virtual_account_beneficiary`")  # noqa: E501
        # verify the required parameter 'virtual_account_beneficiary_request' is set
        if self.api_client.client_side_validation and ('virtual_account_beneficiary_request' not in local_var_params or  # noqa: E501
                                                        local_var_params['virtual_account_beneficiary_request'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `virtual_account_beneficiary_request` when calling `create_virtual_account_beneficiary`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'client_id' in local_var_params:
            header_params['client-id'] = local_var_params['client_id']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'virtual_account_beneficiary_request' in local_var_params:
            body_params = local_var_params['virtual_account_beneficiary_request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json;charset=UTF-8'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/virtual-accounts/beneficiaries', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ApiResponseOfVirtualAccountBeneficiary',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_virtual_account_client(self, client_id, virtual_account_client_request, **kwargs):  # noqa: E501
        """Create Virtual Account Client  # noqa: E501

        Create a new virtual account client (individual or business client). Available for clients who have direct onboarding permissions only. Please contact your CSM to enquire about access  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_virtual_account_client(client_id, virtual_account_client_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str client_id: __Mandatory__. This must be your master / parent client-id (and not one associated with one of your clients) (required)
        :param VirtualAccountClientRequest virtual_account_client_request: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ApiResponseOfVirtualAccountClient
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.create_virtual_account_client_with_http_info(client_id, virtual_account_client_request, **kwargs)  # noqa: E501

    def create_virtual_account_client_with_http_info(self, client_id, virtual_account_client_request, **kwargs):  # noqa: E501
        """Create Virtual Account Client  # noqa: E501

        Create a new virtual account client (individual or business client). Available for clients who have direct onboarding permissions only. Please contact your CSM to enquire about access  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_virtual_account_client_with_http_info(client_id, virtual_account_client_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str client_id: __Mandatory__. This must be your master / parent client-id (and not one associated with one of your clients) (required)
        :param VirtualAccountClientRequest virtual_account_client_request: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ApiResponseOfVirtualAccountClient, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'client_id',
            'virtual_account_client_request'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_virtual_account_client" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'client_id' is set
        if self.api_client.client_side_validation and ('client_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['client_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `client_id` when calling `create_virtual_account_client`")  # noqa: E501
        # verify the required parameter 'virtual_account_client_request' is set
        if self.api_client.client_side_validation and ('virtual_account_client_request' not in local_var_params or  # noqa: E501
                                                        local_var_params['virtual_account_client_request'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `virtual_account_client_request` when calling `create_virtual_account_client`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'client_id' in local_var_params:
            header_params['client-id'] = local_var_params['client_id']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'virtual_account_client_request' in local_var_params:
            body_params = local_var_params['virtual_account_client_request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json;charset=UTF-8'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/virtual-accounts/clients', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ApiResponseOfVirtualAccountClient',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_virtual_account_pay_out(self, idempotency_key, client_id, virtual_account_pay_out_request, **kwargs):  # noqa: E501
        """Create Pay Out  # noqa: E501

        Initiate a payment from a specified virtual account to a previously added beneficiary using any of the schemes that it supports <br> When subscribed to virtualAccount.payOut.status notifications, further updates on payment processing status will be develivered asynchronously   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_virtual_account_pay_out(idempotency_key, client_id, virtual_account_pay_out_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str idempotency_key: Uniquely identifies a request, such that requests made with a same value are considered retries <br> We recommend that a v4 UUID is supplied  (required)
        :param str client_id: __Mandatory__. The customer or sub-customer id for which the request will be done (required)
        :param VirtualAccountPayOutRequest virtual_account_pay_out_request: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ApiResponseOfVirtualAccountPayment
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.create_virtual_account_pay_out_with_http_info(idempotency_key, client_id, virtual_account_pay_out_request, **kwargs)  # noqa: E501

    def create_virtual_account_pay_out_with_http_info(self, idempotency_key, client_id, virtual_account_pay_out_request, **kwargs):  # noqa: E501
        """Create Pay Out  # noqa: E501

        Initiate a payment from a specified virtual account to a previously added beneficiary using any of the schemes that it supports <br> When subscribed to virtualAccount.payOut.status notifications, further updates on payment processing status will be develivered asynchronously   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_virtual_account_pay_out_with_http_info(idempotency_key, client_id, virtual_account_pay_out_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str idempotency_key: Uniquely identifies a request, such that requests made with a same value are considered retries <br> We recommend that a v4 UUID is supplied  (required)
        :param str client_id: __Mandatory__. The customer or sub-customer id for which the request will be done (required)
        :param VirtualAccountPayOutRequest virtual_account_pay_out_request: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ApiResponseOfVirtualAccountPayment, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'idempotency_key',
            'client_id',
            'virtual_account_pay_out_request'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_virtual_account_pay_out" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'idempotency_key' is set
        if self.api_client.client_side_validation and ('idempotency_key' not in local_var_params or  # noqa: E501
                                                        local_var_params['idempotency_key'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `idempotency_key` when calling `create_virtual_account_pay_out`")  # noqa: E501
        # verify the required parameter 'client_id' is set
        if self.api_client.client_side_validation and ('client_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['client_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `client_id` when calling `create_virtual_account_pay_out`")  # noqa: E501
        # verify the required parameter 'virtual_account_pay_out_request' is set
        if self.api_client.client_side_validation and ('virtual_account_pay_out_request' not in local_var_params or  # noqa: E501
                                                        local_var_params['virtual_account_pay_out_request'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `virtual_account_pay_out_request` when calling `create_virtual_account_pay_out`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'idempotency_key' in local_var_params:
            header_params['idempotency-key'] = local_var_params['idempotency_key']  # noqa: E501
        if 'client_id' in local_var_params:
            header_params['client-id'] = local_var_params['client_id']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'virtual_account_pay_out_request' in local_var_params:
            body_params = local_var_params['virtual_account_pay_out_request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json;charset=UTF-8'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/virtual-accounts/payments/pay-outs', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ApiResponseOfVirtualAccountPayment',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_virtual_account_transfer(self, idempotency_key, client_id, virtual_account_transfer_request, **kwargs):  # noqa: E501
        """Create Virtual Account Transfer  # noqa: E501

        Create a transfer between two virtual accounts  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_virtual_account_transfer(idempotency_key, client_id, virtual_account_transfer_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str idempotency_key: Uniquely identifies a request, such that requests made with a same value are considered retries <br> We recommend that a v4 UUID is supplied  (required)
        :param str client_id: __Mandatory__. The customer or sub-customer id for which the request will be done (required)
        :param VirtualAccountTransferRequest virtual_account_transfer_request: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ApiResponseOfVirtualAccountPayment
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.create_virtual_account_transfer_with_http_info(idempotency_key, client_id, virtual_account_transfer_request, **kwargs)  # noqa: E501

    def create_virtual_account_transfer_with_http_info(self, idempotency_key, client_id, virtual_account_transfer_request, **kwargs):  # noqa: E501
        """Create Virtual Account Transfer  # noqa: E501

        Create a transfer between two virtual accounts  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_virtual_account_transfer_with_http_info(idempotency_key, client_id, virtual_account_transfer_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str idempotency_key: Uniquely identifies a request, such that requests made with a same value are considered retries <br> We recommend that a v4 UUID is supplied  (required)
        :param str client_id: __Mandatory__. The customer or sub-customer id for which the request will be done (required)
        :param VirtualAccountTransferRequest virtual_account_transfer_request: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ApiResponseOfVirtualAccountPayment, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'idempotency_key',
            'client_id',
            'virtual_account_transfer_request'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_virtual_account_transfer" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'idempotency_key' is set
        if self.api_client.client_side_validation and ('idempotency_key' not in local_var_params or  # noqa: E501
                                                        local_var_params['idempotency_key'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `idempotency_key` when calling `create_virtual_account_transfer`")  # noqa: E501
        # verify the required parameter 'client_id' is set
        if self.api_client.client_side_validation and ('client_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['client_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `client_id` when calling `create_virtual_account_transfer`")  # noqa: E501
        # verify the required parameter 'virtual_account_transfer_request' is set
        if self.api_client.client_side_validation and ('virtual_account_transfer_request' not in local_var_params or  # noqa: E501
                                                        local_var_params['virtual_account_transfer_request'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `virtual_account_transfer_request` when calling `create_virtual_account_transfer`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'idempotency_key' in local_var_params:
            header_params['idempotency-key'] = local_var_params['idempotency_key']  # noqa: E501
        if 'client_id' in local_var_params:
            header_params['client-id'] = local_var_params['client_id']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'virtual_account_transfer_request' in local_var_params:
            body_params = local_var_params['virtual_account_transfer_request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json;charset=UTF-8'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/virtual-accounts/payments/transfers', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ApiResponseOfVirtualAccountPayment',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_pay_in_details(self, payment_id, **kwargs):  # noqa: E501
        """Get Pay-In Details  # noqa: E501

        Get the details of a pay-in transaction  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_pay_in_details(payment_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str payment_id: Uniquely identifies a transaction (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ApiResponseOfVirtualAccountPayInDetails
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_pay_in_details_with_http_info(payment_id, **kwargs)  # noqa: E501

    def get_pay_in_details_with_http_info(self, payment_id, **kwargs):  # noqa: E501
        """Get Pay-In Details  # noqa: E501

        Get the details of a pay-in transaction  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_pay_in_details_with_http_info(payment_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str payment_id: Uniquely identifies a transaction (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ApiResponseOfVirtualAccountPayInDetails, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'payment_id'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_pay_in_details" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'payment_id' is set
        if self.api_client.client_side_validation and ('payment_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['payment_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `payment_id` when calling `get_pay_in_details`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'payment_id' in local_var_params:
            path_params['paymentId'] = local_var_params['payment_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/virtual-accounts/payments/{paymentId}/pay-in-details', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ApiResponseOfVirtualAccountPayInDetails',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_payments_by_id(self, id, client_id, **kwargs):  # noqa: E501
        """Get Payment  # noqa: E501

        Get the details of a specific payment using its Id  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_payments_by_id(id, client_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: __Mandatory__. The id of the payment (required)
        :param str client_id: __Mandatory__. The customer or sub-customer id for which the request will be done (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ApiResponseOfVirtualAccountPayment
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_payments_by_id_with_http_info(id, client_id, **kwargs)  # noqa: E501

    def get_payments_by_id_with_http_info(self, id, client_id, **kwargs):  # noqa: E501
        """Get Payment  # noqa: E501

        Get the details of a specific payment using its Id  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_payments_by_id_with_http_info(id, client_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str id: __Mandatory__. The id of the payment (required)
        :param str client_id: __Mandatory__. The customer or sub-customer id for which the request will be done (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ApiResponseOfVirtualAccountPayment, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'id',
            'client_id'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_payments_by_id" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in local_var_params or  # noqa: E501
                                                        local_var_params['id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `id` when calling `get_payments_by_id`")  # noqa: E501
        # verify the required parameter 'client_id' is set
        if self.api_client.client_side_validation and ('client_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['client_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `client_id` when calling `get_payments_by_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'client_id' in local_var_params:
            header_params['client-id'] = local_var_params['client_id']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/virtual-accounts/payments/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ApiResponseOfVirtualAccountPayment',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_virtual_account_beneficiaries(self, client_id, **kwargs):  # noqa: E501
        """Get List Of Beneficiaries  # noqa: E501

        Gets the list of beneficiaries (individual or business account) to which a Pay Out can be made.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_virtual_account_beneficiaries(client_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str client_id: __Mandatory__. The customer or sub-customer id for which the request will be done (required)
        :param str cursor: __Optional__. Data required to provide pagination
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ApiListResponseOfVirtualAccountBeneficiary
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_virtual_account_beneficiaries_with_http_info(client_id, **kwargs)  # noqa: E501

    def get_virtual_account_beneficiaries_with_http_info(self, client_id, **kwargs):  # noqa: E501
        """Get List Of Beneficiaries  # noqa: E501

        Gets the list of beneficiaries (individual or business account) to which a Pay Out can be made.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_virtual_account_beneficiaries_with_http_info(client_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str client_id: __Mandatory__. The customer or sub-customer id for which the request will be done (required)
        :param str cursor: __Optional__. Data required to provide pagination
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ApiListResponseOfVirtualAccountBeneficiary, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'client_id',
            'cursor'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_virtual_account_beneficiaries" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'client_id' is set
        if self.api_client.client_side_validation and ('client_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['client_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `client_id` when calling `get_virtual_account_beneficiaries`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'cursor' in local_var_params and local_var_params['cursor'] is not None:  # noqa: E501
            query_params.append(('cursor', local_var_params['cursor']))  # noqa: E501

        header_params = {}
        if 'client_id' in local_var_params:
            header_params['client-id'] = local_var_params['client_id']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/virtual-accounts/beneficiaries', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ApiListResponseOfVirtualAccountBeneficiary',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_virtual_account_beneficiary(self, beneficiary_id, client_id, **kwargs):  # noqa: E501
        """Get Beneficiary  # noqa: E501

        Get the details of a specific beneficiary (individual or business account) to which a Pay Out can be made from its id.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_virtual_account_beneficiary(beneficiary_id, client_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str beneficiary_id: __Mandatory__. The Id of the requested beneficiary. (required)
        :param str client_id: __Mandatory__. The customer or sub-customer id for which the request will be done (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ApiResponseOfVirtualAccountBeneficiary
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_virtual_account_beneficiary_with_http_info(beneficiary_id, client_id, **kwargs)  # noqa: E501

    def get_virtual_account_beneficiary_with_http_info(self, beneficiary_id, client_id, **kwargs):  # noqa: E501
        """Get Beneficiary  # noqa: E501

        Get the details of a specific beneficiary (individual or business account) to which a Pay Out can be made from its id.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_virtual_account_beneficiary_with_http_info(beneficiary_id, client_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str beneficiary_id: __Mandatory__. The Id of the requested beneficiary. (required)
        :param str client_id: __Mandatory__. The customer or sub-customer id for which the request will be done (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ApiResponseOfVirtualAccountBeneficiary, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'beneficiary_id',
            'client_id'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_virtual_account_beneficiary" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'beneficiary_id' is set
        if self.api_client.client_side_validation and ('beneficiary_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['beneficiary_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `beneficiary_id` when calling `get_virtual_account_beneficiary`")  # noqa: E501
        # verify the required parameter 'client_id' is set
        if self.api_client.client_side_validation and ('client_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['client_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `client_id` when calling `get_virtual_account_beneficiary`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'beneficiary_id' in local_var_params:
            path_params['beneficiaryId'] = local_var_params['beneficiary_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'client_id' in local_var_params:
            header_params['client-id'] = local_var_params['client_id']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/virtual-accounts/beneficiaries/{beneficiaryId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ApiResponseOfVirtualAccountBeneficiary',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_virtual_account_by_id(self, account_id, client_id, **kwargs):  # noqa: E501
        """Get Account  # noqa: E501

        Get the details of a specific account using its Id  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_virtual_account_by_id(account_id, client_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str account_id: __Mandatory__. The Id of the account. (required)
        :param str client_id: __Mandatory__. The customer or sub-customer id for which the request will be done (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ApiResponseOfVirtualAccount
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_virtual_account_by_id_with_http_info(account_id, client_id, **kwargs)  # noqa: E501

    def get_virtual_account_by_id_with_http_info(self, account_id, client_id, **kwargs):  # noqa: E501
        """Get Account  # noqa: E501

        Get the details of a specific account using its Id  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_virtual_account_by_id_with_http_info(account_id, client_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str account_id: __Mandatory__. The Id of the account. (required)
        :param str client_id: __Mandatory__. The customer or sub-customer id for which the request will be done (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ApiResponseOfVirtualAccount, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'account_id',
            'client_id'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_virtual_account_by_id" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'account_id' is set
        if self.api_client.client_side_validation and ('account_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['account_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `account_id` when calling `get_virtual_account_by_id`")  # noqa: E501
        # verify the required parameter 'client_id' is set
        if self.api_client.client_side_validation and ('client_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['client_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `client_id` when calling `get_virtual_account_by_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'account_id' in local_var_params:
            path_params['accountId'] = local_var_params['account_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'client_id' in local_var_params:
            header_params['client-id'] = local_var_params['client_id']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/virtual-accounts/accounts/{accountId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ApiResponseOfVirtualAccount',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_virtual_account_clients(self, client_id, **kwargs):  # noqa: E501
        """Get List of Virtual Account Clients  # noqa: E501

        Get Virtual Account Clients (individual or business client).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_virtual_account_clients(client_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str client_id: __Mandatory__. This must be your master / parent client-id (and not one associated with one of your clients) (required)
        :param str type: __Optional__.  Filter clients based on client type. One of BUSINESS or INDIVIDUAL
        :param str status: __Optional__.  Filter clients based on client status. One of ACTIVE, PENDING or SUSPENDED
        :param str cursor: __Optional__. Data required to provide pagination
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ApiListResponseOfVirtualAccountClient
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_virtual_account_clients_with_http_info(client_id, **kwargs)  # noqa: E501

    def get_virtual_account_clients_with_http_info(self, client_id, **kwargs):  # noqa: E501
        """Get List of Virtual Account Clients  # noqa: E501

        Get Virtual Account Clients (individual or business client).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_virtual_account_clients_with_http_info(client_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str client_id: __Mandatory__. This must be your master / parent client-id (and not one associated with one of your clients) (required)
        :param str type: __Optional__.  Filter clients based on client type. One of BUSINESS or INDIVIDUAL
        :param str status: __Optional__.  Filter clients based on client status. One of ACTIVE, PENDING or SUSPENDED
        :param str cursor: __Optional__. Data required to provide pagination
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ApiListResponseOfVirtualAccountClient, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'client_id',
            'type',
            'status',
            'cursor'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_virtual_account_clients" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'client_id' is set
        if self.api_client.client_side_validation and ('client_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['client_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `client_id` when calling `get_virtual_account_clients`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'type' in local_var_params and local_var_params['type'] is not None:  # noqa: E501
            query_params.append(('type', local_var_params['type']))  # noqa: E501
        if 'status' in local_var_params and local_var_params['status'] is not None:  # noqa: E501
            query_params.append(('status', local_var_params['status']))  # noqa: E501
        if 'cursor' in local_var_params and local_var_params['cursor'] is not None:  # noqa: E501
            query_params.append(('cursor', local_var_params['cursor']))  # noqa: E501

        header_params = {}
        if 'client_id' in local_var_params:
            header_params['client-id'] = local_var_params['client_id']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/virtual-accounts/clients', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ApiListResponseOfVirtualAccountClient',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_virtual_account_payments(self, client_id, **kwargs):  # noqa: E501
        """Get Payments  # noqa: E501

        Retrieve a list of virtual account payments  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_virtual_account_payments(client_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str client_id: __Mandatory__. The customer or sub-customer id for which the request will be done (required)
        :param str account_id: __Optional__. Filter payments based on accountId
        :param datetime created_date_time_from: __Optional__. Filter payments based on the createdDateTime
        :param datetime created_date_time_to: __Optional__. Filter payments based on the createdDateTime
        :param list[str] status: __Optional__. Filter payments based on the payment status. One of INITIATED, PROCESSING, COMPLETED, FAILED
        :param list[str] type: __Optional__. Filter payments based on the payment type. One of PAY_IN, PAY_OUT, RETURN_IN, RETURN_OUT
        :param str cursor: __Optional__. Data required to provide pagination
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ApiListResponseOfVirtualAccountPayment
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_virtual_account_payments_with_http_info(client_id, **kwargs)  # noqa: E501

    def get_virtual_account_payments_with_http_info(self, client_id, **kwargs):  # noqa: E501
        """Get Payments  # noqa: E501

        Retrieve a list of virtual account payments  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_virtual_account_payments_with_http_info(client_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str client_id: __Mandatory__. The customer or sub-customer id for which the request will be done (required)
        :param str account_id: __Optional__. Filter payments based on accountId
        :param datetime created_date_time_from: __Optional__. Filter payments based on the createdDateTime
        :param datetime created_date_time_to: __Optional__. Filter payments based on the createdDateTime
        :param list[str] status: __Optional__. Filter payments based on the payment status. One of INITIATED, PROCESSING, COMPLETED, FAILED
        :param list[str] type: __Optional__. Filter payments based on the payment type. One of PAY_IN, PAY_OUT, RETURN_IN, RETURN_OUT
        :param str cursor: __Optional__. Data required to provide pagination
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ApiListResponseOfVirtualAccountPayment, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'client_id',
            'account_id',
            'created_date_time_from',
            'created_date_time_to',
            'status',
            'type',
            'cursor'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_virtual_account_payments" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'client_id' is set
        if self.api_client.client_side_validation and ('client_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['client_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `client_id` when calling `get_virtual_account_payments`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'account_id' in local_var_params and local_var_params['account_id'] is not None:  # noqa: E501
            query_params.append(('accountId', local_var_params['account_id']))  # noqa: E501
        if 'created_date_time_from' in local_var_params and local_var_params['created_date_time_from'] is not None:  # noqa: E501
            query_params.append(('createdDateTimeFrom', local_var_params['created_date_time_from']))  # noqa: E501
        if 'created_date_time_to' in local_var_params and local_var_params['created_date_time_to'] is not None:  # noqa: E501
            query_params.append(('createdDateTimeTo', local_var_params['created_date_time_to']))  # noqa: E501
        if 'status' in local_var_params and local_var_params['status'] is not None:  # noqa: E501
            query_params.append(('status', local_var_params['status']))  # noqa: E501
            collection_formats['status'] = 'multi'  # noqa: E501
        if 'type' in local_var_params and local_var_params['type'] is not None:  # noqa: E501
            query_params.append(('type', local_var_params['type']))  # noqa: E501
            collection_formats['type'] = 'multi'  # noqa: E501
        if 'cursor' in local_var_params and local_var_params['cursor'] is not None:  # noqa: E501
            query_params.append(('cursor', local_var_params['cursor']))  # noqa: E501

        header_params = {}
        if 'client_id' in local_var_params:
            header_params['client-id'] = local_var_params['client_id']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/virtual-accounts/payments', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ApiListResponseOfVirtualAccountPayment',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_virtual_accounts(self, client_id, **kwargs):  # noqa: E501
        """Get Accounts  # noqa: E501

        Retrieve a list of all virtual accounts held  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_virtual_accounts(client_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str client_id: __Mandatory__. The customer or sub-customer id for which the request will be done (required)
        :param str nickname: __Optional__. Filter accounts based on reference provided in order to help with identification of the account
        :param str currency: __Optional__. Filter accounts based on three-letter ISO 4217 currency code
        :param str status: __Optional__. Filter accounts based on their current state. One of PENDING, ACTIVE, FAILED, SUSPENDED or CLOSED
        :param str cursor: __Optional__. Data required to provide pagination
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ApiListResponseOfVirtualAccount
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_virtual_accounts_with_http_info(client_id, **kwargs)  # noqa: E501

    def get_virtual_accounts_with_http_info(self, client_id, **kwargs):  # noqa: E501
        """Get Accounts  # noqa: E501

        Retrieve a list of all virtual accounts held  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_virtual_accounts_with_http_info(client_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str client_id: __Mandatory__. The customer or sub-customer id for which the request will be done (required)
        :param str nickname: __Optional__. Filter accounts based on reference provided in order to help with identification of the account
        :param str currency: __Optional__. Filter accounts based on three-letter ISO 4217 currency code
        :param str status: __Optional__. Filter accounts based on their current state. One of PENDING, ACTIVE, FAILED, SUSPENDED or CLOSED
        :param str cursor: __Optional__. Data required to provide pagination
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ApiListResponseOfVirtualAccount, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'client_id',
            'nickname',
            'currency',
            'status',
            'cursor'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_virtual_accounts" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'client_id' is set
        if self.api_client.client_side_validation and ('client_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['client_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `client_id` when calling `get_virtual_accounts`")  # noqa: E501

        if self.api_client.client_side_validation and 'currency' in local_var_params and not re.search(r'^[A-Z]{3}$', local_var_params['currency']):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `currency` when calling `get_virtual_accounts`, must conform to the pattern `/^[A-Z]{3}$/`")  # noqa: E501
        collection_formats = {}

        path_params = {}

        query_params = []
        if 'nickname' in local_var_params and local_var_params['nickname'] is not None:  # noqa: E501
            query_params.append(('nickname', local_var_params['nickname']))  # noqa: E501
        if 'currency' in local_var_params and local_var_params['currency'] is not None:  # noqa: E501
            query_params.append(('currency', local_var_params['currency']))  # noqa: E501
        if 'status' in local_var_params and local_var_params['status'] is not None:  # noqa: E501
            query_params.append(('status', local_var_params['status']))  # noqa: E501
        if 'cursor' in local_var_params and local_var_params['cursor'] is not None:  # noqa: E501
            query_params.append(('cursor', local_var_params['cursor']))  # noqa: E501

        header_params = {}
        if 'client_id' in local_var_params:
            header_params['client-id'] = local_var_params['client_id']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/virtual-accounts/accounts', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ApiListResponseOfVirtualAccount',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_virtual_account_by_id(self, account_id, client_id, update_virtual_account_request, **kwargs):  # noqa: E501
        """Update Account  # noqa: E501

        Update the details of a specific account using its Id  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_virtual_account_by_id(account_id, client_id, update_virtual_account_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str account_id: __Mandatory__. The Id of the account. (required)
        :param str client_id: __Mandatory__. The customer or sub-customer id for which the request will be done (required)
        :param UpdateVirtualAccountRequest update_virtual_account_request: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ApiResponseOfVirtualAccount
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.update_virtual_account_by_id_with_http_info(account_id, client_id, update_virtual_account_request, **kwargs)  # noqa: E501

    def update_virtual_account_by_id_with_http_info(self, account_id, client_id, update_virtual_account_request, **kwargs):  # noqa: E501
        """Update Account  # noqa: E501

        Update the details of a specific account using its Id  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_virtual_account_by_id_with_http_info(account_id, client_id, update_virtual_account_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str account_id: __Mandatory__. The Id of the account. (required)
        :param str client_id: __Mandatory__. The customer or sub-customer id for which the request will be done (required)
        :param UpdateVirtualAccountRequest update_virtual_account_request: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ApiResponseOfVirtualAccount, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'account_id',
            'client_id',
            'update_virtual_account_request'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_virtual_account_by_id" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'account_id' is set
        if self.api_client.client_side_validation and ('account_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['account_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `account_id` when calling `update_virtual_account_by_id`")  # noqa: E501
        # verify the required parameter 'client_id' is set
        if self.api_client.client_side_validation and ('client_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['client_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `client_id` when calling `update_virtual_account_by_id`")  # noqa: E501
        # verify the required parameter 'update_virtual_account_request' is set
        if self.api_client.client_side_validation and ('update_virtual_account_request' not in local_var_params or  # noqa: E501
                                                        local_var_params['update_virtual_account_request'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `update_virtual_account_request` when calling `update_virtual_account_by_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'account_id' in local_var_params:
            path_params['accountId'] = local_var_params['account_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'client_id' in local_var_params:
            header_params['client-id'] = local_var_params['client_id']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'update_virtual_account_request' in local_var_params:
            body_params = local_var_params['update_virtual_account_request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json;charset=UTF-8'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/virtual-accounts/accounts/{accountId}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ApiResponseOfVirtualAccount',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)
