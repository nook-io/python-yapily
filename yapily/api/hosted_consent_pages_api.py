# coding: utf-8

"""
Yapily API

The Yapily API enables connections between your application and users' banks. For more information check out our [documentation](https://docs.yapily.com/).<br><br>In particular, make sure to view our [Getting Started](https://docs.yapily.com/pages/home/getting-started/) steps if this is your first time here.<br><br>While testing the API, our list of [sandbox credentials](https://docs.yapily.com/pages/key-concepts/sandbox-credentials/) maybe useful.

The version of the OpenAPI document: 7.2.0
Contact: support@yapily.com
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

import re  # noqa: F401

from pydantic import validate_arguments

from typing_extensions import Annotated
from pydantic import Field, StrictStr

from yapily.models.api_response_of_create_hosted_consent_request import (
    ApiResponseOfCreateHostedConsentRequest,
)
from yapily.models.api_response_of_get_hosted_consent_request import (
    ApiResponseOfGetHostedConsentRequest,
)
from yapily.models.create_hosted_consent_request import CreateHostedConsentRequest

from yapily.api_client import ApiClient
from yapily.api_response import ApiResponse
from yapily.exceptions import (  # noqa: F401
    ApiTypeError,
    ApiValueError,
)


class HostedConsentPagesApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client

    @validate_arguments
    async def create_hosted_consent_request(
        self, create_hosted_consent_request: CreateHostedConsentRequest, **kwargs
    ) -> ApiResponseOfCreateHostedConsentRequest:  # noqa: E501
        """Create Hosted Consent Request  # noqa: E501

        Used to initiate a consent request using Yapily Hosted Pages.  # noqa: E501

        :param create_hosted_consent_request: (required)
        :type create_hosted_consent_request: CreateHostedConsentRequest
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ApiResponseOfCreateHostedConsentRequest
        """
        kwargs["_return_http_data_only"] = True
        if "_preload_content" in kwargs:
            message = "Error! Please call the create_hosted_consent_request_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return await self.create_hosted_consent_request_with_http_info(
            create_hosted_consent_request, **kwargs
        )  # noqa: E501

    @validate_arguments
    async def create_hosted_consent_request_with_http_info(
        self, create_hosted_consent_request: CreateHostedConsentRequest, **kwargs
    ) -> ApiResponse:  # noqa: E501
        """Create Hosted Consent Request  # noqa: E501

        Used to initiate a consent request using Yapily Hosted Pages.  # noqa: E501

        :param create_hosted_consent_request: (required)
        :type create_hosted_consent_request: CreateHostedConsentRequest
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(ApiResponseOfCreateHostedConsentRequest, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = ["create_hosted_consent_request"]
        _all_params.extend(
            [
                "_return_http_data_only",
                "_preload_content",
                "_request_timeout",
                "_request_auth",
                "_content_type",
                "_headers",
            ]
        )

        # validate the arguments
        for _key, _val in _params["kwargs"].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_hosted_consent_request" % _key
                )
            _params[_key] = _val
        del _params["kwargs"]

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get("_headers", {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params["create_hosted_consent_request"] is not None:
            _body_params = _params["create_hosted_consent_request"]

        # set the HTTP header `Accept`
        _header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json;charset=UTF-8"]
        )  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get(
            "_content_type",
            self.api_client.select_header_content_type(
                ["application/json;charset=UTF-8"]
            ),
        )
        if _content_types_list:
            _header_params["Content-Type"] = _content_types_list

        # authentication setting
        _auth_settings = ["basicAuth"]  # noqa: E501

        _response_types_map = {
            "201": "ApiResponseOfCreateHostedConsentRequest",
            "400": "ApiResponseError",
            "401": "ApiResponseError",
            "500": "ApiResponseError",
        }

        return await self.api_client.call_api(
            "/hosted/consent-requests",
            "POST",
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            _return_http_data_only=_params.get("_return_http_data_only"),  # noqa: E501
            _preload_content=_params.get("_preload_content", True),
            _request_timeout=_params.get("_request_timeout"),
            collection_formats=_collection_formats,
            _request_auth=_params.get("_request_auth"),
        )

    @validate_arguments
    async def get_hosted_consent_request(
        self,
        consent_request_id: Annotated[
            StrictStr,
            Field(..., description="Unique Identifier of the consent request"),
        ],
        **kwargs,
    ) -> ApiResponseOfGetHostedConsentRequest:  # noqa: E501
        """Get Hosted Consent Request  # noqa: E501

        Used to get details of a hosted consent request  # noqa: E501

        :param consent_request_id: Unique Identifier of the consent request (required)
        :type consent_request_id: str
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ApiResponseOfGetHostedConsentRequest
        """
        kwargs["_return_http_data_only"] = True
        if "_preload_content" in kwargs:
            message = "Error! Please call the get_hosted_consent_request_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return await self.get_hosted_consent_request_with_http_info(
            consent_request_id, **kwargs
        )  # noqa: E501

    @validate_arguments
    async def get_hosted_consent_request_with_http_info(
        self,
        consent_request_id: Annotated[
            StrictStr,
            Field(..., description="Unique Identifier of the consent request"),
        ],
        **kwargs,
    ) -> ApiResponse:  # noqa: E501
        """Get Hosted Consent Request  # noqa: E501

        Used to get details of a hosted consent request  # noqa: E501

        :param consent_request_id: Unique Identifier of the consent request (required)
        :type consent_request_id: str
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(ApiResponseOfGetHostedConsentRequest, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = ["consent_request_id"]
        _all_params.extend(
            [
                "_return_http_data_only",
                "_preload_content",
                "_request_timeout",
                "_request_auth",
                "_content_type",
                "_headers",
            ]
        )

        # validate the arguments
        for _key, _val in _params["kwargs"].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_hosted_consent_request" % _key
                )
            _params[_key] = _val
        del _params["kwargs"]

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params["consent_request_id"] is not None:
            _path_params["consentRequestId"] = _params["consent_request_id"]

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get("_headers", {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json;charset=UTF-8"]
        )  # noqa: E501

        # authentication setting
        _auth_settings = ["basicAuth"]  # noqa: E501

        _response_types_map = {
            "200": "ApiResponseOfGetHostedConsentRequest",
            "401": "ApiResponseError",
            "404": "ApiResponseError",
            "500": "ApiResponseError",
        }

        return await self.api_client.call_api(
            "/hosted/consent-requests/{consentRequestId}",
            "GET",
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            _return_http_data_only=_params.get("_return_http_data_only"),  # noqa: E501
            _preload_content=_params.get("_preload_content", True),
            _request_timeout=_params.get("_request_timeout"),
            collection_formats=_collection_formats,
            _request_auth=_params.get("_request_auth"),
        )
