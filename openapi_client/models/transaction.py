# coding: utf-8

"""
    Yapily API

    The Yapily API enables connections between your application and users' banks. For more information check out our [documentation](https://docs.yapily.com/).<br><br>In particular, make sure to view our [Getting Started](https://docs.yapily.com/#getting-started) steps if this is your first time here.<br><br>While testing the API, our list of [sandbox credentials](https://docs.yapily.com/guides/applications/institutions/sandbox/) maybe useful.  # noqa: E501

    The version of the OpenAPI document: 2.1.0
    Contact: support@yapily.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class Transaction(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'date': 'datetime',
        'booking_date_time': 'datetime',
        'value_date_time': 'datetime',
        'status': 'TransactionStatusEnum',
        'amount': 'float',
        'currency': 'str',
        'transaction_amount': 'Amount',
        'gross_amount': 'Amount',
        'currency_exchange': 'CurrencyExchange',
        'charge_details': 'TransactionChargeDetails',
        'reference': 'str',
        'statement_references': 'list[StatementReference]',
        'description': 'str',
        'transaction_information': 'list[str]',
        'address_details': 'AddressDetails',
        'iso_bank_transaction_code': 'IsoBankTransactionCode',
        'proprietary_bank_transaction_code': 'ProprietaryBankTransactionCode',
        'balance': 'TransactionBalance',
        'payee_details': 'Payee',
        'payer_details': 'Payer',
        'merchant': 'Merchant',
        'enrichment': 'Enrichment',
        'supplementary_data': 'object'
    }

    attribute_map = {
        'id': 'id',
        'date': 'date',
        'booking_date_time': 'bookingDateTime',
        'value_date_time': 'valueDateTime',
        'status': 'status',
        'amount': 'amount',
        'currency': 'currency',
        'transaction_amount': 'transactionAmount',
        'gross_amount': 'grossAmount',
        'currency_exchange': 'currencyExchange',
        'charge_details': 'chargeDetails',
        'reference': 'reference',
        'statement_references': 'statementReferences',
        'description': 'description',
        'transaction_information': 'transactionInformation',
        'address_details': 'addressDetails',
        'iso_bank_transaction_code': 'isoBankTransactionCode',
        'proprietary_bank_transaction_code': 'proprietaryBankTransactionCode',
        'balance': 'balance',
        'payee_details': 'payeeDetails',
        'payer_details': 'payerDetails',
        'merchant': 'merchant',
        'enrichment': 'enrichment',
        'supplementary_data': 'supplementaryData'
    }

    def __init__(self, id=None, date=None, booking_date_time=None, value_date_time=None, status=None, amount=None, currency=None, transaction_amount=None, gross_amount=None, currency_exchange=None, charge_details=None, reference=None, statement_references=None, description=None, transaction_information=None, address_details=None, iso_bank_transaction_code=None, proprietary_bank_transaction_code=None, balance=None, payee_details=None, payer_details=None, merchant=None, enrichment=None, supplementary_data=None, local_vars_configuration=None):  # noqa: E501
        """Transaction - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._date = None
        self._booking_date_time = None
        self._value_date_time = None
        self._status = None
        self._amount = None
        self._currency = None
        self._transaction_amount = None
        self._gross_amount = None
        self._currency_exchange = None
        self._charge_details = None
        self._reference = None
        self._statement_references = None
        self._description = None
        self._transaction_information = None
        self._address_details = None
        self._iso_bank_transaction_code = None
        self._proprietary_bank_transaction_code = None
        self._balance = None
        self._payee_details = None
        self._payer_details = None
        self._merchant = None
        self._enrichment = None
        self._supplementary_data = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if date is not None:
            self.date = date
        if booking_date_time is not None:
            self.booking_date_time = booking_date_time
        if value_date_time is not None:
            self.value_date_time = value_date_time
        if status is not None:
            self.status = status
        if amount is not None:
            self.amount = amount
        if currency is not None:
            self.currency = currency
        if transaction_amount is not None:
            self.transaction_amount = transaction_amount
        if gross_amount is not None:
            self.gross_amount = gross_amount
        if currency_exchange is not None:
            self.currency_exchange = currency_exchange
        if charge_details is not None:
            self.charge_details = charge_details
        if reference is not None:
            self.reference = reference
        if statement_references is not None:
            self.statement_references = statement_references
        if description is not None:
            self.description = description
        if transaction_information is not None:
            self.transaction_information = transaction_information
        if address_details is not None:
            self.address_details = address_details
        if iso_bank_transaction_code is not None:
            self.iso_bank_transaction_code = iso_bank_transaction_code
        if proprietary_bank_transaction_code is not None:
            self.proprietary_bank_transaction_code = proprietary_bank_transaction_code
        if balance is not None:
            self.balance = balance
        if payee_details is not None:
            self.payee_details = payee_details
        if payer_details is not None:
            self.payer_details = payer_details
        if merchant is not None:
            self.merchant = merchant
        if enrichment is not None:
            self.enrichment = enrichment
        if supplementary_data is not None:
            self.supplementary_data = supplementary_data

    @property
    def id(self):
        """Gets the id of this Transaction.  # noqa: E501


        :return: The id of this Transaction.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Transaction.


        :param id: The id of this Transaction.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def date(self):
        """Gets the date of this Transaction.  # noqa: E501


        :return: The date of this Transaction.  # noqa: E501
        :rtype: datetime
        """
        return self._date

    @date.setter
    def date(self, date):
        """Sets the date of this Transaction.


        :param date: The date of this Transaction.  # noqa: E501
        :type: datetime
        """

        self._date = date

    @property
    def booking_date_time(self):
        """Gets the booking_date_time of this Transaction.  # noqa: E501


        :return: The booking_date_time of this Transaction.  # noqa: E501
        :rtype: datetime
        """
        return self._booking_date_time

    @booking_date_time.setter
    def booking_date_time(self, booking_date_time):
        """Sets the booking_date_time of this Transaction.


        :param booking_date_time: The booking_date_time of this Transaction.  # noqa: E501
        :type: datetime
        """

        self._booking_date_time = booking_date_time

    @property
    def value_date_time(self):
        """Gets the value_date_time of this Transaction.  # noqa: E501


        :return: The value_date_time of this Transaction.  # noqa: E501
        :rtype: datetime
        """
        return self._value_date_time

    @value_date_time.setter
    def value_date_time(self, value_date_time):
        """Sets the value_date_time of this Transaction.


        :param value_date_time: The value_date_time of this Transaction.  # noqa: E501
        :type: datetime
        """

        self._value_date_time = value_date_time

    @property
    def status(self):
        """Gets the status of this Transaction.  # noqa: E501


        :return: The status of this Transaction.  # noqa: E501
        :rtype: TransactionStatusEnum
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Transaction.


        :param status: The status of this Transaction.  # noqa: E501
        :type: TransactionStatusEnum
        """

        self._status = status

    @property
    def amount(self):
        """Gets the amount of this Transaction.  # noqa: E501


        :return: The amount of this Transaction.  # noqa: E501
        :rtype: float
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this Transaction.


        :param amount: The amount of this Transaction.  # noqa: E501
        :type: float
        """

        self._amount = amount

    @property
    def currency(self):
        """Gets the currency of this Transaction.  # noqa: E501


        :return: The currency of this Transaction.  # noqa: E501
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this Transaction.


        :param currency: The currency of this Transaction.  # noqa: E501
        :type: str
        """

        self._currency = currency

    @property
    def transaction_amount(self):
        """Gets the transaction_amount of this Transaction.  # noqa: E501


        :return: The transaction_amount of this Transaction.  # noqa: E501
        :rtype: Amount
        """
        return self._transaction_amount

    @transaction_amount.setter
    def transaction_amount(self, transaction_amount):
        """Sets the transaction_amount of this Transaction.


        :param transaction_amount: The transaction_amount of this Transaction.  # noqa: E501
        :type: Amount
        """

        self._transaction_amount = transaction_amount

    @property
    def gross_amount(self):
        """Gets the gross_amount of this Transaction.  # noqa: E501


        :return: The gross_amount of this Transaction.  # noqa: E501
        :rtype: Amount
        """
        return self._gross_amount

    @gross_amount.setter
    def gross_amount(self, gross_amount):
        """Sets the gross_amount of this Transaction.


        :param gross_amount: The gross_amount of this Transaction.  # noqa: E501
        :type: Amount
        """

        self._gross_amount = gross_amount

    @property
    def currency_exchange(self):
        """Gets the currency_exchange of this Transaction.  # noqa: E501


        :return: The currency_exchange of this Transaction.  # noqa: E501
        :rtype: CurrencyExchange
        """
        return self._currency_exchange

    @currency_exchange.setter
    def currency_exchange(self, currency_exchange):
        """Sets the currency_exchange of this Transaction.


        :param currency_exchange: The currency_exchange of this Transaction.  # noqa: E501
        :type: CurrencyExchange
        """

        self._currency_exchange = currency_exchange

    @property
    def charge_details(self):
        """Gets the charge_details of this Transaction.  # noqa: E501


        :return: The charge_details of this Transaction.  # noqa: E501
        :rtype: TransactionChargeDetails
        """
        return self._charge_details

    @charge_details.setter
    def charge_details(self, charge_details):
        """Sets the charge_details of this Transaction.


        :param charge_details: The charge_details of this Transaction.  # noqa: E501
        :type: TransactionChargeDetails
        """

        self._charge_details = charge_details

    @property
    def reference(self):
        """Gets the reference of this Transaction.  # noqa: E501


        :return: The reference of this Transaction.  # noqa: E501
        :rtype: str
        """
        return self._reference

    @reference.setter
    def reference(self, reference):
        """Sets the reference of this Transaction.


        :param reference: The reference of this Transaction.  # noqa: E501
        :type: str
        """

        self._reference = reference

    @property
    def statement_references(self):
        """Gets the statement_references of this Transaction.  # noqa: E501


        :return: The statement_references of this Transaction.  # noqa: E501
        :rtype: list[StatementReference]
        """
        return self._statement_references

    @statement_references.setter
    def statement_references(self, statement_references):
        """Sets the statement_references of this Transaction.


        :param statement_references: The statement_references of this Transaction.  # noqa: E501
        :type: list[StatementReference]
        """

        self._statement_references = statement_references

    @property
    def description(self):
        """Gets the description of this Transaction.  # noqa: E501


        :return: The description of this Transaction.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Transaction.


        :param description: The description of this Transaction.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def transaction_information(self):
        """Gets the transaction_information of this Transaction.  # noqa: E501


        :return: The transaction_information of this Transaction.  # noqa: E501
        :rtype: list[str]
        """
        return self._transaction_information

    @transaction_information.setter
    def transaction_information(self, transaction_information):
        """Sets the transaction_information of this Transaction.


        :param transaction_information: The transaction_information of this Transaction.  # noqa: E501
        :type: list[str]
        """

        self._transaction_information = transaction_information

    @property
    def address_details(self):
        """Gets the address_details of this Transaction.  # noqa: E501


        :return: The address_details of this Transaction.  # noqa: E501
        :rtype: AddressDetails
        """
        return self._address_details

    @address_details.setter
    def address_details(self, address_details):
        """Sets the address_details of this Transaction.


        :param address_details: The address_details of this Transaction.  # noqa: E501
        :type: AddressDetails
        """

        self._address_details = address_details

    @property
    def iso_bank_transaction_code(self):
        """Gets the iso_bank_transaction_code of this Transaction.  # noqa: E501


        :return: The iso_bank_transaction_code of this Transaction.  # noqa: E501
        :rtype: IsoBankTransactionCode
        """
        return self._iso_bank_transaction_code

    @iso_bank_transaction_code.setter
    def iso_bank_transaction_code(self, iso_bank_transaction_code):
        """Sets the iso_bank_transaction_code of this Transaction.


        :param iso_bank_transaction_code: The iso_bank_transaction_code of this Transaction.  # noqa: E501
        :type: IsoBankTransactionCode
        """

        self._iso_bank_transaction_code = iso_bank_transaction_code

    @property
    def proprietary_bank_transaction_code(self):
        """Gets the proprietary_bank_transaction_code of this Transaction.  # noqa: E501


        :return: The proprietary_bank_transaction_code of this Transaction.  # noqa: E501
        :rtype: ProprietaryBankTransactionCode
        """
        return self._proprietary_bank_transaction_code

    @proprietary_bank_transaction_code.setter
    def proprietary_bank_transaction_code(self, proprietary_bank_transaction_code):
        """Sets the proprietary_bank_transaction_code of this Transaction.


        :param proprietary_bank_transaction_code: The proprietary_bank_transaction_code of this Transaction.  # noqa: E501
        :type: ProprietaryBankTransactionCode
        """

        self._proprietary_bank_transaction_code = proprietary_bank_transaction_code

    @property
    def balance(self):
        """Gets the balance of this Transaction.  # noqa: E501


        :return: The balance of this Transaction.  # noqa: E501
        :rtype: TransactionBalance
        """
        return self._balance

    @balance.setter
    def balance(self, balance):
        """Sets the balance of this Transaction.


        :param balance: The balance of this Transaction.  # noqa: E501
        :type: TransactionBalance
        """

        self._balance = balance

    @property
    def payee_details(self):
        """Gets the payee_details of this Transaction.  # noqa: E501


        :return: The payee_details of this Transaction.  # noqa: E501
        :rtype: Payee
        """
        return self._payee_details

    @payee_details.setter
    def payee_details(self, payee_details):
        """Sets the payee_details of this Transaction.


        :param payee_details: The payee_details of this Transaction.  # noqa: E501
        :type: Payee
        """

        self._payee_details = payee_details

    @property
    def payer_details(self):
        """Gets the payer_details of this Transaction.  # noqa: E501


        :return: The payer_details of this Transaction.  # noqa: E501
        :rtype: Payer
        """
        return self._payer_details

    @payer_details.setter
    def payer_details(self, payer_details):
        """Sets the payer_details of this Transaction.


        :param payer_details: The payer_details of this Transaction.  # noqa: E501
        :type: Payer
        """

        self._payer_details = payer_details

    @property
    def merchant(self):
        """Gets the merchant of this Transaction.  # noqa: E501


        :return: The merchant of this Transaction.  # noqa: E501
        :rtype: Merchant
        """
        return self._merchant

    @merchant.setter
    def merchant(self, merchant):
        """Sets the merchant of this Transaction.


        :param merchant: The merchant of this Transaction.  # noqa: E501
        :type: Merchant
        """

        self._merchant = merchant

    @property
    def enrichment(self):
        """Gets the enrichment of this Transaction.  # noqa: E501


        :return: The enrichment of this Transaction.  # noqa: E501
        :rtype: Enrichment
        """
        return self._enrichment

    @enrichment.setter
    def enrichment(self, enrichment):
        """Sets the enrichment of this Transaction.


        :param enrichment: The enrichment of this Transaction.  # noqa: E501
        :type: Enrichment
        """

        self._enrichment = enrichment

    @property
    def supplementary_data(self):
        """Gets the supplementary_data of this Transaction.  # noqa: E501


        :return: The supplementary_data of this Transaction.  # noqa: E501
        :rtype: object
        """
        return self._supplementary_data

    @supplementary_data.setter
    def supplementary_data(self, supplementary_data):
        """Sets the supplementary_data of this Transaction.


        :param supplementary_data: The supplementary_data of this Transaction.  # noqa: E501
        :type: object
        """

        self._supplementary_data = supplementary_data

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Transaction):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Transaction):
            return True

        return self.to_dict() != other.to_dict()
