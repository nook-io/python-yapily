# coding: utf-8

"""
    Yapily API

    The Yapily API enables connections between your application and users' banks. For more information check out our [documentation](https://docs.yapily.com/).<br><br>In particular, make sure to view our [Getting Started](https://docs.yapily.com/#getting-started) steps if this is your first time here.<br><br>While testing the API, our list of [sandbox credentials](https://docs.yapily.com/guides/applications/institutions/sandbox/) maybe useful.  # noqa: E501

    The version of the OpenAPI document: 2.1.0
    Contact: support@yapily.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class TransactionSchedule(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'frequency': 'str',
        'detailed_frequency': 'str',
        'detailed_frequency_parameter': 'float'
    }

    attribute_map = {
        'frequency': 'frequency',
        'detailed_frequency': 'detailedFrequency',
        'detailed_frequency_parameter': 'detailedFrequencyParameter'
    }

    def __init__(self, frequency=None, detailed_frequency=None, detailed_frequency_parameter=None, local_vars_configuration=None):  # noqa: E501
        """TransactionSchedule - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._frequency = None
        self._detailed_frequency = None
        self._detailed_frequency_parameter = None
        self.discriminator = None

        if frequency is not None:
            self.frequency = frequency
        if detailed_frequency is not None:
            self.detailed_frequency = detailed_frequency
        if detailed_frequency_parameter is not None:
            self.detailed_frequency_parameter = detailed_frequency_parameter

    @property
    def frequency(self):
        """Gets the frequency of this TransactionSchedule.  # noqa: E501

        How often the transaction happens.  Can be 'Monthly', 'Twice monthly', 'Every two weeks', 'Every four weeks', 'Daily', 'Weekly', 'Every weekday', 'Twice daily', 'Twice every weekday'  # noqa: E501

        :return: The frequency of this TransactionSchedule.  # noqa: E501
        :rtype: str
        """
        return self._frequency

    @frequency.setter
    def frequency(self, frequency):
        """Sets the frequency of this TransactionSchedule.

        How often the transaction happens.  Can be 'Monthly', 'Twice monthly', 'Every two weeks', 'Every four weeks', 'Daily', 'Weekly', 'Every weekday', 'Twice daily', 'Twice every weekday'  # noqa: E501

        :param frequency: The frequency of this TransactionSchedule.  # noqa: E501
        :type: str
        """

        self._frequency = frequency

    @property
    def detailed_frequency(self):
        """Gets the detailed_frequency of this TransactionSchedule.  # noqa: E501

        When in the cycle the transaction occurs.  Can be 'Daily', 'Twice daily', 'Twice every weekday', 'Every weekday', 'Weekly on day n', 'Every two weeks on day n', 'Monthly on working day before day n of month', 'Monthly on last working day of month', 'Twice a month on 15th and last working day of month', 'Every four weeks on day n'  # noqa: E501

        :return: The detailed_frequency of this TransactionSchedule.  # noqa: E501
        :rtype: str
        """
        return self._detailed_frequency

    @detailed_frequency.setter
    def detailed_frequency(self, detailed_frequency):
        """Sets the detailed_frequency of this TransactionSchedule.

        When in the cycle the transaction occurs.  Can be 'Daily', 'Twice daily', 'Twice every weekday', 'Every weekday', 'Weekly on day n', 'Every two weeks on day n', 'Monthly on working day before day n of month', 'Monthly on last working day of month', 'Twice a month on 15th and last working day of month', 'Every four weeks on day n'  # noqa: E501

        :param detailed_frequency: The detailed_frequency of this TransactionSchedule.  # noqa: E501
        :type: str
        """

        self._detailed_frequency = detailed_frequency

    @property
    def detailed_frequency_parameter(self):
        """Gets the detailed_frequency_parameter of this TransactionSchedule.  # noqa: E501

        The n in detailedFrequency where there is one - for week-based frequencies, an integer from 0 to 6 where 0 is Monday or for month-based frequencies, an integer from 0 to 27 where 0 is the first day of the month  # noqa: E501

        :return: The detailed_frequency_parameter of this TransactionSchedule.  # noqa: E501
        :rtype: float
        """
        return self._detailed_frequency_parameter

    @detailed_frequency_parameter.setter
    def detailed_frequency_parameter(self, detailed_frequency_parameter):
        """Sets the detailed_frequency_parameter of this TransactionSchedule.

        The n in detailedFrequency where there is one - for week-based frequencies, an integer from 0 to 6 where 0 is Monday or for month-based frequencies, an integer from 0 to 27 where 0 is the first day of the month  # noqa: E501

        :param detailed_frequency_parameter: The detailed_frequency_parameter of this TransactionSchedule.  # noqa: E501
        :type: float
        """

        self._detailed_frequency_parameter = detailed_frequency_parameter

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TransactionSchedule):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, TransactionSchedule):
            return True

        return self.to_dict() != other.to_dict()
