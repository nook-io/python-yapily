# coding: utf-8

"""
    Yapily API

    The Yapily API enables connections between your application and users' banks. For more information check out our [documentation](https://docs.yapily.com/).<br><br>In particular, make sure to view our [Getting Started](https://docs.yapily.com/#getting-started) steps if this is your first time here.<br><br>While testing the API, our list of [sandbox credentials](https://docs.yapily.com/guides/applications/institutions/sandbox/) maybe useful.  # noqa: E501

    The version of the OpenAPI document: 2.1.0
    Contact: support@yapily.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class EnrichedTransaction(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'transaction_id': 'str',
        'transaction_information': 'str',
        'amount': 'float',
        'institution': 'str',
        'booking_date_time': 'datetime'
    }

    attribute_map = {
        'transaction_id': 'transactionId',
        'transaction_information': 'transactionInformation',
        'amount': 'amount',
        'institution': 'institution',
        'booking_date_time': 'bookingDateTime'
    }

    def __init__(self, transaction_id=None, transaction_information=None, amount=None, institution=None, booking_date_time=None, local_vars_configuration=None):  # noqa: E501
        """EnrichedTransaction - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._transaction_id = None
        self._transaction_information = None
        self._amount = None
        self._institution = None
        self._booking_date_time = None
        self.discriminator = None

        if transaction_id is not None:
            self.transaction_id = transaction_id
        if transaction_information is not None:
            self.transaction_information = transaction_information
        if amount is not None:
            self.amount = amount
        if institution is not None:
            self.institution = institution
        if booking_date_time is not None:
            self.booking_date_time = booking_date_time

    @property
    def transaction_id(self):
        """Gets the transaction_id of this EnrichedTransaction.  # noqa: E501

        The id of the transaction  # noqa: E501

        :return: The transaction_id of this EnrichedTransaction.  # noqa: E501
        :rtype: str
        """
        return self._transaction_id

    @transaction_id.setter
    def transaction_id(self, transaction_id):
        """Sets the transaction_id of this EnrichedTransaction.

        The id of the transaction  # noqa: E501

        :param transaction_id: The transaction_id of this EnrichedTransaction.  # noqa: E501
        :type: str
        """

        self._transaction_id = transaction_id

    @property
    def transaction_information(self):
        """Gets the transaction_information of this EnrichedTransaction.  # noqa: E501

        Information for the transaction  # noqa: E501

        :return: The transaction_information of this EnrichedTransaction.  # noqa: E501
        :rtype: str
        """
        return self._transaction_information

    @transaction_information.setter
    def transaction_information(self, transaction_information):
        """Sets the transaction_information of this EnrichedTransaction.

        Information for the transaction  # noqa: E501

        :param transaction_information: The transaction_information of this EnrichedTransaction.  # noqa: E501
        :type: str
        """

        self._transaction_information = transaction_information

    @property
    def amount(self):
        """Gets the amount of this EnrichedTransaction.  # noqa: E501

        The amount of the transaction  # noqa: E501

        :return: The amount of this EnrichedTransaction.  # noqa: E501
        :rtype: float
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this EnrichedTransaction.

        The amount of the transaction  # noqa: E501

        :param amount: The amount of this EnrichedTransaction.  # noqa: E501
        :type: float
        """

        self._amount = amount

    @property
    def institution(self):
        """Gets the institution of this EnrichedTransaction.  # noqa: E501

        The id of the institution  # noqa: E501

        :return: The institution of this EnrichedTransaction.  # noqa: E501
        :rtype: str
        """
        return self._institution

    @institution.setter
    def institution(self, institution):
        """Sets the institution of this EnrichedTransaction.

        The id of the institution  # noqa: E501

        :param institution: The institution of this EnrichedTransaction.  # noqa: E501
        :type: str
        """

        self._institution = institution

    @property
    def booking_date_time(self):
        """Gets the booking_date_time of this EnrichedTransaction.  # noqa: E501

        The datetime of the transaction  # noqa: E501

        :return: The booking_date_time of this EnrichedTransaction.  # noqa: E501
        :rtype: datetime
        """
        return self._booking_date_time

    @booking_date_time.setter
    def booking_date_time(self, booking_date_time):
        """Sets the booking_date_time of this EnrichedTransaction.

        The datetime of the transaction  # noqa: E501

        :param booking_date_time: The booking_date_time of this EnrichedTransaction.  # noqa: E501
        :type: datetime
        """

        self._booking_date_time = booking_date_time

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EnrichedTransaction):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, EnrichedTransaction):
            return True

        return self.to_dict() != other.to_dict()
