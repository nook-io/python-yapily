# coding: utf-8

"""
    Yapily API

    The Yapily API enables connections between your application and users' banks. For more information check out our [documentation](https://docs.yapily.com/).<br><br>In particular, make sure to view our [Getting Started](https://docs.yapily.com/#getting-started) steps if this is your first time here.<br><br>While testing the API, our list of [sandbox credentials](https://docs.yapily.com/guides/applications/institutions/sandbox/) maybe useful.  # noqa: E501

    The version of the OpenAPI document: 2.1.0
    Contact: support@yapily.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class ApiResponseError(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'error': 'ApiError',
        'monitoring': 'list[MonitoringEndpointStatus]',
        'raw': 'list[RawResponse]'
    }

    attribute_map = {
        'error': 'error',
        'monitoring': 'monitoring',
        'raw': 'raw'
    }

    def __init__(self, error=None, monitoring=None, raw=None, local_vars_configuration=None):  # noqa: E501
        """ApiResponseError - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._error = None
        self._monitoring = None
        self._raw = None
        self.discriminator = None

        if error is not None:
            self.error = error
        if monitoring is not None:
            self.monitoring = monitoring
        if raw is not None:
            self.raw = raw

    @property
    def error(self):
        """Gets the error of this ApiResponseError.  # noqa: E501


        :return: The error of this ApiResponseError.  # noqa: E501
        :rtype: ApiError
        """
        return self._error

    @error.setter
    def error(self, error):
        """Sets the error of this ApiResponseError.


        :param error: The error of this ApiResponseError.  # noqa: E501
        :type: ApiError
        """

        self._error = error

    @property
    def monitoring(self):
        """Gets the monitoring of this ApiResponseError.  # noqa: E501


        :return: The monitoring of this ApiResponseError.  # noqa: E501
        :rtype: list[MonitoringEndpointStatus]
        """
        return self._monitoring

    @monitoring.setter
    def monitoring(self, monitoring):
        """Sets the monitoring of this ApiResponseError.


        :param monitoring: The monitoring of this ApiResponseError.  # noqa: E501
        :type: list[MonitoringEndpointStatus]
        """

        self._monitoring = monitoring

    @property
    def raw(self):
        """Gets the raw of this ApiResponseError.  # noqa: E501


        :return: The raw of this ApiResponseError.  # noqa: E501
        :rtype: list[RawResponse]
        """
        return self._raw

    @raw.setter
    def raw(self, raw):
        """Sets the raw of this ApiResponseError.


        :param raw: The raw of this ApiResponseError.  # noqa: E501
        :type: list[RawResponse]
        """

        self._raw = raw

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ApiResponseError):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ApiResponseError):
            return True

        return self.to_dict() != other.to_dict()
